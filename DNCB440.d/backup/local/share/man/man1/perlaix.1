.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLAIX 1"
.TH PERLAIX 1 "2002-06-08" "perl v5.8.0" "Perl Programmers Reference Guide"
.SH "NAME"
README.aix \- Perl version 5 on IBM Unix (AIX) systems
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes various features of \s-1IBM\s0's Unix operating
system (\s-1AIX\s0) that will affect how Perl version 5 (hereafter just Perl)
is compiled and/or runs.
.Sh "Compiling Perl 5 on \s-1AIX\s0"
.IX Subsection "Compiling Perl 5 on AIX"
When compiling Perl, you must use an \s-1ANSI\s0 C compiler. \s-1AIX\s0 does not ship
an \s-1ANSI\s0 compliant C\-compiler with \s-1AIX\s0 by default, but binary builds of
gcc for \s-1AIX\s0 are widely available.
.PP
At the moment of writing, \s-1AIX\s0 supports two different native C compilers,
for which you have to pay: \fBxlC\fR and \fBvac\fR. If you decide to use either
of these two (which is quite a lot easier than using gcc), be sure to
upgrade to the latest available patch level. Currently:
.PP
.Vb 2
\&    xlC.C     3.1.4.10 or 3.6.6.0 or 5.0.2.6
\&    vac.C     4.4.0.3  or 5.0.2.4
.Ve
.PP
Perl can be compiled with either \s-1IBM\s0's \s-1ANSI\s0 C compiler or with gcc.
The former is recommended, as not only can it compile Perl with no
difficulty, but also can take advantage of features listed later that
require the use of \s-1IBM\s0 compiler-specific command-line flags.
.PP
The \s-1IBM\s0's compiler patch levels 5.0.0.0 and 5.0.1.0 have compiler
optimization bugs that affect compiling perl.c and regcomp.c,
respectively.  If Perl's configuration detects those compiler patch
levels, optimization is turned off for the said source code files.
Upgrading to at least 5.0.2.0 is recommended.
.PP
If you decide to use gcc, make sure your installation is recent and
complete, and be sure to read the Perl \s-1README\s0 file for more gcc-specific
details. Please report any hoops you had to jump through to the development
team.
.Sh "\s-1OS\s0 level"
.IX Subsection "OS level"
Before installing the patches to the \s-1IBM\s0 C\-compiler you need to know the
level of patching for the Operating System. \s-1IBM\s0's command 'oslevel' will
show the base, but is not always complete (in this example oslevel shows
4.3.NULL, whereas the system might run most of 4.3.THREE):
.PP
.Vb 6
\&    # oslevel
\&    4.3.0.0
\&    # lslpp -l | grep 'bos.rte '
\&    bos.rte           4.3.3.75  COMMITTED  Base Operating System Runtime
\&    bos.rte            4.3.2.0  COMMITTED  Base Operating System Runtime
\&    #
.Ve
.PP
The same might happen to \s-1AIX\s0 5.1 or other \s-1OS\s0 levels. As a side note, perl
cannot be built without bos.adt.syscalls and bos.adt.libm installed
.PP
.Vb 4
\&    # lslpp -l | egrep "syscalls|libm"
\&    bos.adt.libm      5.1.0.25  COMMITTED  Base Application Development
\&    bos.adt.syscalls  5.1.0.25  COMMITTED  System Calls Application
\&    #
.Ve
.Sh "Building Dynamic Extensions on \s-1AIX\s0"
.IX Subsection "Building Dynamic Extensions on AIX"
\&\s-1AIX\s0 supports dynamically loadable objects as well as shared libraries.
Shared libraries by convention end with the suffix .a, which is a bit
misleading, as an archive can contain static as well as dynamic members.
For perl dynamically loaded objects we use the .so suffix also used on
many other platforms.
.PP
Note that starting from Perl 5.7.2 (and consequently 5.8.0) and \s-1AIX\s0 4.3
or newer Perl uses the \s-1AIX\s0 native dynamic loading interface in the so
called runtime linking mode instead of the emulated interface that was
used in Perl releases 5.6.1 and earlier or, for \s-1AIX\s0 releases 4.2 and
earlier.  This change does break backward compatibility with compiled
modules from earlier perl releases.  The change was made to make Perl
more compliant with other applications like Apache/mod_perl which are
using the \s-1AIX\s0 native interface. This change also enables the use of \*(C+
code with static constructors and destructors in perl extensions, which
was not possible using the emulated interface.
.Sh "The \s-1IBM\s0 \s-1ANSI\s0 C Compiler"
.IX Subsection "The IBM ANSI C Compiler"
All defaults for Configure can be used.
.PP
If you've chosen to use vac 4, be sure to run 4.4.0.3. Older versions
will turn up nasty later on. For vac 5 be sure to run at least 5.0.1.0,
but vac 5.0.2.3 or up is highly recommended. Note that since \s-1IBM\s0 has
removed vac 5.0.2.1 and 5.0.2.2 from the software depot, these versions
should be considered obsolete.
.PP
Here's a brief lead of how to upgrade the compiler to the latest
level.  Of course this is subject to changes.  You can only upgrade
versions from ftp-available updates if the first three digit groups
are the same (in where you can skip intermediate unlike the patches
in the developer snapshots of perl), or to one version up where the
`base' is available.  In other words, the \s-1AIX\s0 compiler patches are
cumulative.
.PP
.Vb 2
\& vac.C.4.4.0.1 => vac.C.4.4.0.3  is OK     (vac.C.4.4.0.2 not needed)
\& xlC.C.3.1.3.3 => xlC.C.3.1.4.10 is NOT OK (xlC.C.3.1.4.0 is not available)
.Ve
.PP
.Vb 23
\& # ftp ftp.software.ibm.com
\& Connected to service.boulder.ibm.com.
\& : welcome message ...
\& Name (ftp.software.ibm.com:merijn): anonymous
\& 331 Guest login ok, send your complete e-mail address as password.
\& Password:
\& ... accepted login stuff
\& ftp> cd /aix/fixes/v4/
\& ftp> dir other other.ll
\& output to local-file: other.ll? y
\& 200 PORT command successful.
\& 150 Opening ASCII mode data connection for /bin/ls.
\& 226 Transfer complete.
\& ftp> dir xlc xlc.ll
\& output to local-file: xlc.ll? y
\& 200 PORT command successful.
\& 150 Opening ASCII mode data connection for /bin/ls.
\& 226 Transfer complete.
\& ftp> bye
\& ... goodbye messages
\& # ls -l *.ll
\& -rw-rw-rw-   1 merijn   system    1169432 Nov  2 17:29 other.ll
\& -rw-rw-rw-   1 merijn   system      29170 Nov  2 17:29 xlc.ll
.Ve
.PP
On \s-1AIX\s0 4.2 using xlC, we continue:
.PP
.Vb 16
\& # lslpp -l | fgrep 'xlC.C '
\&   xlC.C                     3.1.4.9  COMMITTED  C for AIX Compiler
\&   xlC.C                     3.1.4.0  COMMITTED  C for AIX Compiler
\& # grep 'xlC.C.3.1.4.*.bff' xlc.ll
\& -rw-r--r--   1 45776101 1        6286336 Jul 22 1996  xlC.C.3.1.4.1.bff
\& -rw-rw-r--   1 45776101 1        6173696 Aug 24 1998  xlC.C.3.1.4.10.bff
\& -rw-r--r--   1 45776101 1        6319104 Aug 14 1996  xlC.C.3.1.4.2.bff
\& -rw-r--r--   1 45776101 1        6316032 Oct 21 1996  xlC.C.3.1.4.3.bff
\& -rw-r--r--   1 45776101 1        6315008 Dec 20 1996  xlC.C.3.1.4.4.bff
\& -rw-rw-r--   1 45776101 1        6178816 Mar 28 1997  xlC.C.3.1.4.5.bff
\& -rw-rw-r--   1 45776101 1        6188032 May 22 1997  xlC.C.3.1.4.6.bff
\& -rw-rw-r--   1 45776101 1        6191104 Sep  5 1997  xlC.C.3.1.4.7.bff
\& -rw-rw-r--   1 45776101 1        6185984 Jan 13 1998  xlC.C.3.1.4.8.bff
\& -rw-rw-r--   1 45776101 1        6169600 May 27 1998  xlC.C.3.1.4.9.bff
\& # wget ftp://ftp.software.ibm.com/aix/fixes/v4/xlc/xlC.C.3.1.4.10.bff
\& #
.Ve
.PP
On \s-1AIX\s0 4.3 using vac, we continue:
.PP
.Vb 9
\& # lslpp -l | grep 'vac.C '
\&  vac.C                      5.0.2.2  COMMITTED  C for AIX Compiler
\&  vac.C                      5.0.2.0  COMMITTED  C for AIX Compiler
\& # grep 'vac.C.5.0.2.*.bff' other.ll
\& -rw-rw-r--   1 45776101 1        13592576 Apr 16 2001  vac.C.5.0.2.0.bff
\& -rw-rw-r--   1 45776101 1        14133248 Apr  9 2002  vac.C.5.0.2.3.bff
\& -rw-rw-r--   1 45776101 1        14173184 May 20 2002  vac.C.5.0.2.4.bff
\& # wget ftp://ftp.software.ibm.com/aix/fixes/v4/other/vac.C.5.0.2.4.bff
\& #
.Ve
.PP
Likewise on all other \s-1OS\s0 levels. Then execute the following command, and
fill in its choices
.PP
.Vb 5
\& # smit install_update
\&  -> Install and Update from LATEST Available Software
\&  * INPUT device / directory for software [ vac.C.5.0.2.4.bff    ]
\&  [ OK ]
\&  [ OK ]
.Ve
.PP
Follow the messages ... and you're done.
.Sh "Using \s-1GNU\s0's gcc for building perl"
.IX Subsection "Using GNU's gcc for building perl"
Using gcc\-3.0 (tested with 3.0.4) now works out of the box, as do
recent gcc\-2.9 builds available directly from \s-1IBM\s0 as part of their Linux
compatibility packages, available here:
.PP
.Vb 1
\&  http://www.ibm.com/servers/aix/products/aixos/linux/
.Ve
.Sh "Using Large Files with Perl"
.IX Subsection "Using Large Files with Perl"
Should yield no problems.
.Sh "Threaded Perl"
.IX Subsection "Threaded Perl"
Threads seem to work \s-1OK\s0, though at the moment not all tests pass when
threads are used in combination with 64bit configurations.
.Sh "64\-bit Perl"
.IX Subsection "64-bit Perl"
If your \s-1AIX\s0 is installed with 64\-bit support, you can expect 64bit
configurations to work. In combination with threads some tests might
still fail.
.Sh "\s-1AIX\s0 4.2 and extensions using \*(C+ with statics"
.IX Subsection "AIX 4.2 and extensions using  with statics"
In \s-1AIX\s0 4.2 Perl extensions that use \*(C+ functions that use statics
may have problems in that the statics are not getting initialized.
In newer \s-1AIX\s0 releases this has been solved by linking Perl with
the libC_r library, but unfortunately in \s-1AIX\s0 4.2 the said library
has an obscure bug where the various functions related to time
(such as \fItime()\fR and \fIgettimeofday()\fR) return broken values, and
therefore in \s-1AIX\s0 4.2 Perl is not linked against the libC_r.
.SH "AUTHOR"
.IX Header "AUTHOR"
H.Merijn Brand <h.m.brand@hccnet.nl>
.SH "DATE"
.IX Header "DATE"
Version 0.0.5: 22 May 2002
