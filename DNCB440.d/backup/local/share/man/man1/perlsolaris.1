.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLSOLARIS 1"
.TH PERLSOLARIS 1 "2002-06-08" "perl v5.8.0" "Perl Programmers Reference Guide"
.SH "NAME"
README.solaris \- Perl version 5 on Solaris systems
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes various features of Sun's Solaris operating system
that will affect how Perl version 5 (hereafter just perl) is
compiled and/or runs.  Some issues relating to the older SunOS 4.x are
also discussed, though they may be out of date.
.PP
For the most part, everything should just work.
.PP
Starting with Solaris 8, perl5.00503 (or higher) is supplied with the
operating system, so you might not even need to build a newer version
of perl at all.  The Sun-supplied version is installed in /usr/perl5
with /usr/bin/perl pointing to /usr/perl5/bin/perl.  Do not disturb
that installation unless you really know what you are doing.  If you
remove the perl supplied with the \s-1OS\s0, there is a good chance you will
render some bits of your system inoperable.  If you wish to install a
newer version of perl, install it under a different prefix from
/usr/perl5.  Common prefixes to use are /usr/local and /opt/perl.
.PP
You may wish to put your version of perl in the \s-1PATH\s0 of all users by
changing the link /usr/bin/perl. This is \s-1OK\s0, as all Perl scripts
shipped with Solaris use /usr/perl5/bin/perl.
.Sh "Solaris Version Numbers."
.IX Subsection "Solaris Version Numbers."
For consistency with common usage, perl's Configure script performs
some minor manipulations on the operating system name and version
number as reported by uname.  Here's a partial translation table:
.PP
.Vb 5
\&             Sun:                      perl's Configure:
\&    uname    uname -r   Name           osname     osvers
\&    SunOS    4.1.3     Solaris 1.1     sunos      4.1.3
\&    SunOS    5.6       Solaris 2.6     solaris    2.6
\&    SunOS    5.8       Solaris 8       solaris    2.8
.Ve
.PP
The complete table can be found in the Sun Managers' \s-1FAQ\s0
<ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq> under
\&\*(L"9.1) Which Sun models run which versions of SunOS?\*(R".
.SH "RESOURCES"
.IX Header "RESOURCES"
There are many, many sources for Solaris information.  A few of the
important ones for perl:
.IP "Solaris \s-1FAQ\s0" 4
.IX Item "Solaris FAQ"
The Solaris \s-1FAQ\s0 is available at
<http://www.science.uva.nl/pub/solaris/solaris2.html>.
.Sp
The Sun Managers' \s-1FAQ\s0 is available at
<ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq>
.IP "Precompiled Binaries" 4
.IX Item "Precompiled Binaries"
Precompiled binaries, links to many sites, and much, much more is
available at <http://www.sunfreeware.com/>.
.IP "Solaris Documentation" 4
.IX Item "Solaris Documentation"
All Solaris documentation is available on-line at <http://docs.sun.com/>.
.SH "SETTING UP"
.IX Header "SETTING UP"
.Sh "File Extraction Problems on Solaris."
.IX Subsection "File Extraction Problems on Solaris."
Be sure to use a tar program compiled under Solaris (not SunOS 4.x)
to extract the perl\-5.x.x.tar.gz file.  Do not use \s-1GNU\s0 tar compiled
for SunOS4 on Solaris.  (\s-1GNU\s0 tar compiled for Solaris should be fine.)
When you run SunOS4 binaries on Solaris, the run-time system magically
alters pathnames matching m#lib/locale# so that when tar tries to create
lib/locale.pm, a file named lib/oldlocale.pm gets created instead.
If you found this advice too late and used a SunOS4\-compiled tar
anyway, you must find the incorrectly renamed file and move it back
to lib/locale.pm.
.Sh "Compiler and Related Tools on Solaris."
.IX Subsection "Compiler and Related Tools on Solaris."
You must use an \s-1ANSI\s0 C compiler to build perl.  Perl can be compiled
with either Sun's add-on C compiler or with gcc.  The C compiler that
shipped with SunOS4 will not do.
.PP
\fIInclude /usr/ccs/bin/ in your \s-1PATH\s0.\fR
.IX Subsection "Include /usr/ccs/bin/ in your PATH."
.PP
Several tools needed to build perl are located in /usr/ccs/bin/:  ar,
as, ld, and make.  Make sure that /usr/ccs/bin/ is in your \s-1PATH\s0.
.PP
You need to make sure the following packages are installed
(this info is extracted from the Solaris \s-1FAQ\s0):
.PP
for tools (sccs, lex, yacc, make, nm, truss, ld, as): SUNWbtool,
SUNWsprot, SUNWtoo
.PP
for libraries & headers: SUNWhea, SUNWarc, SUNWlibm, SUNWlibms, SUNWdfbh,
SUNWcg6h, SUNWxwinc, SUNWolinc
.PP
for 64 bit development: SUNWarcx, SUNWbtoox, SUNWdplx, SUNWscpux,
SUNWsprox, SUNWtoox, SUNWlmsx, SUNWlmx, SUNWlibCx
.PP
If you are in doubt which package contains a file you are missing,
try to find an installation that has that file. Then do a
.PP
.Vb 1
\&        grep /my/missing/file /var/sadm/install/contents
.Ve
.PP
This will display a line like this:
.PP
/usr/include/sys/errno.h f none 0644 root bin 7471 37605 956241356 SUNWhea
.PP
The last item listed (SUNWhea in this example) is the package you need.
.PP
\fIAvoid /usr/ucb/cc.\fR
.IX Subsection "Avoid /usr/ucb/cc."
.PP
You don't need to have /usr/ucb/ in your \s-1PATH\s0 to build perl.  If you
want /usr/ucb/ in your \s-1PATH\s0 anyway, make sure that /usr/ucb/ is \s-1NOT\s0
in your \s-1PATH\s0 before the directory containing the right C compiler.
.PP
\fISun's C Compiler\fR
.IX Subsection "Sun's C Compiler"
.PP
If you use Sun's C compiler, make sure the correct directory
(usually /opt/SUNWspro/bin/) is in your \s-1PATH\s0 (before /usr/ucb/).
.PP
\fI\s-1GCC\s0\fR
.IX Subsection "GCC"
.PP
If you use gcc, make sure your installation is recent and
complete.  As a point of reference, perl\-5.6.0 built fine with
gcc\-2.8.1 on both Solaris 2.6 and Solaris 8.  You should
Configure perl with
.PP
.Vb 1
\&        sh Configure -Dcc=gcc
.Ve
.PP
If you have updated your Solaris version, you may also have to update
your \s-1GCC\s0.  For example, if you are running Solaris 2.6 and your gcc is
installed under /usr/local, check in /usr/local/lib/gcc\-lib and make
sure you have the appropriate directory, sparc\-sun\-solaris2.6/ or
i386\-pc\-solaris2.6/.  If gcc's directory is for a different version of
Solaris than you are running, then you will need to rebuild gcc for
your new version of Solaris.
.PP
You can get a precompiled version of gcc from
<http://www.sunfreeware.com/>. Make sure you pick up the package for
your Solaris release.
.PP
\fI\s-1GNU\s0 as and \s-1GNU\s0 ld\fR
.IX Subsection "GNU as and GNU ld"
.PP
The following information applies to gcc version 2.  Volunteers to
update it as appropropriate for gcc version 3 would be appreciated.
.PP
The versions of as and ld supplied with Solaris work fine for building
perl.  There is normally no need to install the \s-1GNU\s0 versions to
compile perl.
.PP
If you decide to ignore this advice and use the \s-1GNU\s0 versions anyway,
then be sure that they are relatively recent.  Versions newer than 2.7
are apparently new enough.  Older versions may have trouble with
dynamic loading.
.PP
If you wish to use \s-1GNU\s0 ld, then you need to pass it the \-Wl,\-E flag.
The hints/solaris_2.sh file tries to do this automatically by executing
the following commands:
.PP
.Vb 2
\&        ccdlflags="$ccdlflags -Wl,-E"
\&        lddlflags="$lddlflags -Wl,-E -G"
.Ve
.PP
However, over the years, changes in gcc, \s-1GNU\s0 ld, and Solaris ld have made
it difficult to automatically detect which ld ultimately gets called.
You may have to manually edit config.sh and add the \-Wl,\-E flags
yourself, or else run Configure interactively and add the flags at the
appropriate prompts.
.PP
If your gcc is configured to use \s-1GNU\s0 as and ld but you want to use the
Solaris ones instead to build perl, then you'll need to add
\&\-B/usr/ccs/bin/ to the gcc command line.  One convenient way to do
that is with
.PP
.Vb 1
\&        sh Configure -Dcc='gcc -B/usr/ccs/bin/'
.Ve
.PP
Note that the trailing slash is required.  This will result in some
harmless warnings as Configure is run:
.PP
.Vb 1
\&        gcc: file path prefix `/usr/ccs/bin/' never used
.Ve
.PP
These messages may safely be ignored.
(Note that for a SunOS4 system, you must use \-B/bin/ instead.)
.PP
Alternatively, you can use the \s-1GCC_EXEC_PREFIX\s0 environment variable to
ensure that Sun's as and ld are used.  Consult your gcc documentation
for further information on the \-B option and the \s-1GCC_EXEC_PREFIX\s0 variable.
.PP
\fI\s-1GNU\s0 make\fR
.IX Subsection "GNU make"
.PP
Sun's make works fine for building perl.
If you wish to use \s-1GNU\s0 make anyway, be sure that the set-group-id bit is not
set.  If it is, then arrange your \s-1PATH\s0 so that /usr/ccs/bin/make is
before \s-1GNU\s0 make or else have the system administrator disable the
set-group-id bit on \s-1GNU\s0 make.
.PP
\fIAvoid libucb.\fR
.IX Subsection "Avoid libucb."
.PP
Solaris provides some BSD-compatibility functions in /usr/ucblib/libucb.a.
Perl will not build and run correctly if linked against \-lucb since it
contains routines that are incompatible with the standard Solaris libc.
Normally this is not a problem since the solaris hints file prevents
Configure from even looking in /usr/ucblib for libraries, and also
explicitly omits \-lucb.
.Sh "Environment for Compiling Perl on Solaris"
.IX Subsection "Environment for Compiling Perl on Solaris"
\fI\s-1PATH\s0\fR
.IX Subsection "PATH"
.PP
Make sure your \s-1PATH\s0 includes the compiler (/opt/SUNWspro/bin/ if you're
using Sun's compiler) as well as /usr/ccs/bin/ to pick up the other
development tools (such as make, ar, as, and ld).  Make sure your path
either doesn't include /usr/ucb or that it includes it after the
compiler and compiler tools and other standard Solaris directories.
You definitely don't want /usr/ucb/cc.
.PP
\fI\s-1LD_LIBRARY_PATH\s0\fR
.IX Subsection "LD_LIBRARY_PATH"
.PP
If you have the \s-1LD_LIBRARY_PATH\s0 environment variable set, be sure that
it does \s-1NOT\s0 include /lib or /usr/lib.  If you will be building
extensions that call third-party shared libraries (e.g. Berkeley \s-1DB\s0)
then make sure that your \s-1LD_LIBRARY_PATH\s0 environment variable includes
the directory with that library (e.g. /usr/local/lib).
.PP
If you get an error message
.PP
.Vb 1
\&        dlopen: stub interception failed
.Ve
.PP
it is probably because your \s-1LD_LIBRARY_PATH\s0 environment variable
includes a directory which is a symlink to /usr/lib (such as /lib).
The reason this causes a problem is quite subtle.  The file
libdl.so.1.0 actually *only* contains functions which generate 'stub
interception failed' errors!  The runtime linker intercepts links to
\&\*(L"/usr/lib/libdl.so.1.0\*(R" and links in internal implementations of those
functions instead.  [Thanks to Tim Bunce for this explanation.]
.SH "RUN CONFIGURE."
.IX Header "RUN CONFIGURE."
See the \s-1INSTALL\s0 file for general information regarding Configure.
Only Solaris-specific issues are discussed here.  Usually, the
defaults should be fine.
.Sh "64\-bit Issues with Perl on Solaris."
.IX Subsection "64-bit Issues with Perl on Solaris."
See the \s-1INSTALL\s0 file for general information regarding 64\-bit compiles.
In general, the defaults should be fine for most people.
.PP
By default, perl\-5.6.0 (or later) is compiled as a 32\-bit application
with largefile and long-long support.
.PP
\fIGeneral 32\-bit vs. 64\-bit issues.\fR
.IX Subsection "General 32-bit vs. 64-bit issues."
.PP
Solaris 7 and above will run in either 32 bit or 64 bit mode on \s-1SPARC\s0
CPUs, via a reboot. You can build 64 bit apps whilst running 32 bit
mode and vice\-versa. 32 bit apps will run under Solaris running in
either 32 or 64 bit mode.  64 bit apps require Solaris to be running
64 bit mode.
.PP
Existing 32 bit apps are properly known as \s-1LP32\s0, i.e. Longs and
Pointers are 32 bit.  64\-bit apps are more properly known as \s-1LP64\s0.
The discriminating feature of a \s-1LP64\s0 bit app is its ability to utilise a
64\-bit address space.  It is perfectly possible to have a \s-1LP32\s0 bit app
that supports both 64\-bit integers (long long) and largefiles (> 2GB),
and this is the default for perl\-5.6.0.
.PP
For a more complete explanation of 64\-bit issues, see the Solaris 64\-bit
Developer's Guide at <http://docs.sun.com:80/ab2/coll.45.13/SOL64TRANS/>
.PP
You can detect the \s-1OS\s0 mode using \*(L"isainfo \-v\*(R", e.g.
.PP
.Vb 3
\&      fubar$ isainfo -v   # Ultra 30 in 64 bit mode
\&      64-bit sparcv9 applications
\&      32-bit sparc applications
.Ve
.PP
By default, perl will be compiled as a 32\-bit application.  Unless you
want to allocate more than ~ 4GB of memory inside Perl, you probably
don't need Perl to be a 64\-bit app.
.PP
\fILarge File Support\fR
.IX Subsection "Large File Support"
.PP
For Solaris 2.6 and onwards, there are two different ways for 32\-bit
applications to manipulate large files (files whose size is > 2GByte).
(A 64\-bit application automatically has largefile support built in
by default.)
.PP
First is the \*(L"transitional compilation environment\*(R", described in
\&\fIlfcompile64\fR\|(5).  According to the man page,
.PP
.Vb 7
\&    The transitional compilation  environment  exports  all  the
\&    explicit 64-bit functions (xxx64()) and types in addition to
\&    all the regular functions (xxx()) and types. Both xxx()  and
\&    xxx64()  functions  are  available to the program source.  A
\&    32-bit application must use the xxx64() functions in  order
\&    to  access  large  files.  See the lf64(5) manual page for a
\&    complete listing of the 64-bit transitional interfaces.
.Ve
.PP
The transitional compilation environment is obtained with the
following compiler and linker flags:
.PP
.Vb 3
\&    getconf LFS64_CFLAGS        -D_LARGEFILE64_SOURCE
\&    getconf LFS64_LDFLAG        # nothing special needed
\&    getconf LFS64_LIBS          # nothing special needed
.Ve
.PP
Second is the \*(L"large file compilation environment\*(R", described in
\&\fIlfcompile\fR\|(5).  According to the man page,
.PP
.Vb 5
\&    Each interface named xxx() that needs to access 64-bit entities
\&    to  access  large  files maps to a xxx64() call in the
\&    resulting binary. All relevant data types are defined to  be
\&    of correct size (for example, off_t has a typedef definition
\&    for a 64-bit entity).
.Ve
.PP
.Vb 4
\&    An application compiled in this environment is able  to  use
\&    the  xxx()  source interfaces to access both large and small
\&    files, rather than having to explicitly utilize the  transitional
\&    xxx64()  interface  calls to access large files.
.Ve
.PP
Two exceptions are \fIfseek()\fR and \fIftell()\fR.  32\-bit applications should
use fseeko(3C) and ftello(3C).  These will get automatically mapped
to \fIfseeko64()\fR and \fIftello64()\fR.
.PP
The large file compilation environment is obtained with
.PP
.Vb 3
\&        getconf LFS_CFLAGS      -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
\&        getconf LFS_LDFLAGS     # nothing special needed
\&        getconf LFS_LIBS        # nothing special needed
.Ve
.PP
By default, perl uses the large file compilation environment and
relies on Solaris to do the underlying mapping of interfaces.
.PP
\fIBuilding an \s-1LP64\s0 Perl\fR
.IX Subsection "Building an LP64 Perl"
.PP
To compile a 64\-bit application on an UltraSparc with a recent Sun Compiler,
you need to use the flag \*(L"\-xarch=v9\*(R".  \fIgetconf\fR\|(1) will tell you this, e.g.
.PP
.Vb 13
\&      fubar$ getconf -a | grep v9
\&      XBS5_LP64_OFF64_CFLAGS:         -xarch=v9
\&      XBS5_LP64_OFF64_LDFLAGS:        -xarch=v9
\&      XBS5_LP64_OFF64_LINTFLAGS:      -xarch=v9
\&      XBS5_LPBIG_OFFBIG_CFLAGS:       -xarch=v9
\&      XBS5_LPBIG_OFFBIG_LDFLAGS:      -xarch=v9
\&      XBS5_LPBIG_OFFBIG_LINTFLAGS:    -xarch=v9
\&      _XBS5_LP64_OFF64_CFLAGS:        -xarch=v9
\&      _XBS5_LP64_OFF64_LDFLAGS:       -xarch=v9
\&      _XBS5_LP64_OFF64_LINTFLAGS:     -xarch=v9
\&      _XBS5_LPBIG_OFFBIG_CFLAGS:      -xarch=v9
\&      _XBS5_LPBIG_OFFBIG_LDFLAGS:     -xarch=v9
\&      _XBS5_LPBIG_OFFBIG_LINTFLAGS:   -xarch=v9
.Ve
.PP
This flag is supported in Sun WorkShop Compilers 5.0 and onwards
(now marketed under the name Forte) when used on Solaris 7 or later on
UltraSparc systems.
.PP
If you are using gcc, you would need to use \-mcpu=v9 \-m64 instead.  This
option is not yet supported as of gcc 2.95.2; from install/SPECIFIC
in that release:
.PP
\&\s-1GCC\s0 version 2.95 is not able to compile code correctly for sparc64
targets. Users of the Linux kernel, at least, can use the sparc32
program to start up a new shell invocation with an environment that
causes configure to recognize (via uname \-a) the system as sparc\-*\-*
instead.
.PP
All this should be handled automatically by the hints file, if
requested.
.PP
\fILong Doubles.\fR
.IX Subsection "Long Doubles."
.PP
As of 5.6.0, long doubles are not working.
.Sh "Threads in Perl on Solaris."
.IX Subsection "Threads in Perl on Solaris."
It is possible to build a threaded version of perl on Solaris.  The entire
perl thread implementation is still experimental, however, so beware.
Perl uses the sched_yield(3RT) function.  In versions of Solaris up
to 2.6, that function is in \-lposix4.  Starting with Solaris 7, it is
in \-lrt.  The hints file should handle adding this automatically.
.Sh "Malloc Issues with Perl on Solaris."
.IX Subsection "Malloc Issues with Perl on Solaris."
Starting from Perl 5.7.1 Perl uses the Solaris malloc, since the perl
malloc breaks when dealing with more than 2GB of memory, and the Solaris
malloc also seems to be faster.
.PP
If you for some reason (such as binary backward compatibility) really
need to use perl's malloc, you can rebuild Perl from the sources
and Configure the build with 
.PP
.Vb 1
\&        sh Configure -Dusemymalloc
.Ve
.PP
You should not use perl's malloc if you are building with gcc.  There
are reports of core dumps, especially in the \s-1PDL\s0 module.  The problem
appears to go away under \-DDEBUGGING, so it has been difficult to
track down.  Sun's compiler appears to be okay with or without perl's
malloc. [\s-1XXX\s0 further investigation is needed here.]
.SH "MAKE PROBLEMS."
.IX Header "MAKE PROBLEMS."
.IP "Dynamic Loading Problems With \s-1GNU\s0 as and \s-1GNU\s0 ld" 4
.IX Item "Dynamic Loading Problems With GNU as and GNU ld"
If you have problems with dynamic loading using gcc on SunOS or
Solaris, and you are using \s-1GNU\s0 as and \s-1GNU\s0 ld, see the section
\&\*(L"\s-1GNU\s0 as and \s-1GNU\s0 ld\*(R" above.
.IP "ld.so.1: ./perl: fatal: relocation error:" 4
.IX Item "ld.so.1: ./perl: fatal: relocation error:"
If you get this message on SunOS or Solaris, and you're using gcc,
it's probably the \s-1GNU\s0 as or \s-1GNU\s0 ld problem in the previous item
\&\*(L"\s-1GNU\s0 as and \s-1GNU\s0 ld\*(R".
.IP "dlopen: stub interception failed" 4
.IX Item "dlopen: stub interception failed"
The primary cause of the 'dlopen: stub interception failed' message is
that the \s-1LD_LIBRARY_PATH\s0 environment variable includes a directory
which is a symlink to /usr/lib (such as /lib).  See
\&\*(L"\s-1LD_LIBRARY_PATH\s0\*(R" above.
.ie n .IP "#error ""No \s-1DATAMODEL_NATIVE\s0 specified""" 4
.el .IP "#error ``No \s-1DATAMODEL_NATIVE\s0 specified''" 4
.IX Item "#error No DATAMODEL_NATIVE specified"
This is a common error when trying to build perl on Solaris 2.6 with a
gcc installation from Solaris 2.5 or 2.5.1.  The Solaris header files
changed, so you need to update your gcc installation.  You can either
rerun the fixincludes script from gcc or take the opportunity to
update your gcc installation.
.IP "sh: ar: not found" 4
.IX Item "sh: ar: not found"
This is a message from your shell telling you that the command 'ar'
was not found.  You need to check your \s-1PATH\s0 environment variable to
make sure that it includes the directory with the 'ar' command.  This
is a common problem on Solaris, where 'ar' is in the /usr/ccs/bin/
directory.
.SH "MAKE TEST"
.IX Header "MAKE TEST"
.Sh "op/stat.t test 4 in Solaris"
.IX Subsection "op/stat.t test 4 in Solaris"
op/stat.t test 4 may fail if you are on a tmpfs of some sort.
Building in /tmp sometimes shows this behavior.  The
test suite detects if you are building in /tmp, but it may not be able
to catch all tmpfs situations.
.Sh "nss_delete core dump from op/pwent or op/grent"
.IX Subsection "nss_delete core dump from op/pwent or op/grent"
See \*(L"nss_delete core dump from op/pwent or op/grent\*(R" in perlhpux.
.SH "PREBUILT BINARIES OF PERL FOR SOLARIS."
.IX Header "PREBUILT BINARIES OF PERL FOR SOLARIS."
You can pick up prebuilt binaries for Solaris from
<http://www.sunfreeware.com/>, ActiveState <http://www.activestate.com/>,
and <http://www.perl.com/> under the Binaries list at the top of the page.
There are probably other sources as well.  Please note that these sites
are under the control of their respective owners, not the perl developers.
.SH "RUNTIME ISSUES FOR PERL ON SOLARIS."
.IX Header "RUNTIME ISSUES FOR PERL ON SOLARIS."
.Sh "Limits on Numbers of Open Files on Solaris."
.IX Subsection "Limits on Numbers of Open Files on Solaris."
The stdio(3C) manpage notes that only 255 files may be opened using
\&\fIfopen()\fR, and only file descriptors 0 through 255 can be used in a
stream.  Since perl calls \fIopen()\fR and then fdopen(3C) with the
resulting file descriptor, perl is limited to 255 simultaneous open
files.
.SH "SOLARIS-SPECIFIC MODULES."
.IX Header "SOLARIS-SPECIFIC MODULES."
See the modules under the Solaris:: namespace on \s-1CPAN\s0,
<http://www.cpan.org/modules/by\-module/Solaris/>.
.SH "SOLARIS-SPECIFIC PROBLEMS WITH MODULES."
.IX Header "SOLARIS-SPECIFIC PROBLEMS WITH MODULES."
.Sh "Proc::ProcessTable on Solaris"
.IX Subsection "Proc::ProcessTable on Solaris"
Proc::ProcessTable does not compile on Solaris with perl5.6.0 and higher
if you have \s-1LARGEFILES\s0 defined.  Since largefile support is the
default in 5.6.0 and later, you have to take special steps to use this
module.
.PP
The problem is that various structures visible via procfs use off_t,
and if you compile with largefile support these change from 32 bits to
64 bits.  Thus what you get back from procfs doesn't match up with
the structures in perl, resulting in garbage.  See \fIproc\fR\|(4) for further
discussion.
.PP
A fix for Proc::ProcessTable is to edit Makefile to
explicitly remove the largefile flags from the ones MakeMaker picks up
from Config.pm.  This will result in Proc::ProcessTable being built
under the correct environment.  Everything should then be \s-1OK\s0 as long as
Proc::ProcessTable doesn't try to share off_t's with the rest of perl,
or if it does they should be explicitly specified as off64_t.
.Sh "BSD::Resource on Solaris"
.IX Subsection "BSD::Resource on Solaris"
BSD::Resource versions earlier than 1.09 do not compile on Solaris
with perl 5.6.0 and higher, for the same reasons as Proc::ProcessTable.
BSD::Resource versions starting from 1.09 have a workaround for the problem.
.Sh "Net::SSLeay on Solaris"
.IX Subsection "Net::SSLeay on Solaris"
Net::SSLeay requires a /dev/urandom to be present. This device is not
part of Solaris. You can either get the package SUNWski (packaged with
several Sun software products, for example the Sun WebServer, which is
part of the Solaris Server Intranet Extension, or the Sun Directory
Services, part of Solaris for ISPs) or download the ANDIrand package
from <http://www.cosy.sbg.ac.at/~andi/>. If you use SUNWski, make a
symbolic link /dev/urandom pointing to /dev/random.
.PP
It may be possible to use the Entropy Gathering Daemon (written in
Perl!), available from <http://www.lothar.com/tech/crypto/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
The original was written by Andy Dougherty \fIdoughera@lafayette.edu\fR
drawing heavily on advice from Alan Burlison, Nick Ing\-Simmons, Tim Bunce,
and many other Solaris users over the years.
.PP
Please report any errors, updates, or suggestions to \fIperlbug@perl.org\fR.
.SH "LAST MODIFIED"
.IX Header "LAST MODIFIED"
$Id: \s-1README\s0.solaris,v 1.4 2000/11/11 20:29:58 doughera Exp $
