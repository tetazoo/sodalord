.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Curses::UI::Color 3"
.TH Curses::UI::Color 3 "2003-10-15" "perl v5.8.3" "User Contributed Perl Documentation"
.SH "NAME"
Curses::UI::Color \- Color support module
.SH "WARNING"
.IX Header "WARNING"
This is a development version. As I do not expect to change
the interface during this time it may happen that the color
behaviour (e.g. to what extend color is drawn in a window)
may change or even the colors themselves. If you want something
stable, use \-color_support => 0 , but you won't get those fency
colors then :\-)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides all functions related to color support in
Curses::UI. The color support was implemented without disturbing
old applications, they will look as they used to do. Only if you
enable color support explicitly and it is available on your terminal
the color functions will have an effect.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
my \f(CW$cui\fR = new Curses::UI(\-color_support => 1,
                         \-clear_on_exit => 0);
.PP
my \f(CW$mainw\fR = \f(CW$cui\fR\->add('screen', 'Window');
.PP
$mainw\->add('l','Label', \-bg => \*(L"white\*(R", 
                         \-fg => \*(L"blue\*(R",
                         \-text => \*(L"Colored Label\*(R");
.SH "METHODS"
.IX Header "METHODS"
.IP "* \fBnew\fR (\-default\-colors => \s-1BOOLEAN\s0)" 4
.IX Item "new (-default-colors => BOOLEAN)"
Creates a new Curses::UI::Color object, the option
default colors define if the use_default_colors function
of Curses is used. See Curses for that.
.IP "* \fBget_colors\fR ( )" 4
.IX Item "get_colors ( )"
Returns all in this object defined colors as an array
.IP "* \fBcolors\fR ( )" 4
.IX Item "colors ( )"
Is true if color support is enabled.
.IP "* \fBdefine_color\fR ( \s-1NAME\s0, R, G, B )" 4
.IX Item "define_color ( NAME, R, G, B )"
This function defines a new color in the Color object. The
\&\s-1RGB\s0 values can be between 0 and 1000. Existing colors can
be redefined. 
.SH "USAGE"
.IX Header "USAGE"
Curses::UI has 7 predefined colors:
         black   
         red     
         green   
         yellow  
         blue             
         magenta 
         cyan    
         white   
.PP
Curses::UI with color support also defines some new options:
.PP
.Vb 4
\&     -fg  -bg for general foreground and background color.
\&    -tfg -tbg for widget title fg and bg color
\&    -bfg -bbg for widget border fg and bg color
\&    -sfg -sbg for scrollbar fg and bg color
.Ve
.PP
Every widget has has a runtime setter:
    set_color_fg ( \s-1COLOR\s0 ) 
    set_colof_bg ( \s-1COLOR\s0 )
    set_color_tfg ( \s-1COLOR\s0 ) 
    set_colof_tbg ( \s-1COLOR\s0 )
    set_color_bfg ( \s-1COLOR\s0 ) 
    set_colof_bbg ( \s-1COLOR\s0 )
    set_color_sfg ( \s-1COLOR\s0 ) 
    set_colof_sbg ( \s-1COLOR\s0 )
.PP
Mostly every widget has a \-fg and \-bg option to set the foreground
and background color using the above color names. Own colors can be
defined using the \fBdefine_color\fR method. Every widget that 
supports color by now has also two functions \fBset_color_fg\fR and
\&\fBset_color_bg\fR to set or change the color at runtime.
Widgets with borders and scrollbars can use \-bfg and \-bbg to set the
foreground and background color of the border or the \-sfg and \-sbg
option to set the colors of the scrollbar.
Widgets with titles can set the \-tfg and \-tbg option to define
the title foreground and background color.
.PP
Check also the examples/color_editor for seeing what is possible
at the moment. 
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Curses::UI 
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) 2003 Marcus Thiesen. All rights reserved.
.PP
Maintained by Marcus Thiesen (marcus@cpan.thiesenweb.de)
.PP
This package is free software and is provided \*(L"as is\*(R" without express
or implied warranty. It may be used, redistributed and/or modified
under the same terms as perl itself.
