.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Curses::UI::Searchable 3"
.TH Curses::UI::Searchable 3 "2003-10-15" "perl v5.8.3" "User Contributed Perl Documentation"
.SH "NAME"
Curses::UI::Searchable \- Add 'less'\-like search abilities to a widget
.SH "CLASS HIERARCHY"
.IX Header "CLASS HIERARCHY"
.Vb 1
\& Curses::UI::Searchable - base class
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyWidget;
.Ve
.PP
.Vb 3
\&    use Curses::UI::Searchable;
\&    use vars qw(@ISA);
\&    @ISA = qw(Curses::UI::Searchable);
.Ve
.PP
.Vb 1
\&    ....
.Ve
.PP
.Vb 3
\&    sub new () {
\&        # Create class instance $this.
\&        ....
.Ve
.PP
.Vb 5
\&        $this->set_routine('search-forward', \e&search_forward);
\&        $this->set_binding('search-forward', '/');
\&        $this->set_routine('search-backward', \e&search_backward);
\&        $this->set_binding('search-backward', '?');
\&    }
.Ve
.PP
.Vb 2
\&    sub layout_content() {
\&        my $this = shift;
.Ve
.PP
.Vb 2
\&        # Layout your widget's content.
\&        ....
.Ve
.PP
.Vb 2
\&        return $this;
\&    }
.Ve
.PP
.Vb 2
\&    sub number_of_lines() {
\&        my $this = shift;
.Ve
.PP
.Vb 4
\&        # Return the number of lines in
\&        # the widget's content.
\&        return ....
\&    }
.Ve
.PP
.Vb 3
\&    sub getline_at_ypos($;) {
\&        my $this = shift;
\&        my $ypos = shift;
.Ve
.PP
.Vb 4
\&        # Return the content on the line 
\&        # where ypos = $ypos
\&        return ....
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Using Curses::UI::Searchable, you can add 'less'\-like
search capabilities to your widget. 
.PP
To make your widget searchable using this class,
your widget should meet the following requirements:
.IP "* \fBmake it a descendant of Curses::UI::Searchable\fR" 4
.IX Item "make it a descendant of Curses::UI::Searchable"
All methods for searching are in Curses::UI::Searchable.
By making your class a descendant of this class, these
methods are automatically inherited.
.IP "* \fB\-ypos data member\fR" 4
.IX Item "-ypos data member"
The current vertical position in the widget should be
identified by \f(CW$this\fR\->{\-ypos}. This y\-position is the
index of the line of content. Here's an example for 
a Listbox widget.
.Sp
.Vb 8
\& -ypos
\&   |
\&   v
\&       +------+
\&   0   |One   |
\&   1   |Two   |
\&   2   |Three |
\&       +------+
.Ve
.IP "* \fBmethod: number_of_lines ( )\fR" 4
.IX Item "method: number_of_lines ( )"
Your widget class should have a method \fBnumber_of_lines\fR,
which returns the total number of lines in the widget's 
content. So in the example above, this method would
return the value 3.
.IP "* \fBmethod: getline_at_ypos ( \s-1YPOS\s0 )\fR" 4
.IX Item "method: getline_at_ypos ( YPOS )"
Your widget class should have a method \fBgetline_at_ypos\fR,
which returns the line of content at \-ypos \s-1YPOS\s0.
So in the example above, this method would return
the value \*(L"Two\*(R" for \s-1YPOS\s0 = 1.
.IP "* \fBmethod: layout_content ( )\fR" 4
.IX Item "method: layout_content ( )"
The search routines will set the \-ypos of your widget if a
match is found for the given search string. Your \fBlayout_content\fR
routine should make sure that the line of content at \-ypos
will be made visible if the \fBdraw\fR method is called.
.IP "* \fBmethod: draw ( )\fR" 4
.IX Item "method: draw ( )"
If the search routines find a match, \f(CW$this\fR\->{\-search_highlight}
will be set to the \-ypos for the line on which the match
was found. If no match was found \f(CW$this\fR\->{\-search_highlight}
will be undefined. If you want a matching line to be highlighted, 
in your widget, you can use this data member to do so
(an example of a widget that uses this option is the 
Curses::UI::TextViewer widget).
.IP "* \fBbindings for searchroutines\fR" 4
.IX Item "bindings for searchroutines"
There are two search routines. These are \fBsearch_forward\fR and
\&\fBsearch_backward\fR. These have to be called in order to 
display the search prompt. The best way to do this is by
creating bindings for them. Here's an example which will
make '/' a forward search and '?' a backward search:
.Sp
.Vb 4
\&    $this->set_routine('search-forward'  , \e&search_forward);
\&    $this->set_binding('search-forward'  , '/');
\&    $this->set_routine('search-backward' , \e&search_backward);
\&    $this->set_binding('search-backward' , '?');
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Curses::UI, 
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) 2001\-2002 Maurice Makaay. All rights reserved.
.PP
Maintained by Marcus Thiesen (marcus@cpan.thiesenweb.de)
.PP
This package is free software and is provided \*(L"as is\*(R" without express
or implied warranty. It may be used, redistributed and/or modified
under the same terms as perl itself.
