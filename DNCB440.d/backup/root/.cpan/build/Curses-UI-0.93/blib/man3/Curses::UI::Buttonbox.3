.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Curses::UI::Buttonbox 3"
.TH Curses::UI::Buttonbox 3 "2003-10-15" "perl v5.8.3" "User Contributed Perl Documentation"
.SH "NAME"
Curses::UI::Buttonbox \- Create and manipulate button widgets
.SH "CLASS HIERARCHY"
.IX Header "CLASS HIERARCHY"
.Vb 3
\& Curses::UI::Widget
\&    |
\&    +----Curses::UI::Buttonbox
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Curses::UI;
\&    my $cui = new Curses::UI;
\&    my $win = $cui->add('window_id', 'Window');
.Ve
.PP
.Vb 14
\&    my $buttons = $win->add(
\&        'mybuttons', 'Buttonbox',
\&        -buttons   => [
\&            { 
\&              -label => '< Button 1 >',
\&              -value => 1,
\&              -shortcut => 1 
\&            },{ 
\&              -label => '< Button 2 >',
\&              -value => 2,
\&              -shortcut => 2 
\&            }
\&        ]
\&    );
.Ve
.PP
.Vb 2
\&    $buttons->focus();
\&    my $value = $buttons->get();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Curses::UI::Buttonbox is a widget that can be used to create an
array of buttons (or, of course, only one button). 
.SH "STANDARD OPTIONS"
.IX Header "STANDARD OPTIONS"
\&\fB\-parent\fR, \fB\-x\fR, \fB\-y\fR, \fB\-width\fR, \fB\-height\fR, 
\&\fB\-pad\fR, \fB\-padleft\fR, \fB\-padright\fR, \fB\-padtop\fR, \fB\-padbottom\fR,
\&\fB\-ipad\fR, \fB\-ipadleft\fR, \fB\-ipadright\fR, \fB\-ipadtop\fR, \fB\-ipadbottom\fR,
\&\fB\-title\fR, \fB\-titlefullwidth\fR, \fB\-titlereverse\fR, \fB\-onfocus\fR, 
\&\fB\-onblur\fR
.PP
For an explanation of these standard options, see 
Curses::UI::Widget.
.SH "WIDGET-SPECIFIC OPTIONS"
.IX Header "WIDGET-SPECIFIC OPTIONS"
.IP "* \fB\-buttons\fR < \s-1ARRAYREF\s0 >" 4
.IX Item "-buttons < ARRAYREF >"
This option takes a reference to a list of buttons.
The list may contain both predefined button types and  
complete button definitions of your own.
.Sp
* \fBYour own button definition\fR
.Sp
.Vb 2
\&  A button definition is a reference to a hash. This
\&  hash can have the following key-value pairs:
.Ve
.Sp
.Vb 2
\&  obligatory:
\&  -----------
.Ve
.Sp
.Vb 2
\&  -label      This determines what text should be drawn
\&              on the button.
.Ve
.Sp
.Vb 2
\&  optional:
\&  ---------
.Ve
.Sp
.Vb 4
\&  -value      This determines the returnvalue for the
\&              get() method. If the value is not defined,
\&              the get() method will return the index
\&              of the button.
.Ve
.Sp
.Vb 2
\&  -shortcut   The button will act as if it was pressed
\&              if the key defined by -shortcut is pressed
.Ve
.Sp
.Vb 4
\&  -onpress    If the value for -onpress is a CODE reference,
\&              this code will be executes if the button
\&              is pressed, before the buttons widget loses
\&              focus and returns.
.Ve
.Sp
* \fBPredefined button type\fR
.Sp
.Vb 3
\&  This module has a predefined list of frequently used button
\&  types. Using these in B<-buttons> makes things a lot
\&  easier. The predefined button types are:
.Ve
.Sp
.Vb 4
\&  ok          -label    => '< OK >'
\&              -shortcut => 'o'
\&              -value    => 1
\&              -onpress  => undef
.Ve
.Sp
.Vb 4
\&  cancel      -label    => '< Cancel >'
\&              -shortcut => 'c'
\&              -value    => 0
\&              -onpress  => undef
.Ve
.Sp
.Vb 4
\&  yes         -label    => '< Yes >'
\&              -shortcut => 'y'
\&              -value    => 1
\&              -onpress  => undef
.Ve
.Sp
.Vb 4
\&  no          -label    => '< No >'
\&              -shortcut => 'n'
\&              -value    => 0
\&              -onpress  => undef
.Ve
.Sp
Example:
.Sp
.Vb 5
\&  ....
\&  -buttons => [
\&      { -label => '< My own button >',
\&        -value => 'mine!',
\&        -shortcut => 'm' },
.Ve
.Sp
.Vb 1
\&      'ok',
.Ve
.Sp
.Vb 1
\&      'cancel',
.Ve
.Sp
.Vb 6
\&      { -label => '< My second button >',
\&        -value => 'another one',
\&        -shortcut => 's',
\&        -onpress => sub { die "Do not press this button!\en" } }
\&  ]
\&  ....
.Ve
.IP "* \fB\-selected\fR < \s-1INDEX\s0 >" 4
.IX Item "-selected < INDEX >"
By default the first button (index = 0) is active. If you
want another button to be active at creation time, 
add this option. The \s-1INDEX\s0 is the index of the button you
want to make active.
.IP "* \fB\-buttonalignment\fR < \s-1VALUE\s0 >" 4
.IX Item "-buttonalignment < VALUE >"
You can specify how the buttons should be aligned in the 
widget. Available values for \s-1VALUE\s0 are 'left', 'middle' 
and 'right'.
.IP "* \fB\-vertical\fR < \s-1BOOLEAN\s0 >" 4
.IX Item "-vertical < BOOLEAN >"
When set to a true value, it will cause the buttons to be
rendered with vertical instead of horizontal alignment.
.SH "METHODS"
.IX Header "METHODS"
.IP "* \fBnew\fR ( \s-1OPTIONS\s0 )" 4
.IX Item "new ( OPTIONS )"
.PD 0
.IP "* \fBlayout\fR ( )" 4
.IX Item "layout ( )"
.IP "* \fBdraw\fR ( \s-1BOOLEAN\s0 )" 4
.IX Item "draw ( BOOLEAN )"
.IP "* \fBfocus\fR ( )" 4
.IX Item "focus ( )"
.IP "* \fBonFocus\fR ( \s-1CODEREF\s0 )" 4
.IX Item "onFocus ( CODEREF )"
.IP "* \fBonBlur\fR ( \s-1CODEREF\s0 )" 4
.IX Item "onBlur ( CODEREF )"
.IP "* \fBdraw_if_visible\fR ( )" 4
.IX Item "draw_if_visible ( )"
.PD
These are standard methods. See Curses::UI::Widget 
for an explanation of these.
.IP "* \fBget\fR ( )" 4
.IX Item "get ( )"
This method will return the index of the currently active
button. If a value is given for that index (using the
\&\fB\-value\fR option, see \fB\-buttons\fR above), that value will be 
returned.
.SH "DEFAULT BINDINGS"
.IX Header "DEFAULT BINDINGS"
.IP "* <\fBenter\fR>, <\fBspace\fR>" 4
.IX Item "<enter>, <space>"
\&\s-1TODO:\s0 Fix dox
Call the 'loose\-focus' routine. By default this routine will have the
container in which the widget is loose its focus. If you do
not like this behaviour, then you can have it loose focus itself
by calling:
.Sp
.Vb 1
\&    $buttonswidget->set_routine('loose-focus', 'RETURN');
.Ve
.Sp
For an explanation of \fBset_routine\fR, see 
Curses::UI::Widget.
.IP "* <\fBcursor left\fR>, <\fBh\fR>" 4
.IX Item "<cursor left>, <h>"
Call the 'previous' routine. This will make the previous
button the active button. If the active button already is
the first button, nothing will be done.
.IP "* <\fBcursor right\fR>, <\fBl\fR" 4
.IX Item "<cursor right>, <l"
Call the 'next' routine. This will make the next button the
active button. If the next button already is the last button,
nothing will be done.
.IP "* <\fBany other key\fR>" 4
.IX Item "<any other key>"
This will call the 'shortcut' routine. This routine will 
handle the shortcuts that are set by the \fB\-shortcuts\fR option.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Curses::UI, 
Curses::UI::Widget, 
Curses::UI::Common
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) 2001\-2002 Maurice Makaay. All rights reserved.
.PP
Maintained by Marcus Thiesen (marcus@cpan.thiesenweb.de)
.PP
This package is free software and is provided \*(L"as is\*(R" without express
or implied warranty. It may be used, redistributed and/or modified
under the same terms as perl itself.
