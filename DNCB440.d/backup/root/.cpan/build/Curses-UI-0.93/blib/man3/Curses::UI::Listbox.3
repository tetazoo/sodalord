.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Curses::UI::Listbox 3"
.TH Curses::UI::Listbox 3 "2003-10-15" "perl v5.8.3" "User Contributed Perl Documentation"
.SH "NAME"
Curses::UI::Listbox \- Create and manipulate listbox widgets
.SH "CLASS HIERARCHY"
.IX Header "CLASS HIERARCHY"
.Vb 4
\& Curses::UI::Widget
\& Curses::UI::Searchable
\&    |
\&    +----Curses::UI::Listbox
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Curses::UI;
\&    my $cui = new Curses::UI;
\&    my $win = $cui->add('window_id', 'Window');
.Ve
.PP
.Vb 8
\&    my $listbox = $win->add(
\&        'mylistbox', 'Listbox',
\&        -values    => [1, 2, 3],
\&        -labels    => { 1 => 'One', 
\&                        2 => 'Two', 
\&                        3 => 'Three' },
\&        -radio     => 1,
\&    );
.Ve
.PP
.Vb 2
\&    $listbox->focus();
\&    my $selected = $listbox->get();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Curses::UI::Listbox is a widget that can be used to create 
a couple of different kinds of listboxes. These are:
.IP "* \fBdefault listbox\fR" 4
.IX Item "default listbox"
A list of values through which can be browsed. One of these
values can be selected. The selected value will be 
highlighted. This kind of listbox looks somewhat like this:
.Sp
.Vb 5
\& +------+
\& |One   |
\& |Two   |
\& |Three |
\& +------+
.Ve
.IP "* \fBmulti-select listbox\fR" 4
.IX Item "multi-select listbox"
This is also a list of values, but now more than one 
value can be selected at once. This kind of listbox 
looks somewhat like this:
.Sp
.Vb 5
\& +----------+
\& |[X] One   |
\& |[ ] Two   |
\& |[X] Three |
\& +----------+
.Ve
.IP "* \fBradiobutton listbox\fR" 4
.IX Item "radiobutton listbox"
This looks a lot like the default listbox (only one
value can be selected), but now there is clear 
visual feedback on which value is selected. Before
each value \*(L"< >\*(R" is printed. If a value is selected,
\&\*(L"<o>\*(R" is printed instead. This kind of listbox 
looks somewhat like this:
.Sp
.Vb 5
\& +----------+
\& |< > One   |
\& |<o> Two   |
\& |< > Three |
\& +----------+
.Ve
.IP "* \fBListbox Markup\fR" 4
.IX Item "Listbox Markup"
The listbox supports a primitive markup language to emphasize
entries: 
    <reverse>reverse text</reverse>
    <bold>bold text</bold>
    <underline>underlined text</underline>
    <blink>blinking text</blink>
    <dim>dim text</dim>
By using this markup tokens in the values array, you can make the
listbox draw the text in the according way. To enable the parser,
you have to create the listbox with the \-htmltext option.
.SH "STANDARD OPTIONS"
.IX Header "STANDARD OPTIONS"
\&\fB\-parent\fR, \fB\-x\fR, \fB\-y\fR, \fB\-width\fR, \fB\-height\fR, 
\&\fB\-pad\fR, \fB\-padleft\fR, \fB\-padright\fR, \fB\-padtop\fR, \fB\-padbottom\fR,
\&\fB\-ipad\fR, \fB\-ipadleft\fR, \fB\-ipadright\fR, \fB\-ipadtop\fR, \fB\-ipadbottom\fR,
\&\fB\-title\fR, \fB\-titlefullwidth\fR, \fB\-titlereverse\fR, \fB\-onfocus\fR,
\&\fB\-onblur\fR
.PP
For an explanation of these standard options, see 
Curses::UI::Widget.
.SH "WIDGET-SPECIFIC OPTIONS"
.IX Header "WIDGET-SPECIFIC OPTIONS"
.IP "* \fB\-values\fR < \s-1LIST\s0 >" 4
.IX Item "-values < LIST >"
This option sets the values to use. 
Unless a label is set for the value (see \fB\-labels\fR), 
this value will be shown in the list.
.IP "* \fB\-labels\fR < \s-1HASHREF\s0 >" 4
.IX Item "-labels < HASHREF >"
The keys of this hash reference correspond to the values of 
the listbox (see \fB\-values\fR). The values of the hash are the 
labels to show in the listbox. It's not obligatory to have 
a label defined for each value. You may even omit \-labels 
completely.
.IP "* \fB\-selected\fR < \s-1INDEX\s0 >" 4
.IX Item "-selected < INDEX >"
In case the \fB\-multi\fR option is not set, \s-1INDEX\s0 is the index
of the value that should be selected.
.Sp
In case the \fB\-multi\fR option is set, \s-1INDEX\s0 is a hash reference
in which the keys are the indices of the \fB\-values\fR which are 
selected and the values are any true value.
.IP "* \fB\-multi\fR < \s-1BOOLEAN\s0 >" 4
.IX Item "-multi < BOOLEAN >"
If \s-1BOOLEAN\s0 has a true value, the listbox will be a multi-select
listbox (see \s-1DESCRIPTION\s0).
.IP "* \fB\-radio\fR < \s-1BOOLEAN\s0 >" 4
.IX Item "-radio < BOOLEAN >"
If \s-1BOOLEAN\s0 has a true value, the listbox will be a radiobutton
listbox (see \s-1DESCRIPTION\s0).
.IP "* \fB\-wraparound\fR < \s-1BOOLEAN\s0 >" 4
.IX Item "-wraparound < BOOLEAN >"
If \s-1BOOLEAN\s0 has a true value, wraparound is enabled. This means
that if the listbox is on its last value and a key is pressed
to go to the next value, the first value will be selected.
Also the last value will be selected if this first value is
selected and \*(L"goto previous value\*(R" is pressed.
.IP "* \fB\-onchange\fR < \s-1CODEREF\s0 >" 4
.IX Item "-onchange < CODEREF >"
This sets the onChange event handler for the listbox widget.
If a new item is selected, the code in \s-1CODEREF\s0 will be executed.
It will get the widget reference as its argument.
.IP "* \fB\-onselchange\fR < \s-1CODEREF\s0 >" 4
.IX Item "-onselchange < CODEREF >"
This sets the onSelectionChange event handler for the listbox widget.
If a new item is marked as active \s-1CODEREF\s0 will be executed.
It will get the widget reference as its argument.
.IP "* \fB\-htmltext\fR < \s-1BOOLEAN\s0 >" 4
.IX Item "-htmltext < BOOLEAN >"
Make the Listbox parse primitive markup to change the items
appearence. See above.
.SH "METHODS"
.IX Header "METHODS"
.IP "* \fBnew\fR ( \s-1OPTIONS\s0 )" 4
.IX Item "new ( OPTIONS )"
.PD 0
.IP "* \fBlayout\fR ( )" 4
.IX Item "layout ( )"
.IP "* \fBdraw\fR ( \s-1BOOLEAN\s0 )" 4
.IX Item "draw ( BOOLEAN )"
.IP "* \fBintellidraw\fR ( )" 4
.IX Item "intellidraw ( )"
.IP "* \fBfocus\fR ( )" 4
.IX Item "focus ( )"
.IP "* \fBonFocus\fR ( \s-1CODEREF\s0 )" 4
.IX Item "onFocus ( CODEREF )"
.IP "* \fBonBlur\fR ( \s-1CODEREF\s0 )" 4
.IX Item "onBlur ( CODEREF )"
.PD
These are standard methods. See Curses::UI::Widget 
for an explanation of these.
.IP "* \fBget\fR ( )" 4
.IX Item "get ( )"
This method will return the values of the currently selected items 
in the list. If the listbox is not a multi-select listbox only one
value will be returned of course.
.IP "* \fBid\fR ( )" 4
.IX Item "id ( )"
This method will return the index of the currently selected items
in the list. If the listboy is not a multi-select listbox it will
only return one value.
.IP "* \fBget_active_value\fR ( )" 4
.IX Item "get_active_value ( )"
This method will return the value of the currently active (i.e 
highlighted line).
.IP "* \fBget_active_id\fR ( )" 4
.IX Item "get_active_id ( )"
This method will return the index of the currently active (i.e 
highlighted line).
.IP "* \fBset_selection\fR ( \s-1LIST\s0 )" 4
.IX Item "set_selection ( LIST )"
This method marks the items at the positions specified in \s-1LIST\s0
as selected. In a multi-select listbox you can set multiple items 
with giving multiple values, in a single-select listbox only the
last item in \s-1LIST\s0 will be selected
.IP "* \fBclear_selection\fR ( )" 4
.IX Item "clear_selection ( )"
This method clears the selected objects of a multi and radiobutton
listbox.
.IP "* \fBvalues\fR ( \s-1LIST\s0 )" 4
.IX Item "values ( LIST )"
This method sets the values to use. 
.IP "* \fBinsert_at\fR < \s-1POS\s0, ARRAYREF|SCALAR >" 4
.IX Item "insert_at < POS, ARRAYREF|SCALAR >"
This method adds \s-1ARRAYREF\s0 or \s-1SCALAR\s0 into the list of values at
pos.
.IP "* \fBlabels\fR [ \s-1HASHREF\s0 ]" 4
.IX Item "labels [ HASHREF ]"
This method sets the labels to use. 
.IP "* \fBadd_labels\fR [ \s-1HASHREF\s0 ]" 4
.IX Item "add_labels [ HASHREF ]"
This method adds the given labels to the already defined ones.
.IP "* \fBonChange\fR ( \s-1CODEREF\s0 )" 4
.IX Item "onChange ( CODEREF )"
This method can be used to set the \fB\-onchange\fR event handler
(see above) after initialization of the listbox. 
.IP "* \fBonSelectionChange\fR ( \s-1CODEREF\s0 )" 4
.IX Item "onSelectionChange ( CODEREF )"
This method can be used to set the \fB\-onselchange\fR event handler
(see above) after initialization of the listbox. 
.SH "DEFAULT BINDINGS"
.IX Header "DEFAULT BINDINGS"
.IP "* <\fBcursor-left\fR>, <\fBh\fR>, <\fBtab\fR>" 4
.IX Item "<cursor-left>, <h>, <tab>"
Call the 'loose\-focus' routine. This will have the widget 
loose its focus.
.IP "* <\fBcursor-right\fR, <\fBl\fR>, <\fBenter\fR>, <\fBspace\fR>" 4
.IX Item "<cursor-right, <l>, <enter>, <space>"
Call the 'option\-select' routine. This will select the
active item in the listbox.
.IP "* <\fB1\fR>, <\fBy\fR>" 4
.IX Item "<1>, <y>"
Call the 'option\-check' routine. If the listbox is a 
multi-select listbox, the active item will become checked
and the next item will become active.
.IP "* <\fB0\fR>, <\fBn\fR>" 4
.IX Item "<0>, <n>"
Call the 'option\-uncheck' routine. If the listbox is a 
multi-select listbox, the active item will become unchecked
and the next item will become active.
.IP "* <\fBcursor-down\fR>, <\fBj\fR>" 4
.IX Item "<cursor-down>, <j>"
Call the 'option\-next' routine. This will make the next
item of the list active.
.IP "* <\fBcursor-up\fR>, <\fBk\fR>" 4
.IX Item "<cursor-up>, <k>"
Call the 'option\-prev' routine. This will make the previous
item of the list active.
.IP "* <\fBpage-up\fR>" 4
.IX Item "<page-up>"
Call the 'option\-prevpage' routine. This will make the item
on the previous page active.
.IP "* <\fBpage-down\fR>" 4
.IX Item "<page-down>"
Call the 'option\-nextpage' routine. This will make the item
on the next page active.
.IP "* <\fBhome\fR>, <\fB\s-1CTRL+A\s0\fR>" 4
.IX Item "<home>, <CTRL+A>"
Call the 'option\-first' routine. This will make the first
item of the list active.
.IP "* <\fBend\fR>, <\fB\s-1CTRL+E\s0\fR>" 4
.IX Item "<end>, <CTRL+E>"
Call the 'option\-last' routine. This will make the last
item of the list active.
.IP "* <\fB/\fR>" 4
.IX Item "</>"
Call the 'search\-forward' routine. This will make a 'less'\-like
search system appear in the listbox. A searchstring can be
entered. After that the user can search for the next occurance
using the 'n' key or the previous occurance using the 'N' key.
.IP "* <\fB?\fR>" 4
.IX Item "<?>"
Call the 'search\-backward' routine. This will do the same as
the 'search\-forward' routine, only it will search in the 
opposite direction.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Curses::UI, 
Curses::UI::Widget, 
Curses::UI::Common
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) 2001\-2002 Maurice Makaay. All rights reserved.
.PP
Maintained by Marcus Thiesen (marcus@cpan.thiesenweb.de)
.PP
This package is free software and is provided \*(L"as is\*(R" without express
or implied warranty. It may be used, redistributed and/or modified
under the same terms as perl itself.
