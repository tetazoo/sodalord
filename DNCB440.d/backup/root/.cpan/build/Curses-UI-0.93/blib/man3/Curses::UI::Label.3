.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Curses::UI::Label 3"
.TH Curses::UI::Label 3 "2003-10-15" "perl v5.8.3" "User Contributed Perl Documentation"
.SH "NAME"
Curses::UI::Label \- Create and manipulate label widgets
.SH "CLASS HIERARCHY"
.IX Header "CLASS HIERARCHY"
.Vb 3
\& Curses::UI::Widget
\&    |
\&    +----Curses::UI::Label
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Curses::UI;
\&    my $cui = new Curses::UI;
\&    my $win = $cui->add('window_id', 'Window');
.Ve
.PP
.Vb 5
\&    my $label = $win->add(
\&        'mylabel', 'Label',
\&        -text      => 'Hello, world!',
\&        -bold      => 1,
\&    );
.Ve
.PP
.Vb 1
\&    $label->draw;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Curses::UI::Label is a widget that shows a textstring.
This textstring can be drawn using these special
features: bold, dimmed, reverse, underlined, and blinking.
.PP
See exampes/demo\-Curses::UI::Label in the distribution
for a short demo.
.SH "STANDARD OPTIONS"
.IX Header "STANDARD OPTIONS"
\&\fB\-parent\fR, \fB\-x\fR, \fB\-y\fR, \fB\-width\fR, \fB\-height\fR, 
\&\fB\-pad\fR, \fB\-padleft\fR, \fB\-padright\fR, \fB\-padtop\fR, \fB\-padbottom\fR,
\&\fB\-ipad\fR, \fB\-ipadleft\fR, \fB\-ipadright\fR, \fB\-ipadtop\fR, \fB\-ipadbottom\fR,
\&\fB\-title\fR, \fB\-titlefullwidth\fR, \fB\-titlereverse\fR, \fB\-onfocus\fR,
\&\fB\-onblur\fR
.PP
For an explanation of these standard options, see 
Curses::UI::Widget.
.SH "WIDGET-SPECIFIC OPTIONS"
.IX Header "WIDGET-SPECIFIC OPTIONS"
.IP "* \fB\-height\fR < \s-1VALUE\s0 >" 4
.IX Item "-height < VALUE >"
If you do not define \fB\-height\fR, the label will compute 
its needed height using the initial \fB\-text\fR. 
.IP "* \fB\-text\fR < \s-1TEXT\s0 >" 4
.IX Item "-text < TEXT >"
This will set the text on the label to \s-1TEXT\s0.
.IP "* \fB\-textalignment\fR < \s-1VALUE\s0 >" 4
.IX Item "-textalignment < VALUE >"
This option controls how the text should be aligned inside
the label. \s-1VALUE\s0 can be 'left', 'middle' and 'right'. The 
default value for this option is 'left'. 
.IP "* \fB\-paddingspaces\fR < \s-1BOOLEAN\s0 >" 4
.IX Item "-paddingspaces < BOOLEAN >"
This option controls if padding spaces should be added
to the text if the text does not fill the complete width
of the widget. The default value for \s-1BOOLEAN\s0 is false.
An example use of this option is:
.Sp
.Vb 6
\&    $win->add(
\&        'label', 'Label', 
\&        -width         => -1, 
\&        -paddingspaces => 1,
\&        -text          => 'A bit of text', 
\&    );
.Ve
.Sp
This will create a label that fills the complete width of 
your screen and which will be completely in reverse font
(also the part that has no text on it). See the demo
in the distribution (examples/demo\-Curses::UI::Label)
for a clear example of this)
.IP "* \fB\-bold\fR < \s-1BOOLEAN\s0 >" 4
.IX Item "-bold < BOOLEAN >"
If \s-1BOOLEAN\s0 is true, text on the label will be drawn in 
a bold font.
.IP "* \fB\-dim\fR < \s-1BOOLEAN\s0 >" 4
.IX Item "-dim < BOOLEAN >"
If \s-1BOOLEAN\s0 is true, text on the label will be drawn in 
a dim font.
.IP "* \fB\-reverse\fR < \s-1BOOLEAN\s0 >" 4
.IX Item "-reverse < BOOLEAN >"
If \s-1BOOLEAN\s0 is true, text on the label will be drawn in
a reverse font.
.IP "* \fB\-underline\fR < \s-1BOOLEAN\s0 >" 4
.IX Item "-underline < BOOLEAN >"
If \s-1BOOLEAN\s0 is true, text on the label will be drawn in
an underlined font.
.IP "* \fB\-blink\fR < \s-1BOOLEAN\s0 >" 4
.IX Item "-blink < BOOLEAN >"
If \s-1BOOLEAN\s0 is option is true, text on the label will be 
drawn in a blinking font.
.SH "METHODS"
.IX Header "METHODS"
.IP "* \fBnew\fR ( \s-1OPTIONS\s0 )" 4
.IX Item "new ( OPTIONS )"
.PD 0
.IP "* \fBlayout\fR ( )" 4
.IX Item "layout ( )"
.IP "* \fBdraw\fR ( \s-1BOOLEAN\s0 )" 4
.IX Item "draw ( BOOLEAN )"
.IP "* \fBintellidraw\fR ( )" 4
.IX Item "intellidraw ( )"
.IP "* \fBfocus\fR ( )" 4
.IX Item "focus ( )"
.IP "* \fBonFocus\fR ( \s-1CODEREF\s0 )" 4
.IX Item "onFocus ( CODEREF )"
.IP "* \fBonBlur\fR ( \s-1CODEREF\s0 )" 4
.IX Item "onBlur ( CODEREF )"
.PD
These are standard methods. See Curses::UI::Widget 
for an explanation of these.
.IP "* \fBbold\fR ( \s-1BOOLEAN\s0 )" 4
.IX Item "bold ( BOOLEAN )"
.PD 0
.IP "* \fBdim\fR ( \s-1BOOLEAN\s0 )" 4
.IX Item "dim ( BOOLEAN )"
.IP "* \fBreverse\fR ( \s-1BOOLEAN\s0 )" 4
.IX Item "reverse ( BOOLEAN )"
.IP "* \fBunderline\fR ( \s-1BOOLEAN\s0 )" 4
.IX Item "underline ( BOOLEAN )"
.IP "* \fBblink\fR ( \s-1BOOLEAN\s0 )" 4
.IX Item "blink ( BOOLEAN )"
.PD
These methods can be used to control the font in which the text on
the label is drawn, after creating the widget. The font option
will be turned on for a true value of \s-1BOOLEAN\s0.
.IP "* \fBtextalignment\fR ( \s-1VALUE\s0 )" 4
.IX Item "textalignment ( VALUE )"
Set the textalignment. \s-1VALUE\s0 can be 'left',
\&'middle' or 'right'. 
.IP "* \fBtext\fR ( [\s-1TEXT\s0] )" 4
.IX Item "text ( [TEXT] )"
Without the \s-1TEXT\s0 argument, this method will return the current 
text of the widget. With a \s-1TEXT\s0 argument, the text on the widget
will be set to \s-1TEXT\s0. 
.IP "* \fBget\fR ( )" 4
.IX Item "get ( )"
This will call the \fBtext\fR method without any argument and thus
it will return the current text of the label.
.SH "DEFAULT BINDINGS"
.IX Header "DEFAULT BINDINGS"
Since a Label is a non-interacting widget, it does not have
any bindings.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Curses::UI, 
Curses::UI::Widget, 
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) 2001\-2002 Maurice Makaay. All rights reserved.
.PP
Maintained by Marcus Thiesen (marcus@cpan.thiesenweb.de)
.PP
This package is free software and is provided \*(L"as is\*(R" without express
or implied warranty. It may be used, redistributed and/or modified
under the same terms as perl itself.
