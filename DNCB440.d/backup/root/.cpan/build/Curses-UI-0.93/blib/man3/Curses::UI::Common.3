.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Curses::UI::Common 3"
.TH Curses::UI::Common 3 "2003-10-15" "perl v5.8.3" "User Contributed Perl Documentation"
.SH "NAME"
Curses::UI::Common \- Common methods for Curses::UI
.SH "CLASS HIERARCHY"
.IX Header "CLASS HIERARCHY"
.Vb 1
\& Curses::UI::Common - base class
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyPackage;
.Ve
.PP
.Vb 3
\&    use Curses::UI::Common;
\&    use vars qw(@ISA);
\&    @ISA = qw(Curses::UI::Common);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Curses::UI::Common is a collection of methods that is
shared between Curses::UI classes.
.SH "METHODS"
.IX Header "METHODS"
.Sh "Various methods"
.IX Subsection "Various methods"
.IP "* \fBparent\fR ( )" 4
.IX Item "parent ( )"
Returns the data member \f(CW$this\fR\->{\fB\-parent\fR}.
.IP "* \fBroot\fR ( )" 4
.IX Item "root ( )"
Returns the topmost \fB\-parent\fR (the Curses::UI instance).
.IP "* \fBdelallwin\fR ( )" 4
.IX Item "delallwin ( )"
This method will walk through all the data members of the
class intance. Each data member that is a Curses::Window
descendant will be removed.
.IP "* \fBaccessor\fR ( \s-1NAME\s0, [\s-1VALUE\s0] )" 4
.IX Item "accessor ( NAME, [VALUE] )"
If \s-1VALUE\s0 is set, the value for the data member \f(CW$this\fR\->{\s-1NAME\s0} 
will be changed. The method will return the current value for
data member \f(CW$this\fR\->{\s-1NAME\s0}.
.IP "* \fBkeys_to_lowercase\fR ( \s-1HASHREF\s0 )" 4
.IX Item "keys_to_lowercase ( HASHREF )"
All keys in the hash referred to by \s-1HASHREF\s0 will be 
converted to lower case.
.Sh "Text processing"
.IX Subsection "Text processing"
.IP "\fBsplit_to_lines\fR ( \s-1TEXT\s0 )" 4
.IX Item "split_to_lines ( TEXT )"
This method will split \s-1TEXT\s0 into a list of separate lines.
It returns a reference to this list.
.IP "\fBscrlength\fR ( \s-1LINE\s0 )" 4
.IX Item "scrlength ( LINE )"
Returns the screenlength of the string \s-1LINE\s0. The difference
with the perl function \fIlength()\fR is that this method will
expand \s-1TAB\s0 characters. It is exported by this class and it may
be called as a stand-alone routine.
.IP "\fBtext_dimension\fR ( \s-1TEXT\s0 )" 4
.IX Item "text_dimension ( TEXT )"
This method will return an array containing the width 
(the length of the longest line) and the height (the
number of lines) of the \s-1TEXT\s0.
.IP "\fBtext_wrap\fR ( \s-1LINE\s0, \s-1LENGTH\s0, \s-1WORDWRAP\s0 )" 4
.IX Item "text_wrap ( LINE, LENGTH, WORDWRAP )"
.PD 0
.IP "\fB\s-1WORDWRAP\s0\fR ( )" 4
.IX Item "WORDWRAP ( )"
.IP "\fB\s-1NO_WORDWRAP\s0\fR ( )" 4
.IX Item "NO_WORDWRAP ( )"
.PD
This method will wrap a line of text (\s-1LINE\s0) to a 
given length (\s-1LENGTH\s0). If the \s-1WORDWRAP\s0 argument is
true, wordwrap will be enabled (this is the default
for \s-1WORDWRAP\s0). It will return a reference to a list
of wrapped lines. It is exported by this class and it may
be called as a stand-alone routine.
.Sp
The \fB\s-1WORDWRAP\s0\fR and \fB\s-1NO_WORDWRAP\s0\fR routines will
return the correct value vor the \s-1WORDWRAP\s0 argument.
These routines are exported by this class.
.Sp
Example:
.Sp
.Vb 1
\&    $this->text_wrap($line, 50, NO_WORDWRAP);
.Ve
.Sh "Reading key input"
.IX Subsection "Reading key input"
.IP "\fB\s-1CUI_ESCAPE\s0\fR ( )" 4
.IX Item "CUI_ESCAPE ( )"
.PD 0
.IP "\fB\s-1CUI_TAB\s0\fR ( )" 4
.IX Item "CUI_TAB ( )"
.IP "\fB\s-1CUI_SPACE\s0\fR ( )" 4
.IX Item "CUI_SPACE ( )"
.PD
These are a couple of routines that are not defined by the
Curses module, but which might be useful anyway. 
These routines are exported by this class.
.IP "\fBget_key\fR ( \s-1BLOCKTIME\s0, \s-1CURSOR\s0 )" 4
.IX Item "get_key ( BLOCKTIME, CURSOR )"
This method will try to read a key from the keyboard.
It will return the key pressed or \-1 if no key was 
pressed. It is exported by this class and it may
be called as a stand-alone routine.
.Sp
The \s-1BLOCKTIME\s0 argument can be used to set
the curses halfdelay (the time to wait before the
routine decides that no key was pressed). \s-1BLOCKTIME\s0 is
given in tenths of seconds. The default is 0 (non\-blocking
key read).
.Sp
Example:
.Sp
.Vb 1
\&    my $key = $this->get_key(5)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Curses::UI
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) 2001\-2002 Maurice Makaay. All rights reserved.
.PP
Maintained by Marcus Thiesen (marcus@cpan.thiesenweb.de)
.PP
This package is free software and is provided \*(L"as is\*(R" without express
or implied warranty. It may be used, redistributed and/or modified
under the same terms as perl itself.
