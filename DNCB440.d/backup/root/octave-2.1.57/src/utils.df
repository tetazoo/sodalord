 XDEFUN_INTERNAL (isvarname, args, , true, "@deftypefn {Built-in Function} {} isvarname (@var{name})\nReturn true if @var{name} is a valid variable name\n@end deftypefn") 
 XDEFUN_INTERNAL (file_in_loadpath, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} file_in_loadpath (@var{file})\n@deftypefnx {Built-in Function} {} file_in_loadpath (@var{file}, \"all\")\n\nReturn the absolute name name of @var{file} if it can be found in\nthe list of directories specified by @code{LOADPATH}.\nIf no file is found, return an empty matrix.\n\nIf the first argument is a cell array of of strings, search each\ndirectory of the loadpath for element of the cell array and return\nthe first that matches.\n\nIf the second optional argument @code{\"all\"} is supplied, return\na cell array containing the list of all files that have the same\nname in the path.  If no files are found, return an empty cell array.\n@end deftypefn\n@seealso{file_in_path}") 
 XDEFUN_INTERNAL (file_in_path, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} file_in_path (@var{path}, @var{file})\n@deftypefnx {Built-in Function} {} file_in_path (@var{path}, @var{file}, \"all\")\nReturn the absolute name name of @var{file} if it can be found in\n@var{path}.  The value of @var{path} should be a colon-separated list of\ndirectories in the format described for the built-in variable\n@code{LOADPATH}.  If no file is found, return an empty matrix.\nFor example,\n\n@example\nfile_in_path (LOADPATH, \"nargchk.m\")\n     @result{} \"@value{OCTAVEHOME}/share/octave/2.0/m/general/nargchk.m\"\n@end example\n\nIf the second argument is a cell array of of strings, search each\ndirectory of the path for element of the cell array and return\nthe first that matches.\n\nIf the third optional argument @code{\"all\"} is supplied, return\na cell array containing the list of all files that have the same\nname in the path.  If no files are found, return an empty cell array.\n@seealso{file_in_loadpath}\n@end deftypefn") 
 XDEFUN_INTERNAL (do_string_escapes, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} do_string_escapes (@var{string})\nConvert special characters in @var{string} to their escaped forms.\n@end deftypefn") 
 XDEFUN_INTERNAL (undo_string_escapes, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} undo_string_escapes (@var{s})\nConverts special characters in strings back to their escaped forms.  For\nexample, the expression\n\n@example\nbell = \"\\a\";\n@end example\n\n@noindent\nassigns the value of the alert character (control-g, ASCII code 7) to\nthe string variable @code{bell}.  If this string is printed, the\nsystem will ring the terminal bell (if it is possible).  This is\nnormally the desired outcome.  However, sometimes it is useful to be\nable to print the original representation of the string, with the\nspecial characters replaced by their escape sequences.  For example,\n\n@example\noctave:13> undo_string_escapes (bell)\nans = \\a\n@end example\n\n@noindent\nreplaces the unprintable alert character with its printable\nrepresentation.\n@end deftypefn") 
 XDEFUN_INTERNAL (find_first_of_in_loadpath, args, , false, "") 
 XDEFUN_INTERNAL (ERRNO, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {@var{system_error_number}} errno ()\nReturn the current value of the system-dependent variable errno.\n@end deftypefn") 
   XDEFVAR_INTERNAL("warn_neg_dim_as_zero", SBV_warn_neg_dim_as_zero, false, false, warn_neg_dim_as_zero, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_neg_dim_as_zero\nIf the value of @code{warn_neg_dim_as_zero} is nonzero, print a warning\nfor expressions like\n\n@example\neye (-1)\n@end example\n\n@noindent\nThe default value is 0.\n@end defvr") ;
