 XDEFUN_INTERNAL (error, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} error (@var{template}, @dots{})\nThe @code{error} function formats the optional arguments under the\ncontrol of the template string @var{template} using the same rules as\nthe @code{printf} family of functions (@pxref{Formatted Output}).\nThe resulting message is prefixed by the string @samp{error: } and\nprinted on the @code{stderr} stream.\n\nCalling @code{error} also sets Octave's internal error state such that\ncontrol will return to the top level without evaluating any more\ncommands.  This is useful for aborting from functions or scripts.\n\nIf the error message does not end with a new line character, Octave will\nprint a traceback of all the function calls leading to the error.  For\nexample, given the following function definitions:\n\n@example\n@group\nfunction f () g () end\nfunction g () h () end\nfunction h () nargin == 1 || error (\"nargin != 1\"); end\n@end group\n@end example\n\n@noindent\ncalling the function @code{f} will result in a list of messages that\ncan help you to quickly locate the exact location of the error:\n\n@example\n@group\nf ()\nerror: nargin != 1\nerror: evaluating index expression near line 1, column 30\nerror: evaluating binary operator `||' near line 1, column 27\nerror: called from `h'\nerror: called from `g'\nerror: called from `f'\n@end group\n@end example\n\nIf the error message ends in a new line character, Octave will print the\nmessage but will not display any traceback messages as it returns\ncontrol to the top level.  For example, modifying the error message\nin the previous example to end in a new line causes Octave to only print\na single message:\n\n@example\n@group\nfunction h () nargin == 1 || error (\"nargin != 1\\n\"); end\nf ()\nerror: nargin != 1\n@end group\n@end example\n@end deftypefn") 
 XDEFUN_INTERNAL (warning, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} warning (@var{msg})\nPrint a warning message @var{msg} prefixed by the string @samp{warning: }.  \nAfter printing the warning message, Octave will continue to execute\ncommands.  You should use this function when you want to notify the user\nof an unusual condition, but only when it makes sense for your program\nto go on.\n@end deftypefn") 
 XDEFUN_INTERNAL (lasterr, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} lasterr ()\n@deftypefnx {Built-in Function} {} lasterr (@var{msg})\nWithout any arguments, return the last error message.  With one\nargument, set the last warning message to @var{msg}.\n@end deftypefn") 
 XDEFALIAS_INTERNAL(error_text, lasterr) ;
 XDEFALIAS_INTERNAL(__error_text__, lasterr) ;
 XDEFUN_INTERNAL (lastwarn, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} lastwarn ()\n@deftypefnx {Built-in Function} {} lastwarn (@var{msg})\nWithout any arguments, return the last warning message.  With one\nargument, set the last error message to @var{msg}.\n@end deftypefn") 
 XDEFUN_INTERNAL (usage, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} usage (@var{msg})\nPrint the message @var{msg}, prefixed by the string @samp{usage: }, and\nset Octave's internal error state such that control will return to the\ntop level without evaluating any more commands.  This is useful for\naborting from functions.\n\nAfter @code{usage} is evaluated, Octave will print a traceback of all\nthe function calls leading to the usage message.\n\nYou should use this function for reporting problems errors that result\nfrom an improper call to a function, such as calling a function with an\nincorrect number of arguments, or with arguments of the wrong type.  For\nexample, most functions distributed with Octave begin with code like\nthis\n\n@example\n@group\nif (nargin != 2)\n  usage (\"foo (a, b)\");\nendif\n@end group\n@end example\n\n@noindent\nto check for the proper number of arguments.\n@end deftypefn") 
   XDEFVAR_INTERNAL("beep_on_error", SBV_beep_on_error, false, false, beep_on_error, "-*- texinfo -*-\n@defvr {Built-in Variable} beep_on_error\nIf the value of @code{beep_on_error} is nonzero, Octave will try\nto ring your terminal's bell before printing an error message.  The\ndefault value is 0.\n@end defvr") ;
   XDEFVAR_INTERNAL("debug_on_error", SBV_debug_on_error, false, false, debug_on_error, "-*- texinfo -*-\n@defvr {Built-in Variable} debug_on_error\nIf the value of @code{debug_on_error} is nonzero, Octave will try\nto enter the debugger when an error is encountered.  This will also\ninhibit printing of the normal traceback message (you will only see\nthe top-level error message).  The default value is 0.\n@end defvr") ;
   XDEFVAR_INTERNAL("debug_on_warning", SBV_debug_on_warning, false, false, debug_on_warning, "-*- texinfo -*-\n@defvr {Built-in Variable} debug_on_warning\nIf the value of @code{debug_on_warning} is nonzero, Octave will try\nto enter the debugger when a warning is encountered.  The default\nvalue is 0.\n@end defvr") ;
