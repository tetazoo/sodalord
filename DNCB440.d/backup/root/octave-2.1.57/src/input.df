 XDEFUN_INTERNAL (input, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} input (@var{prompt})\n@deftypefnx {Built-in Function} {} input (@var{prompt}, \"s\")\nPrint a prompt and wait for user input.  For example,\n\n@example\ninput (\"Pick a number, any number! \")\n@end example\n\n@noindent\nprints the prompt\n\n@example\nPick a number, any number!\n@end example\n\n@noindent\nand waits for the user to enter a value.  The string entered by the user\nis evaluated as an expression, so it may be a literal constant, a\nvariable name, or any other valid expression.\n\nCurrently, @code{input} only returns one value, regardless of the number\nof values produced by the evaluation of the expression.\n\nIf you are only interested in getting a literal string value, you can\ncall @code{input} with the character string @code{\"s\"} as the second\nargument.  This tells Octave to return the string entered by the user\ndirectly, without evaluating it first.\n\nBecause there may be output waiting to be displayed by the pager, it is\na good idea to always call @code{fflush (stdout)} before calling\n@code{input}.  This will ensure that all pending output is written to\nthe screen before your prompt.  @xref{Input and Output}.\n@end deftypefn") 
 XDEFUN_INTERNAL (keyboard, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} keyboard (@var{prompt})\nThis function is normally used for simple debugging.  When the\n@code{keyboard} function is executed, Octave prints a prompt and waits\nfor user input.  The input strings are then evaluated and the results\nare printed.  This makes it possible to examine the values of variables\nwithin a function, and to assign new values to variables.  No value is\nreturned from the @code{keyboard} function, and it continues to prompt\nfor input until the user types @samp{quit}, or @samp{exit}.\n\nIf @code{keyboard} is invoked without any arguments, a default prompt of\n@samp{debug> } is used.\n@end deftypefn") 
 XDEFUN_INTERNAL (echo, args, , true, "-*- texinfo -*-\n@deffn {Command} echo options\nControl whether commands are displayed as they are executed.  Valid\noptions are:\n\n@table @code\n@item on\nEnable echoing of commands as they are executed in script files.\n\n@item off\nDisable echoing of commands as they are executed in script files.\n\n@item on all\nEnable echoing of commands as they are executed in script files and\nfunctions.\n\n@item off all\nDisable echoing of commands as they are executed in script files and\nfunctions.\n@end table\n\n@noindent\nIf invoked without any arguments, @code{echo} toggles the current echo\nstate.\n@end deffn") 
 XDEFUN_INTERNAL (completion_matches, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} completion_matches (@var{hint})\nGenerate possible completions given @var{hint}.\n\nThis function is provided for the benefit of programs like Emacs which\nmight be controlling Octave and handling user input.  The current\ncommand number is not incremented when this function is called.  This is\na feature, not a bug.\n@end deftypefn") 
 XDEFUN_INTERNAL (read_readline_init_file, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} read_readline_init_file (@var{file})\nRead the readline library initialiazation file @var{file}.  If\n@var{file} is omitted, read the default initialization file (normally\n@file{~/.inputrc}.\n@end deftypefn") 
 XDEFUN_INTERNAL (input_event_hook, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{ofcn}, @var{odata}] =} input_event_hook (@var{fcn}, @var{data})\nGiven the name of a function as a string and any Octave value object,\ninstall @var{fcn} as a function to call periodically, when Octave is\nwaiting for input.  The function should have the form\n@example\n@var{fcn} (@var{data})\n@end example\n\nIf @var{data} is omitted, Octave calls the function without any\narguments.  If both @var{fcn} and @var{data} are omitted, Octave\nclears the hook.  In all cases, the name of the previous hook function\nand the user data are returned.\n@end deftypefn") 
   XDEFVAR_INTERNAL("PS1", SBV_PS1, "\\s:\\#> ", false, ps1, "-*- texinfo -*-\n@defvr {Built-in Variable} PS1\nThe primary prompt string.  When executing interactively, Octave\ndisplays the primary prompt @code{PS1} when it is ready to read a\ncommand.\n\nThe default value of @code{PS1} is @code{\"\\s:\\#> \"}.  To change it, use a\ncommand like\n\n@example\noctave:13> PS1 = \"\\\\u@@\\\\H> \"\n@end example\n\n@noindent\nwhich will result in the prompt @samp{boris@@kremvax> } for the user\n@samp{boris} logged in on the host @samp{kremvax.kgb.su}.  Note that two\nbackslashes are required to enter a backslash into a string.\n@xref{Strings}.\n@end defvr") ;
   XDEFVAR_INTERNAL("PS2", SBV_PS2, "> ", false, ps2, "-*- texinfo -*-\n@defvr {Built-in Variable} PS2\nThe secondary prompt string, which is printed when Octave is\nexpecting additional input to complete a command.  For example, when\ndefining a function over several lines, Octave will print the value of\n@code{PS1} at the beginning of each line after the first.  The default\nvalue of @code{PS2} is @code{\"> \"}.\n@end defvr") ;
   XDEFVAR_INTERNAL("PS4", SBV_PS4, "+ ", false, ps4, "-*- texinfo -*-\n@defvr {Built-in Variable} PS4\nIf Octave is invoked with the @code{--echo-input} option, the value of\n@code{PS4} is printed before each line of input that is echoed.  The\ndefault value of @code{PS4} is @code{\"+ \"}.  @xref{Invoking Octave}, for\na description of @code{--echo-input}.\n@end defvr") ;
   XDEFVAR_INTERNAL("completion_append_char", SBV_completion_append_char, " ", false, completion_append_char, "-*- texinfo -*-\n@defvr {Built-in Variable} completion_append_char\nThe value of @code{completion_append_char} is used as the character to\nappend to successful command-line completion attempts.  The default\nvalue is @code{\" \"} (a single space).\n@end defvr") ;
   XDEFVAR_INTERNAL("echo_executing_commands", SBV_echo_executing_commands, ECHO_OFF, false, echo_executing_commands, "-*- texinfo -*-\n@defvr {Built-in Variable} echo_executing_commands\nThis variable may also be used to control the echo state.  It may be\nthe sum of the following values:\n\n@table @asis\n@item 1\nEcho commands read from script files.\n\n@item 2\nEcho commands from functions.\n\n@item 4\nEcho commands read from command line.\n@end table\n\nMore than one state can be active at once.  For example, a value of 3 is\nequivalent to the command @kbd{echo on all}.\n\nThe value of @code{echo_executing_commands} is set by the @kbd{echo}\ncommand and the command line option @code{--echo-input}.\n@end defvr") ;
