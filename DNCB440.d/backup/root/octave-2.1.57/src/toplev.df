 XDEFUN_INTERNAL (casesen, args, , true, "-*- texinfo -*-\n@deffn {Command} casesen arg\nProvided for compatibility with Matlab, but does nothing.\n@end deffn") 
 XDEFUN_INTERNAL (quit, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} exit (@var{status})\n@deftypefnx {Built-in Function} {} quit (@var{status})\nExit the current Octave session.  If the optional integer value\n@var{status} is supplied, pass that value to the operating system as the\nOctave's exit status.\n@end deftypefn") 
 XDEFALIAS_INTERNAL(exit, quit) ;
 XDEFUN_INTERNAL (warranty, , , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} warranty ()\nDescribe the conditions for copying and distributing Octave.\n@end deftypefn") 
 XDEFUN_INTERNAL (system, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} system (@var{string}, @var{return_output}, @var{type})\nExecute a shell command specified by @var{string}.  The second\nargument is optional.  If @var{type} is @code{\"async\"}, the process\nis started in the background and the process id of the child process\nis returned immediately.  Otherwise, the process is started, and\nOctave waits until it exits.  If @var{type} argument is omitted, a\nvalue of @code{\"sync\"} is assumed.\n\nIf two input arguments are given (the actual value of\n@var{return_output} is irrelevant) and the subprocess is started\nsynchronously, or if @var{system} is called with one input argument and\none or more output arguments, the output from the command is returned.\nOtherwise, if the subprocess is executed synchronously, it's output is\nsent to the standard output.  To send the output of a command executed\nwith @var{system} through the pager, use a command like\n\n@example\ndisp (system (cmd, 1));\n@end example\n\n@noindent\nor\n\n@example\nprintf (\"%s\n\", system (cmd, 1));\n@end example\n\nThe @code{system} function can return two values.  The first is any\noutput from the command that was written to the standard output stream,\nand the second is the output status of the command.  For example,\n\n@example\n[output, status] = system (\"echo foo; exit 2\");\n@end example\n\n@noindent\nwill set the variable @code{output} to the string @samp{foo}, and the\nvariable @code{status} to the integer @samp{2}.\n@end deftypefn") 
 XDEFALIAS_INTERNAL(shell_cmd, system) ;
 XDEFUN_INTERNAL (atexit, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} atexit (@var{fcn})\nRegister a function to be called when Octave exits.  For example,\n\n@example\n@group\nfunction print_fortune ()\n  printf (\"\\n%s\\n\", system (\"fortune\"));\n  fflush (stdout);\nendfunction\natexit (\"print_fortune\");\n@end group\n@end example\n\n@noindent\nwill print a message when Octave exits.\n@end deftypefn") 
 XDEFUN_INTERNAL (octave_config_info, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} octave_config_info (@var{option})\nReturn a structure containing configuration and installation\ninformation for Octave.\n\nif @var{option} is a string, return the configuration information for the\nspecified option.\n\n@end deftypefn") 
   XDEFCONST_INTERNAL(argv, , "-*- texinfo -*-\n@defvr {Built-in Variable} argv\nThe command line arguments passed to Octave are available in this\nvariable.  For example, if you invoked Octave using the command\n\n@example\noctave --no-line-editing --silent\n@end example\n\n@noindent\n@code{argv} would be a cell array of strings with the elements\n@code{--no-line-editing} and @code{--silent}.\n\nIf you write an executable Octave script, @code{argv} will contain the\nlist of arguments passed to the script.  @xref{Executable Octave Programs},\nfor an example of how to create an executable Octave script.\n@end defvr") ;
   XDEFCONST_INTERNAL(program_invocation_name, octave_env::get_program_invocation_name (), "-*- texinfo -*-\n@defvr {Built-in Variable} program_invocation_name\n@defvrx {Built-in Variable} program_name\nWhen Octave starts, the value of the built-in variable\n@code{program_invocation_name} is automatically set to the name that was\ntyped at the shell prompt to run Octave, and the value of\n@code{program_name} is automatically set to the final component of\n@code{program_invocation_name}.  For example, if you typed\n@samp{@value{OCTAVEHOME}/bin/octave} to start Octave,\n@code{program_invocation_name} would have the value\n@code{\"@value{OCTAVEHOME}/bin/octave\"}, and @code{program_name} would\nhave the value @code{\"octave\"}.\n\nIf executing a script from the command line (e.g., @code{octave foo.m})\nor using an executable Octave script, the program name is set to the\nname of the script.  @xref{Executable Octave Programs}, for an example of\nhow to create an executable Octave script.\n@end defvr") ;
   XDEFCONST_INTERNAL(program_name, octave_env::get_program_name (), "-*- texinfo -*-\n@defvr {Built-in Variable} program_invocation_name\n@defvrx {Built-in Variable} program_name\nWhen Octave starts, the value of the built-in variable\n@code{program_invocation_name} is automatically set to the name that was\ntyped at the shell prompt to run Octave, and the value of\n@code{program_name} is automatically set to the final component of\n@code{program_invocation_name}.  For example, if you typed\n@samp{@value{OCTAVEHOME}/bin/octave} to start Octave,\n@code{program_invocation_name} would have the value\n@code{\"@value{OCTAVEHOME}/bin/octave\"}, and @code{program_name} would\nhave the value @code{\"octave\"}.\n\nIf executing a script from the command line (e.g., @code{octave foo.m})\nor using an executable Octave script, the program name is set to the\nname of the script.  @xref{Executable Octave Programs}, for an example of\nhow to create an executable Octave script.\n@end defvr") ;
