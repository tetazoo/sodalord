 XDEFUN_INTERNAL (sizeof, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} sizeof (@var{val})\nReturn the size of @var{val} in bytes\n@end deftypefn") 
   XDEFVAR_INTERNAL("print_answer_id_name", SBV_print_answer_id_name, true, false, print_answer_id_name, "-*- texinfo -*-\n@defvr {Built-in Variable} print_answer_id_name\nIf the value of @code{print_answer_id_name} is nonzero, variable\nnames are printed along with the result.  Otherwise, only the result\nvalues are printed.  The default value is 1.\n@end defvr") ;
   XDEFVAR_INTERNAL("silent_functions", SBV_silent_functions, false, false, silent_functions, "-*- texinfo -*-\n@defvr {Built-in Variable} silent_functions\nIf the value of @code{silent_functions} is nonzero, internal output\nfrom a function is suppressed.  Otherwise, the results of expressions\nwithin a function body that are not terminated with a semicolon will\nhave their values printed.  The default value is 0.\n\nFor example, if the function\n\n@example\nfunction f ()\n  2 + 2\nendfunction\n@end example\n\n@noindent\nis executed, Octave will either print @samp{ans = 4} or nothing\ndepending on the value of @code{silent_functions}.\n@end defvr") ;
   XDEFVAR_INTERNAL("struct_levels_to_print", SBV_struct_levels_to_print, 2.0, false, struct_levels_to_print, "-*- texinfo -*-\n@defvr {Built-in Variable} struct_levels_to_print\nYou can tell Octave how many structure levels to display by setting the\nbuilt-in variable @code{struct_levels_to_print}.  The default value is 2.\n@end defvr") ;
   XDEFVAR_INTERNAL("warn_divide_by_zero", SBV_warn_divide_by_zero, true, false, warn_divide_by_zero, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_divide_by_zero\nIf the value of @code{warn_divide_by_zero} is nonzero, a warning\nis issued when Octave encounters a division by zero.  If the value is\n0, the warning is omitted.  The default value is 1.\n@end defvr") ;
   XDEFVAR_INTERNAL("warn_fortran_indexing", SBV_warn_fortran_indexing, false, false, warn_fortran_indexing, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_fortran_indexing\nIf the value of @code{warn_fortran_indexing} is nonzero, a warning is\nprinted for expressions which select elements of a two-dimensional matrix\nusing a single index.  The default value is 0.\n@end defvr") ;
   XDEFVAR_INTERNAL("warn_imag_to_real", SBV_warn_imag_to_real, false, false, warn_imag_to_real, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_imag_to_real\nIf the value of @code{warn_imag_to_real} is nonzero, a warning is\nprinted for implicit conversions of complex numbers to real numbers.\nThe default value is 0.\n@end defvr") ;
   XDEFVAR_INTERNAL("warn_num_to_str", SBV_warn_num_to_str, true, false, warn_num_to_str, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_num_to_str\nIf the value of @code{warn_num_to_str} is nonzero, a warning is\nprinted for implicit conversions of numbers to their ASCII character\nequivalents when strings are constructed using a mixture of strings and\nnumbers in matrix notation.  For example,\n\n@example\n@group\n[ \"f\", 111, 111 ]\n     @result{} \"foo\"\n@end group\n@end example\nelicits a warning if @code{warn_num_to_str} is nonzero.  The default\nvalue is 1.\n@end defvr") ;
   XDEFVAR_INTERNAL("warn_resize_on_range_error", SBV_warn_resize_on_range_error, false, false, warn_resize_on_range_error, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_resize_on_range_error\nIf the value of @code{warn_resize_on_range_error} is nonzero, print a\nwarning when a matrix is resized by an indexed assignment with\nindices outside the current bounds.  The default value is 0.\n@end defvr") ;
   XDEFVAR_INTERNAL("warn_str_to_num", SBV_warn_str_to_num, false, false, warn_str_to_num, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_str_to_num\nIf the value of @code{warn_str_to_num} is nonzero, a warning is printed\nfor implicit conversions of strings to their numeric ASCII equivalents.\nFor example,\n@example\n@group\n\"abc\" + 0\n     @result{} 97 98 99\n@end group\n@end example\nelicits a warning if @code{warn_str_to_num} is nonzero.  The default\nvalue is 0.\n@end defvr") ;
