 XDEFUN_INTERNAL (mark_as_command, args, , true, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} mark_as_command (@var{name})\nEnter @var{name} into the list of commands.\n@end deftypefn") 
 XDEFUN_INTERNAL (unmark_command, args, , true, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} mark_as_command (@var{name})\nRemove @var{name} from the list of commands.\n@end deftypefn") 
 XDEFUN_INTERNAL (isglobal, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} isglobal (@var{name})\nReturn 1 if @var{name} is globally visible.  Otherwise, return 0.  For\nexample,\n\n@example\n@group\nglobal x\nisglobal (\"x\")\n     @result{} 1\n@end group\n@end example\n@end deftypefn") 
 XDEFUN_INTERNAL (exist, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} exist (@var{name}, @var{type})\nReturn 1 if the name exists as a variable, 2 if the name (after\nappending @samp{.m}) is a function file in Octave's LOADPATH, 3 if the\nname is a @samp{.oct} file in Octave's LOADPATH, 5 if the name is a\nbuilt-in function, 7 if the name is a directory, 101 if the name is\na built-in variable, 102 if the name is a built-in constant, or 103\nif the name is a function not associated with a file (entered on\nthe command line).\n\nOtherwise, return 0.\n\nThis function also returns 2 if a regular file called @var{name}\nexists in Octave's @code{LOADPATH}.  If you want information about\nother types of files, you should use some combination of the functions\n@code{file_in_path} and @code{stat} instead.\n\nIf the optional argument @var{type} is supplied, check only for\nsymbols of the specified type.  Valid types are\n\n@table @samp\n@item \"var\"\nCheck only for variables.\n@item \"builtin\"\nCheck only for built-in functions.\n@item \"file\"\nCheck only for files.\n@item \"dir\"\nCheck only for directories.\n@end table\n@end deftypefn") 
 XDEFUN_INTERNAL (document, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} document (@var{symbol}, @var{text})\nSet the documentation string for @var{symbol} to @var{text}.\n@end deftypefn") 
 XDEFUN_INTERNAL (who, args, nargout, true, "-*- texinfo -*-\n@deffn {Command} who options pattern @dots{}\n@deffnx {Command} whos options pattern @dots{}\nList currently defined symbols matching the given patterns.  The\nfollowing are valid options.  They may be shortened to one character but\nmay not be combined.\n\n@table @code\n@item -all\nList all currently defined symbols.\n\n@item -builtins\nList built-in variables and functions.  This includes all currently\ncompiled function files, but does not include all function files that\nare in the @code{LOADPATH}.\n\n@item -functions\nList user-defined functions.\n\n@item -long\nPrint a long listing including the type and dimensions of any symbols.\nThe symbols in the first column of output indicate whether it is\npossible to redefine the symbol, and whether it is possible for it to be\ncleared.\n\n@item -variables\nList user-defined variables.\n@end table\n\nValid patterns are the same as described for the @code{clear} command\nabove.  If no patterns are supplied, all symbols from the given category\nare listed.  By default, only user defined functions and variables\nvisible in the local scope are displayed.\n\nThe command @kbd{whos} is equivalent to @kbd{who -long}.\n@end deffn") 
 XDEFUN_INTERNAL (whos, args, nargout, true, "-*- texinfo -*-\n@deffn {Command} whos options pattern @dots{}\nSee who.\n@end deffn") 
 XDEFUN_INTERNAL (mlock, args, , true, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} mlock (@var{name})\nLock the named function into memory.  If no function is named\nthen lock in the current function.\n@end deftypefn\n@seealso{munlock, mislocked, and persistent}") 
 XDEFUN_INTERNAL (munlock, args, , true, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} munlock (@var{fcn})\nUnlock the named function.  If no function is named\nthen unlock the current function.\n@end deftypefn\n@seealso{mlock, mislocked, and persistent}") 
 XDEFUN_INTERNAL (mislocked, args, , true, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} mislocked (@var{fcn})\nReturn true if the named function is locked.  If no function is named\nthen return true if the current function is locked.\n@end deftypefn\n@seealso{mlock, munlock, and persistent}") 
 XDEFUN_INTERNAL (clear, args, , true, "-*- texinfo -*-\n@deffn {Command} clear [-x] pattern @dots{}\nDelete the names matching the given patterns from the symbol table.  The\npattern may contain the following special characters:\n\n@table @code\n@item ?\nMatch any single character.\n\n@item *\nMatch zero or more characters.\n\n@item [ @var{list} ]\nMatch the list of characters specified by @var{list}.  If the first\ncharacter is @code{!} or @code{^}, match all characters except those\nspecified by @var{list}.  For example, the pattern @samp{[a-zA-Z]} will\nmatch all lower and upper case alphabetic characters.\n@end table\n\nFor example, the command\n\n@example\nclear foo b*r\n@end example\n\n@noindent\nclears the name @code{foo} and all names that begin with the letter\n@code{b} and end with the letter @code{r}.\n\nIf @code{clear} is called without any arguments, all user-defined\nvariables (local and global) are cleared from the symbol table.  If\n@code{clear} is called with at least one argument, only the visible\nnames matching the arguments are cleared.  For example, suppose you have\ndefined a function @code{foo}, and then hidden it by performing the\nassignment @code{foo = 2}.  Executing the command @kbd{clear foo} once\nwill clear the variable definition and restore the definition of\n@code{foo} as a function.  Executing @kbd{clear foo} a second time will\nclear the function definition.\n\nWith -x, clear the variables that don't match the patterns.\n\nThis command may not be used within a function body.\n@end deffn") 
 XDEFUN_INTERNAL (__print_symtab_info__, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} __print_symtab_info__ ()\nPrint raw symbol table statistices.\n@end deftypefn") 
 XDEFUN_INTERNAL (__print_symbol_info__, args, , false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} __dump_symbol_info__ (@var{name})\nPrint symbol table information for the symbol @var{name}.\n@end deftypefn") 
   XDEFVAR_INTERNAL("ans", SBV_ans, , false, 0, "-*- texinfo -*-\n@defvr {Built-in Variable} ans\nThis variable holds the most recently computed result that was not\nexplicitly assigned to a variable.  For example, after the expression\n\n@example\n3^2 + 4^2\n@end example\n\n@noindent\nis evaluated, the value of @code{ans} is 25.\n@end defvr") ;
   XDEFVAR_INTERNAL("ignore_function_time_stamp", SBV_ignore_function_time_stamp, "system", false, ignore_function_time_stamp, "-*- texinfo -*-\n@defvr {Built-in Variable} ignore_function_time_stamp\nThis variable can be used to prevent Octave from making the system call\n@code{stat} each time it looks up functions defined in function files.\nIf @code{ignore_function_time_stamp} to @code{\"system\"}, Octave will not\nautomatically recompile function files in subdirectories of\n@file{@var{octave-home}/lib/@var{version}} if they have changed since\nthey were last compiled, but will recompile other function files in the\n@code{LOADPATH} if they change.  If set to @code{\"all\"}, Octave will not\nrecompile any function files unless their definitions are removed with\n@code{clear}.  For any other value of @code{ignore_function_time_stamp},\nOctave will always check to see if functions defined in function files\nneed to recompiled.  The default value of @code{ignore_function_time_stamp} is\n@code{\"system\"}.\n@end defvr") ;
