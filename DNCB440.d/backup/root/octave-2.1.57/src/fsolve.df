 XDEFUN_DLD_INTERNAL (fsolve_options, args, , 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} fsolve_options (@var{opt}, @var{val})\nWhen called with two arguments, this function allows you set options\nparameters for the function @code{fsolve}.  Given one argument,\n@code{fsolve_options} returns the value of the corresponding option.  If\nno arguments are supplied, the names of all the available options and\ntheir current values are displayed.\n\nOptions include\n\n@table @code\n@item \"tolerance\"\nNonnegative relative tolerance.\n@end table\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (fsolve, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{x}, @var{info}, @var{msg}] =} fsolve (@var{fcn}, @var{x0})\nGiven @var{fcn}, the name of a function of the form @code{f (@var{x})}\nand an initial starting point @var{x0}, @code{fsolve} solves the set of\nequations such that @code{f(@var{x}) == 0}.\n\nIf @var{fcn} is a two-element string array, the first element names\nthe function @math{f} described above, and the second element names\na function of the form @code{j (@var{x})} to compute the Jacobian\nmatrix with elements\n@tex\n$$ J = {\\partial f_i \\over \\partial x_j} $$\n@end tex\n@ifinfo\n\n@example\n           df_i\njac(i,j) = ----\n           dx_j\n@end example\n@end ifinfo\n\nYou can use the function @code{fsolve_options} to set optional\nparameters for @code{fsolve}.\n@end deftypefn") 
