This is liboctave.info, produced by makeinfo version 4.6 from
./liboctave.texi.

   Copyright (C) 1996, 1997 John W. Eaton.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: liboctave.info,  Node: Top,  Next: Acknowledgements,  Prev: (dir),  Up: (dir)



This manual documents how to use, install and port Octave's C++ class
library, and how to report bugs.  It corresponds to Octave version
{No value for `VERSION'}.

* Menu:

* Acknowledgements::
* Copying::
* Introduction::
* Arrays::
* Matrix and Vector Operations::
* Matrix Factorizations::
* Ranges::
* Nonlinear Functions::
* Nonlinear Equations::
* Optimization::
* Quadrature::
* Ordinary Differential Equations::
* Differential Algebraic Equations::
* Error Handling::
* Installation::
* Bugs::
* Concept Index::
* Function Index::

 --- The Detailed Node Listing ---

Acknowledgements

* Contributors::                People who contributed to developing of Octave.

Arrays

* Constructors and Assignment::

Optimization

* Objective Functions::
* Bounds::
* Linear Constraints::
* Nonlinear Constraints::
* Quadratic Programming::
* Nonlinear Programming::

Quadrature

* Collocation Weights::


File: liboctave.info,  Node: Acknowledgements,  Next: Copying,  Prev: Top,  Up: Top

Acknowledgements
****************

* Menu:

* Contributors::                People who contributed to developing of Octave.


File: liboctave.info,  Node: Contributors,  Prev: Acknowledgements,  Up: Acknowledgements

Contributors to Octave
======================

In addition to John W. Eaton, several people have written parts of
liboctave.  (This has been removed because it is the same as what is in
the Octave manual.)


File: liboctave.info,  Node: Copying,  Next: Introduction,  Prev: Acknowledgements,  Up: Top

GNU GENERAL PUBLIC LICENSE
**************************

                         Version 2, June 1991
     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

Preamble
========

The licenses for most software are designed to take away your freedom
to share and change it.  By contrast, the GNU General Public License is
intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
  0. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable.
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY

 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

Appendix: How to Apply These Terms to Your New Programs
=======================================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR
     
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type `show c' for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in the program
     `Gnomovision' (which makes passes at compilers) written by James Hacker.
     
     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.


File: liboctave.info,  Node: Introduction,  Next: Arrays,  Prev: Copying,  Up: Top

A Brief Introduction to Octave
******************************

This manual documents how to run, install and port Octave's C++ classes,
and how to report bugs.


File: liboctave.info,  Node: Arrays,  Next: Matrix and Vector Operations,  Prev: Introduction,  Up: Top

Arrays
******

* Menu:

* Constructors and Assignment::


File: liboctave.info,  Node: Constructors and Assignment,  Prev: Arrays,  Up: Arrays

Constructors and Assignment
===========================

 - Constructor:  Array<T> (void)
     Create an array with no elements.

 - Constructor:  Array<T> (int N [, const T &VAL])
     Create an array with N elements.  If the optional argument VAL is
     supplied, the elements are initialized to VAL; otherwise, they are
     left uninitialized.  If N is less than zero, the current error
     handler is invoked (*note Error Handling::).

 - Constructor:  Array<T> (const Array<T> &A)
     Create a copy of the ARRAY<T> object A.  Memory for the ARRAY<T>
     class is managed using a reference counting scheme, so the cost of
     this operation is independent of the size of the array.

 - Assignment on Array<T>: Array<T>& operator = (const Array<T> &A)
     Assignment operator.  Memory for the ARRAY<T> class is managed
     using a reference counting scheme, so the cost of this operation is
     independent of the size of the array.

 - Method on Array<T>: int capacity (void) const
 - Method on Array<T>: int length (void) const
     Return the length of the array.

 - Method on Array<T>: T& elem (int N)
 - Method on Array<T>: T& checkelem (int N)
     If N is within the bounds of the array, return a reference to the
     element indexed by N; otherwise, the current error handler is
     invoked (*note Error Handling::).

 - Indexing on Array<T>: T& operator () (int N)

 - Method on Array<T>: T elem (int N) const
 - Method on Array<T>: T checkelem (int N) const
     If N is within the bounds of the array, return the value indexed
     by N; otherwise, call the current error handler.  *Note Error
     Handling::.

 - Indexing on Array<T>: T operator () (int N) const

 - Method on Array<T>: T& xelem (int N)
 - Method on Array<T>: T xelem (int N) const
     Return a reference to, or the value of, the element indexed by N.
     These methods never perform bounds checking.

 - Method on Array<T>: void resize (
     Change the size of the array to be N elements.  All elements are
     unchanged, except that if N is greater than the current size and
     the optional argument VAL is provided, the additional elements are
     initialized to VAL; otherwise, any additional elements are left
     uninitialized.  In the current implementation, if N is less than
     the current size, the length is updated but no memory is released.

 - Method on Array<T>: const T* data (void) const

 - Constructor:  Array2<T> Array2<T> Array2 (void)
 - Constructor:  Array2<T> (int N, int M)
 - Constructor:  Array2<T> (int N, int M, const T &VAL)
 - Constructor:  Array2<T> (const Array2<T> &A)
 - Constructor:  Array2<T> (const DiagArray<T> &A)

 - Assignment on Array2<T>: Array2<T>& operator = (const Array2<T> &A)

 - Method on Array2<T>: int dim1 (void) const
 - Method on Array2<T>: int rows (void) const

 - Method on Array2<T>: int dim2 (void) const
 - Method on Array2<T>: int cols (void) const
 - Method on Array2<T>: int columns (void) const

 - Method on Array2<T>: T& elem (int I, int J)
 - Method on Array2<T>: T& checkelem (int I, int J)

 - Indexing on Array2<T>: T& operator () (int I, int J)

 - Method on Array2<T>: void resize (int N, int M)
 - Method on Array2<T>: void resize (int N, int M, const T &VAL)

 - Constructor:  Array3<T> (void)
 - Constructor:  Array3<T> (int N, int M, int K)
 - Constructor:  Array3<T> (int N, int M, int K, const T &VAL)
 - Constructor:  Array3<T> (const Array3<T> &A)

 - Assignment on Array3<T>: Array3<T>& operator = (const Array3<T> &A)

 - Method on Array3<T>: int dim1 (void) const
 - Method on Array3<T>: int dim2 (void) const
 - Method on Array3<T>: int dim3 (void) const

 - Method on Array3<T>: T& elem (int I, int J, int K)
 - Method on Array3<T>: T& checkelem (int I, int J, int K)

 - Indexing on Array3<T>: T& operator () (int I, int J, int K)

 - Method on Array3<T>: void resize (int N, int M, int K)
 - Method on Array3<T>: void resize (int N, int M, int K, const T &VAL)

 - Constructor:  DiagArray<T> (void)
 - Constructor:  DiagArray<T> (int N)
 - Constructor:  DiagArray<T> (int N, const T &VAL)
 - Constructor:  DiagArray<T> (int R, int C)
 - Constructor:  DiagArray<T> (int R, int C, const T &VAL)
 - Constructor:  DiagArray<T> (const Array<T> &A)
 - Constructor:  DiagArray<T> (const DiagArray<T> &A)

 - Assginment on DiagArray<T>&: operator = (const DiagArray<T> &A)

 - Method on DiagArray<T>: int dim1 (void) const
 - Method on DiagArray<T>: int rows (void) const

 - Method on DiagArray<T>: int dim2 (void) const
 - Method on DiagArray<T>: int cols (void) const
 - Method on DiagArray<T>: int columns (void) const

 - Method on DiagArray<T>: T& elem (int R, int C)
 - Method on DiagArray<T>: T& checkelem (int R, int C)

 - Indexing on DiagArray<T>: T& operator () (int R, int C)

 - Method on DiagArray<T>: void resize (int N, int M)
 - Method on DiagArray<T>: void resize (int N, int M, const T &VAL)

   The real and complex `ColumnVector' and `RowVector' classes all have
the following functions.  These will eventually be part of an
`MArray<T>' class, derived from the `Array<T>' class.  Then the
`ColumnVector' and `RowVector' classes will be derived from the
`MArray<T>' class.

   Element by element vector by scalar ops.

 - : RowVector operator + (const RowVector &A, const double &S)
 - : RowVector operator - (const RowVector &A, const double &S)
 - : RowVector operator * (const RowVector &A, const double &S)
 - : RowVector operator / (const RowVector &A, const double &S)

   Element by element scalar by vector ops.

 - : RowVector operator + (const double &S, const RowVector &A)
 - : RowVector operator - (const double &S, const RowVector &A)
 - : RowVector operator * (const double &S, const RowVector &A)
 - : RowVector operator / (const double &S, const RowVector &A)

   Element by element vector by vector ops.

 - : RowVector operator + (const RowVector &A, const RowVector &B)
 - : RowVector operator - (const RowVector &A, const RowVector &B)

 - : RowVector product (const RowVector &A, const RowVector &B)
 - : RowVector quotient (const RowVector &A, const RowVector &B)

   Unary MArray ops.

 - : RowVector operator - (const RowVector &A)

   The `Matrix' classes share the following functions.  These will
eventually be part of an `MArray2<T>' class, derived from the
`Array2<T>' class.  Then the `Matrix' class will be derived from the
`MArray<T>' class.

   Element by element matrix by scalar ops.

 - : Matrix operator + (const Matrix &A, const double &S)
 - : Matrix operator - (const Matrix &A, const double &S)
 - : Matrix operator * (const Matrix &A, const double &S)
 - : Matrix operator / (const Matrix &A, const double &S)

   Element by element scalar by matrix ops.

 - : Matrix operator + (const double &S, const Matrix &A)
 - : Matrix operator - (const double &S, const Matrix &A)
 - : Matrix operator * (const double &S, const Matrix &A)
 - : Matrix operator / (const double &S, const Matrix &A)

   Element by element matrix by matrix ops.

 - : Matrix operator + (const Matrix &A, const Matrix &B)
 - : Matrix operator - (const Matrix &A, const Matrix &B)

 - : Matrix product (const Matrix &A, const Matrix &B)
 - : Matrix quotient (const Matrix &A, const Matrix &B)

   Unary matrix ops.

 - : Matrix operator - (const Matrix &A)

   The `DiagMatrix' classes share the following functions.  These will
eventually be part of an `MDiagArray<T>' class, derived from the
`DiagArray<T>' class.  Then the `DiagMatrix' class will be derived from
the `MDiagArray<T>' class.

   Element by element MDiagArray by scalar ops.

 - : DiagMatrix operator * (const DiagMatrix &A, const double &S)
 - : DiagMatrix operator / (const DiagMatrix &A, const double &S)

   Element by element scalar by MDiagArray ops.

 - : DiagMatrix operator * (const double &S, const DiagMatrix &A)

   Element by element MDiagArray by MDiagArray ops.

 - : DiagMatrix operator + (const DiagMatrix &A, const DiagMatrix &B)
 - : DiagMatrix operator - (const DiagMatrix &A, const DiagMatrix &B)

 - : DiagMatrix product (const DiagMatrix &A, const DiagMatrix &B)

   Unary MDiagArray ops.

 - : DiagMatrix operator - (const DiagMatrix &A)


File: liboctave.info,  Node: Matrix and Vector Operations,  Next: Matrix Factorizations,  Prev: Arrays,  Up: Top

Matrix and Vector Operations
****************************

 - :  Matrix (void)
 - :  Matrix (int R, int C)
 - :  Matrix (int R, int C, double VAL)
 - :  Matrix (const Array2<double> &A)
 - :  Matrix (const Matrix &A)
 - :  Matrix (const DiagArray<double> &A)
 - :  Matrix (const DiagMatrix &A)

 - : Matrix& operator = (const Matrix &A)

 - : int operator == (const Matrix &A) const
 - : int operator != (const Matrix &A) const

 - : Matrix& insert (const Matrix &A, int R, int C)
 - : Matrix& insert (const RowVector &A, int R, int C)
 - : Matrix& insert (const ColumnVector &A, int R, int C)
 - : Matrix& insert (const DiagMatrix &A, int R, int C)

 - : Matrix& fill (double VAL)
 - : Matrix& fill (double VAL, int r1, int c1, int r2, int c2)

 - : Matrix append (const Matrix &A) const
 - : Matrix append (const RowVector &A) const
 - : Matrix append (const ColumnVector &A) const
 - : Matrix append (const DiagMatrix &A) const

 - : Matrix stack (const Matrix &A) const
 - : Matrix stack (const RowVector &A) const
 - : Matrix stack (const ColumnVector &A) const
 - : Matrix stack (const DiagMatrix &A) const

 - : Matrix transpose (void) const

 - : Matrix extract (int r1, int c1, int r2, int c2) const

 - : RowVector row (int I) const
 - : RowVector row (char *s) const

 - : ColumnVector column (int I) const
 - : ColumnVector column (char *s) const

 - : Matrix inverse (void) const
 - : Matrix inverse (int &INFO) const
 - : Matrix inverse (int &INFO, double &RCOND) const

 - : ComplexMatrix fourier (void) const
 - : ComplexMatrix ifourier (void) const

 - : DET determinant (void) const
 - : DET determinant (int &INFO) const
 - : DET determinant (int &INFO, double &RCOND) const

 - : Matrix solve (const Matrix &B) const
 - : Matrix solve (const Matrix &B, int &INFO) const
 - : Matrix solve (const Matrix &B, int &INFO, double &RCOND) const

 - : ComplexMatrix solve (const ComplexMatrix &B) const
 - : ComplexMatrix solve (const ComplexMatrix &B, int &INFO) const
 - : ComplexMatrix solve (const ComplexMatrix &B, int &INFO, double
          &RCOND) const

 - : ColumnVector solve (const ColumnVector &B) const
 - : ColumnVector solve (const ColumnVector &B, int &INFO) const
 - : ColumnVector solve (const ColumnVector &B, int &INFO, double
          &RCOND) const

 - : ComplexColumnVector solve (const ComplexColumnVector &B) const
 - : ComplexColumnVector solve (const ComplexColumnVector &B, int
          &INFO) const
 - : ComplexColumnVector solve (const ComplexColumnVector &B, int
          &INFO, double &RCOND) const

 - : Matrix lssolve (const Matrix &B) const
 - : Matrix lssolve (const Matrix &B, int &INFO) const
 - : Matrix lssolve (const Matrix &B, int &INFO, int &RANK) const

 - : ComplexMatrix lssolve (const ComplexMatrix &B) const
 - : ComplexMatrix lssolve (const ComplexMatrix &B, int &INFO) const
 - : ComplexMatrix lssolve (const ComplexMatrix &B, int &INFO, int
          &RANK) const

 - : ColumnVector lssolve (const ColumnVector &B) const
 - : ColumnVector lssolve (const ColumnVector &B, int &INFO) const
 - : ColumnVector lssolve (const ColumnVector &B, int &INFO, int &RANK)
          const

 - : ComplexColumnVector lssolve (const ComplexColumnVector &B) const
 - : ComplexColumnVector lssolve (const ComplexColumnVector &B, int
          &INFO) const
 - : ComplexColumnVector lssolve (const ComplexColumnVector &B, int
          &INFO, int &RANK) const

 - : Matrix& operator += (const Matrix &A)
 - : Matrix& operator -= (const Matrix &A)

 - : Matrix& operator += (const DiagMatrix &A)
 - : Matrix& operator -= (const DiagMatrix &A)

 - : Matrix operator ! (void) const

 - : ComplexMatrix operator + (const Matrix &A, const Complex &S)
 - : ComplexMatrix operator - (const Matrix &A, const Complex &S)
 - : ComplexMatrix operator * (const Matrix &A, const Complex &S)
 - : ComplexMatrix operator / (const Matrix &A, const Complex &S)

 - : ComplexMatrix operator + (const Complex &S, const Matrix &A)
 - : ComplexMatrix operator - (const Complex &S, const Matrix &A)
 - : ComplexMatrix operator * (const Complex &S, const Matrix &A)
 - : ComplexMatrix operator / (const Complex &S, const Matrix &A)

 - : ColumnVector operator * (const Matrix &A, const ColumnVector &B)
 - : ComplexColumnVector operator * (const Matrix &A, const
          ComplexColumnVector &B)

 - : Matrix operator + (const Matrix &A, const DiagMatrix &B)
 - : Matrix operator - (const Matrix &A, const DiagMatrix &B)
 - : Matrix operator * (const Matrix &A, const DiagMatrix &B)

 - : ComplexMatrix operator + (const Matrix &A, const ComplexDiagMatrix
          &B)
 - : ComplexMatrix operator - (const Matrix &A, const ComplexDiagMatrix
          &B)
 - : ComplexMatrix operator * (const Matrix &A, const ComplexDiagMatrix
          &B)

 - : Matrix operator * (const Matrix &A, const Matrix &B)
 - : ComplexMatrix operator * (const Matrix &A, const ComplexMatrix &B)

 - : ComplexMatrix operator + (const Matrix &A, const ComplexMatrix &B)
 - : ComplexMatrix operator - (const Matrix &A, const ComplexMatrix &B)

 - : ComplexMatrix product (const Matrix &A, const ComplexMatrix &B)
 - : ComplexMatrix quotient (const Matrix &A, const ComplexMatrix &B)

 - : Matrix map (d_d_Mapper F, const Matrix &A)
 - : void map (d_d_Mapper F)

 - : Matrix all (void) const
 - : Matrix any (void) const

 - : Matrix cumprod (void) const
 - : Matrix cumsum (void) const
 - : Matrix prod (void) const
 - : Matrix sum (void) const
 - : Matrix sumsq (void) const

 - : ColumnVector diag (void) const
 - : ColumnVector diag (int K) const

 - : ColumnVector row_min (void) const
 - : ColumnVector row_min_loc (void) const

 - : ColumnVector row_max (void) const
 - : ColumnVector row_max_loc (void) const

 - : RowVector column_min (void) const
 - : RowVector column_min_loc (void) const

 - : RowVector column_max (void) const
 - : RowVector column_max_loc (void) const

 - : ostream& operator << (ostream &OS, const Matrix &A)
 - : istream& operator >> (istream &IS, Matrix &A)

 - :  ColumnVector (void)
 - :  ColumnVector (int N)
 - :  ColumnVector (int N, double VAL)
 - :  ColumnVector (const Array<double> &A)
 - :  ColumnVector (const ColumnVector &A)

 - : ColumnVector& operator = (const ColumnVector &A)

 - : int operator == (const ColumnVector &A) const
 - : int operator != (const ColumnVector &A) const

 - : ColumnVector& insert (const ColumnVector &A, int R)

 - : ColumnVector& fill (double VAL)
 - : ColumnVector& fill (double VAL, int r1, int r2)

 - : ColumnVector stack (const ColumnVector &A) const

 - : RowVector transpose (void) const

 - : ColumnVector extract (int r1, int r2) const

 - : ColumnVector& operator += (const ColumnVector &A)
 - : ColumnVector& operator -= (const ColumnVector &A)

 - : ComplexColumnVector operator + (const ColumnVector &A, const
          Complex &S)
 - : ComplexColumnVector operator - (const ColumnVector &A, const
          Complex &S)
 - : ComplexColumnVector operator * (const ColumnVector &A, const
          Complex &S)
 - : ComplexColumnVector operator / (const ColumnVector &A, const
          Complex &S)

 - : ComplexColumnVector operator + (const Complex &S, const
          ColumnVector &A)
 - : ComplexColumnVector operator - (const Complex &S, const
          ColumnVector &A)
 - : ComplexColumnVector operator * (const Complex &S, const
          ColumnVector &A)
 - : ComplexColumnVector operator / (const Complex &S, const
          ColumnVector &A)

 - : Matrix operator * (const ColumnVector &A, const RowVector &A)

 - : ComplexMatrix operator * (const ColumnVector &A, const
          ComplexRowVector &B)

 - : ComplexColumnVector operator + (const ComplexColumnVector &A,
          const ComplexColumnVector &B)

 - : ComplexColumnVector operator - (const ComplexColumnVector &A,
          const ComplexColumnVector &B)

 - : ComplexColumnVector product (const ComplexColumnVector &A, const
          ComplexColumnVector &B)

 - : ComplexColumnVector quotient (const ComplexColumnVector &A, const
          ComplexColumnVector &B)

 - : ColumnVector map (d_d_Mapper F, const ColumnVector &A)
 - : void map (d_d_Mapper F)

 - : double min (void) const
 - : double max (void) const

 - : ostream& operator << (ostream &OS, const ColumnVector &A)

 - :  RowVector (void)
 - :  RowVector (int N)
 - :  RowVector (int N, double VAL)
 - :  RowVector (const Array<double> &A)
 - :  RowVector (const RowVector &A)

 - : RowVector& operator = (const RowVector &A)

 - : int operator == (const RowVector &A) const
 - : int operator != (const RowVector &A) const

 - : RowVector& insert (const RowVector &A, int C)

 - : RowVector& fill (double VAL)
 - : RowVector& fill (double VAL, int c1, int c2)

 - : RowVector append (const RowVector &A) const

 - : ColumnVector transpose (void) const

 - : RowVector extract (int c1, int c2) const

 - : RowVector& operator += (const RowVector &A)
 - : RowVector& operator -= (const RowVector &A)

 - : ComplexRowVector operator + (const RowVector &A, const Complex &S)
 - : ComplexRowVector operator - (const RowVector &A, const Complex &S)
 - : ComplexRowVector operator * (const RowVector &A, const Complex &S)
 - : ComplexRowVector operator / (const RowVector &A, const Complex &S)

 - : ComplexRowVector operator + (const Complex &S, const RowVector &A)
 - : ComplexRowVector operator - (const Complex &S, const RowVector &A)
 - : ComplexRowVector operator * (const Complex &S, const RowVector &A)
 - : ComplexRowVector operator / (const Complex &S, const RowVector &A)

 - : double operator * (const RowVector &A, ColumnVector &B)

 - : Complex operator * (const RowVector &A, const ComplexColumnVector
          &B)

 - : RowVector operator * (const RowVector &A, const Matrix &B)

 - : ComplexRowVector operator * (const RowVector &A, const
          ComplexMatrix &B)

 - : ComplexRowVector operator + (const RowVector &A, const
          ComplexRowVector &B)
 - : ComplexRowVector operator - (const RowVector &A, const
          ComplexRowVector &B)

 - : ComplexRowVector product (const RowVector &A, const
          ComplexRowVector &B)
 - : ComplexRowVector quotient (const RowVector &A, const
          ComplexRowVector &B)

 - : RowVector map (d_d_Mapper F, const RowVector &A)
 - : void map (d_d_Mapper F)

 - : double min (void) const
 - : double max (void) const

 - : ostream& operator << (ostream &OS, const RowVector &A)

 - :  DiagMatrix (void)
 - :  DiagMatrix (int N)
 - :  DiagMatrix (int N, double VAL)
 - :  DiagMatrix (int R, int C)
 - :  DiagMatrix (int R, int C, double VAL)
 - :  DiagMatrix (const RowVector &A)
 - :  DiagMatrix (const ColumnVector &A)
 - :  DiagMatrix (const DiagArray<double> &A)
 - :  DiagMatrix (const DiagMatrix &A)

 - : DiagMatrix& operator = (const DiagMatrix &A)

 - : int operator == (const DiagMatrix &A) const
 - : int operator != (const DiagMatrix &A) const

 - : DiagMatrix& fill (double VAL)
 - : DiagMatrix& fill (double VAL, int BEG, int END)
 - : DiagMatrix& fill (const ColumnVector &A)
 - : DiagMatrix& fill (const RowVector &A)
 - : DiagMatrix& fill (const ColumnVector &A, int BEG)
 - : DiagMatrix& fill (const RowVector &A, int BEG)

 - : DiagMatrix transpose (void) const

 - : Matrix extract (int r1, int c1, int r2, int c2) const

 - : RowVector row (int I) const
 - : RowVector row (char *s) const

 - : ColumnVector column (int I) const
 - : ColumnVector column (char *s) const

 - : DiagMatrix inverse (void) const
 - : DiagMatrix inverse (int &INFO) const

 - : DiagMatrix& operator += (const DiagMatrix &A)
 - : DiagMatrix& operator -= (const DiagMatrix &A)

 - : Matrix operator + (const DiagMatrix &A, double S)
 - : Matrix operator - (const DiagMatrix &A, double S)

 - : ComplexMatrix operator + (const DiagMatrix &A, const Complex &S)
 - : ComplexMatrix operator - (const DiagMatrix &A, const Complex &S)

 - : ComplexDiagMatrix operator * (const DiagMatrix &A, const Complex
          &S)
 - : ComplexDiagMatrix operator / (const DiagMatrix &A, const Complex
          &S)

 - : Matrix operator + (double S, const DiagMatrix &A)
 - : Matrix operator - (double S, const DiagMatrix &A)

 - : ComplexMatrix operator + (const Complex &S, const DiagMatrix &A)
 - : ComplexMatrix operator - (const Complex &S, const DiagMatrix &A)

 - : ComplexDiagMatrix operator * (const Complex &S, const DiagMatrix
          &A)

 - : ColumnVector operator * (const DiagMatrix &A, const ColumnVector
          &B)

 - : ComplexColumnVector operator * (const DiagMatrix &A, const
          ComplexColumnVector &B)

 - : ComplexDiagMatrix operator + (const DiagMatrix &A, const
          ComplexDiagMatrix &B)
 - : ComplexDiagMatrix operator - (const DiagMatrix &A, const
          ComplexDiagMatrix &B)

 - : ComplexDiagMatrix product (const DiagMatrix &A, const
          ComplexDiagMatrix &B)

 - : Matrix operator + (const DiagMatrix &A, const Matrix &B)
 - : Matrix operator - (const DiagMatrix &A, const Matrix &B)
 - : Matrix operator * (const DiagMatrix &A, const Matrix &B)

 - : ComplexMatrix operator + (const DiagMatrix &A, const ComplexMatrix
          &B)
 - : ComplexMatrix operator - (const DiagMatrix &A, const ComplexMatrix
          &B)
 - : ComplexMatrix operator * (const DiagMatrix &A, const ComplexMatrix
          &B)

 - : ColumnVector diag (void) const
 - : ColumnVector diag (int K) const

 - : ostream& operator << (ostream &OS, const DiagMatrix &A)

 - :  ComplexMatrix (void)
 - :  ComplexMatrix (int R, int C)
 - :  ComplexMatrix (int R, int C, const Complex &VAL)
 - :  ComplexMatrix (const Matrix &A)
 - :  ComplexMatrix (const Array2<Complex> &A)
 - :  ComplexMatrix (const ComplexMatrix &A)
 - :  ComplexMatrix (const DiagMatrix &A)
 - :  ComplexMatrix (const DiagArray<Complex> &A)
 - :  ComplexMatrix (const ComplexDiagMatrix &A)

 - : ComplexMatrix& operator = (const ComplexMatrix &A)

 - : int operator == (const ComplexMatrix &A) const
 - : int operator != (const ComplexMatrix &A) const

 - : ComplexMatrix& insert (const Matrix &A, int R, int C)
 - : ComplexMatrix& insert (const RowVector &A, int R, int C)
 - : ComplexMatrix& insert (const ColumnVector &A, int R, int C)
 - : ComplexMatrix& insert (const DiagMatrix &A, int R, int C)

 - : ComplexMatrix& insert (const ComplexMatrix &A, int R, int C)
 - : ComplexMatrix& insert (const ComplexRowVector &A, int R, int C)
 - : ComplexMatrix& insert (const ComplexColumnVector &A, int R, int C)
 - : ComplexMatrix& insert (const ComplexDiagMatrix &A, int R, int C)

 - : ComplexMatrix& fill (double VAL)
 - : ComplexMatrix& fill (const Complex &VAL)
 - : ComplexMatrix& fill (double VAL, int r1, int c1, int r2, int c2)
 - : ComplexMatrix& fill (const Complex &VAL, int r1, int c1, int r2,
          int c2)

 - : ComplexMatrix append (const Matrix &A) const
 - : ComplexMatrix append (const RowVector &A) const
 - : ComplexMatrix append (const ColumnVector &A) const
 - : ComplexMatrix append (const DiagMatrix &A) const

 - : ComplexMatrix append (const ComplexMatrix &A) const
 - : ComplexMatrix append (const ComplexRowVector &A) const
 - : ComplexMatrix append (const ComplexColumnVector &A) const
 - : ComplexMatrix append (const ComplexDiagMatrix &A) const

 - : ComplexMatrix stack (const Matrix &A) const
 - : ComplexMatrix stack (const RowVector &A) const
 - : ComplexMatrix stack (const ColumnVector &A) const
 - : ComplexMatrix stack (const DiagMatrix &A) const

 - : ComplexMatrix stack (const ComplexMatrix &A) const
 - : ComplexMatrix stack (const ComplexRowVector &A) const
 - : ComplexMatrix stack (const ComplexColumnVector &A) const
 - : ComplexMatrix stack (const ComplexDiagMatrix &A) const

 - : ComplexMatrix transpose (void) const

 - : Matrix real (const ComplexMatrix &A)
 - : Matrix imag (const ComplexMatrix &A)
 - : ComplexMatrix conj (const ComplexMatrix &A)

 - : ComplexMatrix extract (int r1, int c1, int r2, int c2) const

 - : ComplexRowVector row (int I) const
 - : ComplexRowVector row (char *s) const

 - : ComplexColumnVector column (int I) const
 - : ComplexColumnVector column (char *s) const

 - : ComplexMatrix inverse (void) const
 - : ComplexMatrix inverse (int &INFO) const
 - : ComplexMatrix inverse (int &INFO, double &RCOND) const

 - : ComplexMatrix fourier (void) const
 - : ComplexMatrix ifourier (void) const

 - : ComplexDET determinant (void) const
 - : ComplexDET determinant (int &INFO) const
 - : ComplexDET determinant (int &INFO, double &RCOND) const

 - : ComplexMatrix solve (const Matrix &B) const
 - : ComplexMatrix solve (const Matrix &B, int &INFO) const
 - : ComplexMatrix solve (const Matrix &B, int &INFO, double &RCOND)
          const

 - : ComplexMatrix solve (const ComplexMatrix &B) const
 - : ComplexMatrix solve (const ComplexMatrix &B, int &INFO) const
 - : ComplexMatrix solve (const ComplexMatrix &B, int &INFO, double
          &RCOND) const

 - : ComplexColumnVector solve (const ComplexColumnVector &B) const
 - : ComplexColumnVector solve (const ComplexColumnVector &B, int
          &INFO) const
 - : ComplexColumnVector solve (const ComplexColumnVector &B, int
          &INFO, double &RCOND) const

 - : ComplexMatrix lssolve (const ComplexMatrix &B) const
 - : ComplexMatrix lssolve (const ComplexMatrix &B, int &INFO) const
 - : ComplexMatrix lssolve (const ComplexMatrix &B, int &INFO, int
          &RANK) const

 - : ComplexColumnVector lssolve (const ComplexColumnVector &B) const
 - : ComplexColumnVector lssolve (const ComplexColumnVector &B, int
          &INFO) const
 - : ComplexColumnVector lssolve (const ComplexColumnVector &B, int
          &INFO, int &RANK) const

 - : ComplexMatrix& operator += (const DiagMatrix &A)
 - : ComplexMatrix& operator -= (const DiagMatrix &A)

 - : ComplexMatrix& operator += (const ComplexDiagMatrix &A)
 - : ComplexMatrix& operator -= (const ComplexDiagMatrix &A)

 - : ComplexMatrix& operator += (const Matrix &A)
 - : ComplexMatrix& operator -= (const Matrix &A)

 - : ComplexMatrix& operator += (const ComplexMatrix &A)
 - : ComplexMatrix& operator -= (const ComplexMatrix &A)

 - : Matrix operator ! (void) const

 - : ComplexMatrix operator + (const ComplexMatrix &A, double S)
 - : ComplexMatrix operator - (const ComplexMatrix &A, double S)
 - : ComplexMatrix operator * (const ComplexMatrix &A, double S)
 - : ComplexMatrix operator / (const ComplexMatrix &A, double S)

 - : ComplexMatrix operator + (double S, const ComplexMatrix &A)
 - : ComplexMatrix operator - (double S, const ComplexMatrix &A)
 - : ComplexMatrix operator * (double S, const ComplexMatrix &A)
 - : ComplexMatrix operator / (double S, const ComplexMatrix &A)

 - : ComplexColumnVector operator * (const ComplexMatrix &A, const
          ColumnVector &B)

 - : ComplexColumnVector operator * (const ComplexMatrix &A, const
          ComplexColumnVector &B)

 - : ComplexMatrix operator + (const ComplexMatrix &A, const DiagMatrix
          &B)
 - : ComplexMatrix operator - (const ComplexMatrix &A, const DiagMatrix
          &B)
 - : ComplexMatrix operator * (const ComplexMatrix &A, const DiagMatrix
          &B)

 - : ComplexMatrix operator + (const ComplexMatrix &A, const
          ComplexDiagMatrix &B)
 - : ComplexMatrix operator - (const ComplexMatrix &A, const
          ComplexDiagMatrix &B)
 - : ComplexMatrix operator * (const ComplexMatrix &A, const
          ComplexDiagMatrix &B)

 - : ComplexMatrix operator + (const ComplexMatrix &A, const Matrix &B)
 - : ComplexMatrix operator - (const ComplexMatrix &A, const Matrix &B)

 - : ComplexMatrix operator * (const ComplexMatrix &A, const Matrix &B)
 - : ComplexMatrix operator * (const ComplexMatrix &A, const
          ComplexMatrix &B)

 - : ComplexMatrix product (const ComplexMatrix &A, const Matrix &B)
 - : ComplexMatrix quotient (const ComplexMatrix &A, const Matrix &B)

 - : ComplexMatrix map (c_c_Mapper F, const ComplexMatrix &A)
 - : Matrix map (d_c_Mapper F, const ComplexMatrix &A)
 - : void map (c_c_Mapper F)

 - : Matrix all (void) const
 - : Matrix any (void) const

 - : ComplexMatrix cumprod (void) const
 - : ComplexMatrix cumsum (void) const
 - : ComplexMatrix prod (void) const
 - : ComplexMatrix sum (void) const
 - : ComplexMatrix sumsq (void) const

 - : ComplexColumnVector diag (void) const
 - : ComplexColumnVector diag (int K) const

 - : ComplexColumnVector row_min (void) const
 - : ComplexColumnVector row_min_loc (void) const

 - : ComplexColumnVector row_max (void) const
 - : ComplexColumnVector row_max_loc (void) const

 - : ComplexRowVector column_min (void) const
 - : ComplexRowVector column_min_loc (void) const

 - : ComplexRowVector column_max (void) const
 - : ComplexRowVector column_max_loc (void) const

 - : ostream& operator << (ostream &OS, const ComplexMatrix &A)
 - : istream& operator >> (istream &IS, ComplexMatrix &A)

 - :  ComplexColumnVector (void)
 - :  ComplexColumnVector (int N)
 - :  ComplexColumnVector (int N, const Complex &VAL)
 - :  ComplexColumnVector (const ColumnVector &A)
 - :  ComplexColumnVector (const Array<Complex> &A)
 - :  ComplexColumnVector (const ComplexColumnVector &A)

 - : ComplexColumnVector& operator = (const ComplexColumnVector &A)

 - : int operator == (const ComplexColumnVector &A) const
 - : int operator != (const ComplexColumnVector &A) const

 - : ComplexColumnVector& insert (const ColumnVector &A, int R)
 - : ComplexColumnVector& insert (const ComplexColumnVector &A, int R)

 - : ComplexColumnVector& fill (double VAL)
 - : ComplexColumnVector& fill (const Complex &VAL)
 - : ComplexColumnVector& fill (double VAL, int r1, int r2)
 - : ComplexColumnVector& fill (const Complex &VAL, int r1, int r2)

 - : ComplexColumnVector stack (const ColumnVector &A) const
 - : ComplexColumnVector stack (const ComplexColumnVector &A) const

 - : ComplexRowVector transpose (void) const

 - : ColumnVector real (const ComplexColumnVector &A)
 - : ColumnVector imag (const ComplexColumnVector &A)
 - : ComplexColumnVector conj (const ComplexColumnVector &A)

 - : ComplexColumnVector extract (int r1, int r2) const

 - : ComplexColumnVector& operator += (const ColumnVector &A)
 - : ComplexColumnVector& operator -= (const ColumnVector &A)

 - : ComplexColumnVector& operator += (const ComplexColumnVector &A)
 - : ComplexColumnVector& operator -= (const ComplexColumnVector &A)

 - : ComplexColumnVector operator + (const ComplexColumnVector &A,
          double S)
 - : ComplexColumnVector operator - (const ComplexColumnVector &A,
          double S)
 - : ComplexColumnVector operator * (const ComplexColumnVector &A,
          double S)
 - : ComplexColumnVector operator / (const ComplexColumnVector &A,
          double S)

 - : ComplexColumnVector operator + (double S, const
          ComplexColumnVector &A)
 - : ComplexColumnVector operator - (double S, const
          ComplexColumnVector &A)
 - : ComplexColumnVector operator * (double S, const
          ComplexColumnVector &A)
 - : ComplexColumnVector operator / (double S, const
          ComplexColumnVector &A)

 - : ComplexMatrix operator * (const ComplexColumnVector &A, const
          ComplexRowVector &B)

 - : ComplexColumnVector operator + (const ComplexColumnVector &A,
          const ColumnVector &B)
 - : ComplexColumnVector operator - (const ComplexColumnVector &A,
          const ColumnVector &B)

 - : ComplexColumnVector product (const ComplexColumnVector &A, const
          ColumnVector &B)
 - : ComplexColumnVector quotient (const ComplexColumnVector &A, const
          ColumnVector &B)

 - : ComplexColumnVector map (c_c_Mapper F, const ComplexColumnVector
          &A)
 - : ColumnVector map (d_c_Mapper F, const ComplexColumnVector &A)
 - : void map (c_c_Mapper F)

 - : Complex min (void) const
 - : Complex max (void) const

 - : ostream& operator << (ostream &OS, const ComplexColumnVector &A)

 - :  ComplexRowVector (void)
 - :  ComplexRowVector (int N)
 - :  ComplexRowVector (int N, const Complex &VAL)
 - :  ComplexRowVector (const RowVector &A)
 - :  ComplexRowVector (const Array<Complex> &A)
 - :  ComplexRowVector (const ComplexRowVector &A)

 - : ComplexRowVector& operator = (const ComplexRowVector &A)

 - : int operator == (const ComplexRowVector &A) const
 - : int operator != (const ComplexRowVector &A) const

 - : ComplexRowVector& insert (const RowVector &A, int C)
 - : ComplexRowVector& insert (const ComplexRowVector &A, int C)

 - : ComplexRowVector& fill (double VAL)
 - : ComplexRowVector& fill (const Complex &VAL)
 - : ComplexRowVector& fill (double VAL, int c1, int c2)
 - : ComplexRowVector& fill (const Complex &VAL, int c1, int c2)

 - : ComplexRowVector append (const RowVector &A) const
 - : ComplexRowVector append (const ComplexRowVector &A) const

 - : ComplexColumnVector transpose (void) const

 - : RowVector real (const ComplexRowVector &A)
 - : RowVector imag (const ComplexRowVector &A)
 - : ComplexRowVector conj (const ComplexRowVector &A)

 - : ComplexRowVector extract (int c1, int c2) const

 - : ComplexRowVector& operator += (const RowVector &A)
 - : ComplexRowVector& operator -= (const RowVector &A)

 - : ComplexRowVector& operator += (const ComplexRowVector &A)
 - : ComplexRowVector& operator -= (const ComplexRowVector &A)

 - : ComplexRowVector operator + (const ComplexRowVector &A, double S)
 - : ComplexRowVector operator - (const ComplexRowVector &A, double S)
 - : ComplexRowVector operator * (const ComplexRowVector &A, double S)
 - : ComplexRowVector operator / (const ComplexRowVector &A, double S)

 - : ComplexRowVector operator + (double S, const ComplexRowVector &A)
 - : ComplexRowVector operator - (double S, const ComplexRowVector &A)
 - : ComplexRowVector operator * (double S, const ComplexRowVector &A)
 - : ComplexRowVector operator / (double S, const ComplexRowVector &A)

 - : Complex operator * (const ComplexRowVector &A, const ColumnVector
          &B)

 - : Complex operator * (const ComplexRowVector &A, const
          ComplexColumnVector &B)

 - : ComplexRowVector operator * (const ComplexRowVector &A, const
          ComplexMatrix &B)

 - : ComplexRowVector operator + (const ComplexRowVector &A, const
          RowVector &B)
 - : ComplexRowVector operator - (const ComplexRowVector &A, const
          RowVector &B)

 - : ComplexRowVector product (const ComplexRowVector &A, const
          RowVector &B)
 - : ComplexRowVector quotient (const ComplexRowVector &A, const
          RowVector &B)

 - : ComplexRowVector map (c_c_Mapper F, const ComplexRowVector &A)
 - : RowVector map (d_c_Mapper F, const ComplexRowVector &A)
 - : void map (c_c_Mapper F)

 - : Complex min (void) const
 - : Complex max (void) const

 - : ostream& operator << (ostream &OS, const ComplexRowVector &A)

 - :  ComplexDiagMatrix (void)
 - :  ComplexDiagMatrix (int N)
 - :  ComplexDiagMatrix (int N, const Complex &VAL)
 - :  ComplexDiagMatrix (int R, int C)
 - :  ComplexDiagMatrix (int R, int C, const Complex &VAL)
 - :  ComplexDiagMatrix (const RowVector &A)
 - :  ComplexDiagMatrix (const ComplexRowVector &A)
 - :  ComplexDiagMatrix (const ColumnVector &A)
 - :  ComplexDiagMatrix (const ComplexColumnVector &A)
 - :  ComplexDiagMatrix (const DiagMatrix &A)
 - :  ComplexDiagMatrix (const DiagArray<Complex> &A)
 - :  ComplexDiagMatrix (const ComplexDiagMatrix &A)

 - : ComplexDiagMatrix& operator = (const ComplexDiagMatrix &A)

 - : int operator == (const ComplexDiagMatrix &A) const
 - : int operator != (const ComplexDiagMatrix &A) const

 - : ComplexDiagMatrix& fill (double VAL)
 - : ComplexDiagMatrix& fill (const Complex &VAL)
 - : ComplexDiagMatrix& fill (double VAL, int BEG, int END)
 - : ComplexDiagMatrix& fill (const Complex &VAL, int BEG, int END)
 - : ComplexDiagMatrix& fill (const ColumnVector &A)
 - : ComplexDiagMatrix& fill (const ComplexColumnVector &A)
 - : ComplexDiagMatrix& fill (const RowVector &A)
 - : ComplexDiagMatrix& fill (const ComplexRowVector &A)
 - : ComplexDiagMatrix& fill (const ColumnVector &A, int BEG)
 - : ComplexDiagMatrix& fill (const ComplexColumnVector &A, int BEG)
 - : ComplexDiagMatrix& fill (const RowVector &A, int BEG)
 - : ComplexDiagMatrix& fill (const ComplexRowVector &A, int BEG)

 - : ComplexDiagMatrix transpose (void) const

 - : DiagMatrix real (const ComplexDiagMatrix &A)
 - : DiagMatrix imag (const ComplexDiagMatrix &A)
 - : ComplexDiagMatrix conj (const ComplexDiagMatrix &A)

 - : ComplexMatrix extract (int r1, int c1, int r2, int c2) const

 - : ComplexRowVector row (int I) const
 - : ComplexRowVector row (char *s) const

 - : ComplexColumnVector column (int I) const
 - : ComplexColumnVector column (char *s) const

 - : ComplexDiagMatrix inverse (int &INFO) const
 - : ComplexDiagMatrix inverse (void) const

 - : ComplexDiagMatrix& operator += (const DiagMatrix &A)
 - : ComplexDiagMatrix& operator -= (const DiagMatrix &A)

 - : ComplexDiagMatrix& operator += (const ComplexDiagMatrix &A)
 - : ComplexDiagMatrix& operator -= (const ComplexDiagMatrix &A)

 - : ComplexMatrix operator + (const ComplexDiagMatrix &A, double S)
 - : ComplexMatrix operator - (const ComplexDiagMatrix &A, double S)

 - : ComplexMatrix operator + (const ComplexDiagMatrix &A, const
          Complex &S)
 - : ComplexMatrix operator - (const ComplexDiagMatrix &A, const
          Complex &S)

 - : ComplexDiagMatrix operator * (const ComplexDiagMatrix &A, double S)
 - : ComplexDiagMatrix operator / (const ComplexDiagMatrix &A, double S)

 - : ComplexMatrix operator + (double S, const ComplexDiagMatrix &A)
 - : ComplexMatrix operator - (double S, const ComplexDiagMatrix &A)

 - : ComplexMatrix operator + (const Complex &S, const
          ComplexDiagMatrix &A)
 - : ComplexMatrix operator - (const Complex &S, const
          ComplexDiagMatrix &A)

 - : ComplexDiagMatrix operator * (double S, const ComplexDiagMatrix &A)

 - : ComplexColumnVector operator * (const ComplexDiagMatrix &A, const
          ColumnVector &B)

 - : ComplexColumnVector operator * (const ComplexDiagMatrix &A, const
          ComplexColumnVector &B)

 - : ComplexDiagMatrix operator + (const ComplexDiagMatrix &A, const
          DiagMatrix &B)
 - : ComplexDiagMatrix operator - (const ComplexDiagMatrix &A, const
          DiagMatrix &B)

 - : ComplexDiagMatrix product (const ComplexDiagMatrix &A, const
          DiagMatrix &B)

 - : ComplexMatrix operator + (const ComplexDiagMatrix &A, const Matrix
          &B)
 - : ComplexMatrix operator - (const ComplexDiagMatrix &A, const Matrix
          &B)
 - : ComplexMatrix operator * (const ComplexDiagMatrix &A, const Matrix
          &B)

 - : ComplexMatrix operator + (const ComplexDiagMatrix &A, const
          ComplexMatrix &B)
 - : ComplexMatrix operator - (const ComplexDiagMatrix &A, const
          ComplexMatrix &B)
 - : ComplexMatrix operator * (const ComplexDiagMatrix &A, const
          ComplexMatrix &B)

 - : ComplexColumnVector diag (void) const
 - : ComplexColumnVector diag (int K) const

 - : ostream& operator << (ostream &OS, const ComplexDiagMatrix &A)


File: liboctave.info,  Node: Matrix Factorizations,  Next: Ranges,  Prev: Matrix and Vector Operations,  Up: Top

Matrix Factorizations
*********************

 - :  AEPBALANCE (void)
 - :  AEPBALANCE (const Matrix &A, const char *BALANCE_JOB)
 - :  AEPBALANCE (const AEPBALANCE &A)

 - : AEPBALANCE& operator = (const AEPBALANCE &A)

 - : Matrix balanced_matrix (void) const
 - : Matrix balancing_matrix (void) const

 - : ostream& operator << (ostream &OS, const AEPBALANCE &A)

 - : ComplexAEPBALANCE (void)
 - : ComplexAEPBALANCE (const ComplexMatrix &A, const char *BALANCE_JOB)
 - : ComplexAEPBALANCE (const ComplexAEPBALANCE &A)

 - : ComplexAEPBALANCE& operator = (const ComplexAEPBALANCE &A)

 - : ComplexMatrix balanced_matrix (void) const
 - : ComplexMatrix balancing_matrix (void) const

 - : ostream& operator << (ostream &OS, const ComplexAEPBALANCE &A)

 - :  DET (void)
 - :  DET (const DET &A)

 - : DET& operator = (const DET &A)

 - : int value_will_overflow (void) const
 - : int value_will_underflow (void) const

 - : double coefficient (void) const
 - : int exponent (void) const
 - : double value (void) const

 - : ostream& operator << (ostream &OS, const DET &A)

 - :  ComplexDET (void)
 - :  ComplexDET (const ComplexDET &A)

 - : ComplexDET& operator = (const ComplexDET &A)

 - : int value_will_overflow (void) const
 - : int value_will_underflow (void) const

 - : Complex coefficient (void) const
 - : int exponent (void) const
 - : Complex value (void) const

 - : ostream& operator << (ostream &OS, const ComplexDET &A)

 - :  GEPBALANCE (void)
 - :  GEPBALANCE (const Matrix &A, const Matrix &, const char
          *BALANCE_JOB)
 - :  GEPBALANCE (const GEPBALANCE &A)

 - : GEPBALANCE& operator = (const GEPBALANCE &A)

 - : Matrix balanced_a_matrix (void) const
 - : Matrix balanced_b_matrix (void) const
 - : Matrix left_balancing_matrix (void) const
 - : Matrix right_balancing_matrix (void) const

 - : ostream& operator << (ostream &OS, const GEPBALANCE &A)

 - :  CHOL (void)
 - :  CHOL (const Matrix &A)
 - :  CHOL (const Matrix &A, int &INFO)
 - :  CHOL (const CHOL &A)

 - : CHOL& operator = (const CHOL &A)

 - : Matrix chol_matrix (void) const

 - : ostream& operator << (ostream &OS, const CHOL &A)

 - :  ComplexCHOL (void)
 - :  ComplexCHOL (const ComplexMatrix &A)
 - :  ComplexCHOL (const ComplexMatrix &A, int &INFO)
 - :  ComplexCHOL (const ComplexCHOL &A)

 - : ComplexCHOL& operator = (const ComplexCHOL &A)

 - : ComplexMatrix chol_matrix (void) const

 - : ostream& operator << (ostream &OS, const ComplexCHOL &A)

 - :  HESS (void)
 - :  HESS (const Matrix &A)
 - :  HESS (const Matrix&a, int &INFO)
 - :  HESS (const HESS &A)

 - : HESS& operator = (const HESS &A)

 - : Matrix hess_matrix (void) const
 - : Matrix unitary_hess_matrix (void) const

 - : ostream& operator << (ostream &OS, const HESS &A)

 - :  ComplexHESS (void)
 - :  ComplexHESS (const ComplexMatrix &A)
 - :  ComplexHESS (const ComplexMatrix &A, int &INFO)
 - :  ComplexHESS (const ComplexHESS &A)

 - : ComplexHESS& operator = (const ComplexHESS &A)

 - : ComplexMatrix hess_matrix (void) const
 - : ComplexMatrix unitary_hess_matrix (void) const

 - : ostream& operator << (ostream &OS, const ComplexHESS &A)

 - :  SCHUR (void)
 - :  SCHUR (const Matrix &A, const char *ORD)
 - :  SCHUR (const Matrix &A, const char *ORD, int &INFO)
 - :  SCHUR (const SCHUR &A, const char *ORD)

 - : SCHUR& operator = (const SCHUR &A)

 - : Matrix schur_matrix (void) const
 - : Matrix unitary_matrix (void) const

 - : ostream& operator << (ostream &OS, const SCHUR &A)

 - :  ComplexSCHUR (void)
 - :  ComplexSCHUR (const ComplexMatrix &A, const char *ORD)
 - :  ComplexSCHUR (const ComplexMatrix &A, const char *ORD, int &INFO)
 - :  ComplexSCHUR (const ComplexSCHUR &A, const char *ORD)

 - : ComplexSCHUR& operator = (const ComplexSCHUR &A)

 - : ComplexMatrix schur_matrix (void) const
 - : ComplexMatrix unitary_matrix (void) const

 - : ostream& operator << (ostream &OS, const ComplexSCHUR &A)

 - :  SVD (void)
 - :  SVD (const Matrix &A)
 - :  SVD (const Matrix &A, int &INFO)
 - :  SVD (const SVD &A)

 - : SVD& operator = (const SVD &A)

 - : DiagMatrix singular_values (void) const
 - : Matrix left_singular_matrix (void) const
 - : Matrix right_singular_matrix (void) const

 - : ostream& operator << (ostream &OS, const SVD &A)

 - :  ComplexSVD (void)
 - :  ComplexSVD (const ComplexMatrix &A)
 - :  ComplexSVD (const ComplexMatrix &A, int &INFO)
 - :  ComplexSVD (const ComplexSVD &A)

 - : ComplexSVD& operator = (const ComplexSVD &A)

 - : DiagMatrix singular_values (void) const
 - : ComplexMatrix left_singular_matrix (void) const
 - : ComplexMatrix right_singular_matrix (void) const

 - : ostream& operator << (ostream &OS, const ComplexSVD &A)

 - :  EIG (void)
 - :  EIG (const Matrix &A)
 - :  EIG (const Matrix &A, int &INFO)
 - :  EIG (const ComplexMatrix &A)
 - :  EIG (const ComplexMatrix &A, int &INFO)
 - :  EIG (const EIG &A)

 - : EIG& operator = (const EIG &A)

 - : ComplexColumnVector eigenvalues (void) const

 - : ComplexMatrix eigenvectors (void) const

 - : ostream& operator << (ostream &OS, const EIG &A)

 - :  LU (void)
 - :  LU (const Matrix &A)
 - :  LU (const LU &A)

 - : LU& operator = (const LU &A)

 - : Matrix L (void) const
 - : Matrix U (void) const
 - : Matrix P (void) const

 - : ostream& operator << (ostream &OS, const LU &A)

 - :  ComplexLU (void)
 - :  ComplexLU (const ComplexMatrix &A)
 - :  ComplexLU (const ComplexLU &A)

 - : ComplexLU& operator = (const ComplexLU &A)

 - : ComplexMatrix L (void) const
 - : ComplexMatrix U (void) const
 - : Matrix P (void) const

 - : ostream& operator << (ostream &OS, const ComplexLU &A)

 - :  QR (void)
 - :  QR (const Matrix &A)
 - :  QR (const QR &A)

 - : QR& operator = (const QR &A)

 - : Matrix Q (void) const
 - : Matrix R (void) const

 - : ostream& operator << (ostream &OS, const QR &A)

 - :  ComplexQR (void)
 - :  ComplexQR (const ComplexMatrix &A)
 - :  ComplexQR (const ComplexQR &A)

 - : ComplexQR& operator = (const ComplexQR &A)

 - : ComplexMatrix Q (void) const
 - : ComplexMatrix R (void) const

 - : ostream& operator << (ostream &OS, const ComplexQR &A)


File: liboctave.info,  Node: Ranges,  Next: Nonlinear Functions,  Prev: Matrix Factorizations,  Up: Top

Ranges
******

 - :  Range (void)
 - :  Range (const Range &R)
 - :  Range (double B, double L)
 - :  Range (double B, double L, double I)

 - : double base (void) const
 - : double limit (void) const
 - : double inc (void) const

 - : void set_base (double B)
 - : void set_limit (double L)
 - : void set_inc (double I)

 - : int nelem (void) const

 - : double min (void) const
 - : double max (void) const

 - : void sort (void)

 - : ostream& operator << (ostream &OS, const Range &R)
 - : istream& operator >> (istream &IS, Range &R)

 - : void print_range (void)


File: liboctave.info,  Node: Nonlinear Functions,  Next: Nonlinear Equations,  Prev: Ranges,  Up: Top

Nonlinear Functions
*******************

 - :  NLFunc (void)
 - :  NLFunc (const NONLINEAR_FCN)
 - :  NLFunc (const NONLINEAR_FCN, const JACOBIAN_FCN)
 - :  NLFunc (const NLFunc &A)

 - : NLFunc& operator = (const NLFunc &A)

 - : nonlinear_fcn function (void) const;

 - : NLFunc& set_function (const nonlinear_fcn F)

 - : jacobian_fcn jacobian_function (void) const;

 - : NLFunc& set_jacobian_function (const jacobian_fcn J)


File: liboctave.info,  Node: Nonlinear Equations,  Next: Optimization,  Prev: Nonlinear Functions,  Up: Top

Nonlinear Equations
*******************

 - :  NLEqn_options (void)
 - :  NLEqn_options (const NLEqn_options &OPT)

 - : NLEqn_options& operator = (const NLEqn_options &OPT)

 - : void init (void)

 - : void copy (const NLEqn_options &OPT)

 - : void set_default_options (void)

 - : void set_tolerance (double VAL)

 - : double tolerance (void)

 - :  NLEqn (void)
 - :  NLEqn (const ColumnVector&, const NLFUNC)
 - :  NLEqn (const NLEqn &A)

 - : NLEqn& operator = (const NLEqn &A)

 - : void resize (int N)

 - : void set_states (const ColumnVector &X)

 - : ColumnVector states (void) const

 - : int size (void) const

 - : ColumnVector solve (void)
 - : ColumnVector solve (const ColumnVector &X)

 - : ColumnVector solve (int &INFO)
 - : ColumnVector solve (const ColumnVector &X, int &INFO)


File: liboctave.info,  Node: Optimization,  Next: Quadrature,  Prev: Nonlinear Equations,  Up: Top

Optimization
************

* Menu:

* Objective Functions::
* Bounds::
* Linear Constraints::
* Nonlinear Constraints::
* Quadratic Programming::
* Nonlinear Programming::


File: liboctave.info,  Node: Objective Functions,  Next: Bounds,  Prev: Optimization,  Up: Optimization

Objective Functions
===================

 - :  Objective (void)
 - :  Objective (const OBJECTIVE_FCN)
 - :  Objective (const OBJECTIVE_FCN, const GRADIENT_FCN)
 - :  Objective (const Objective &A)

 - : Objective& operator = (const Objective &A)

 - : objective_fcn objective_function (void) const;

 - : Objective& set_objective_function (const OBJECTIVE_FCN)

 - : gradient_fcn gradient_function (void) const;

 - : Objective& set_gradient_function (const GRADIENT_FCN)


File: liboctave.info,  Node: Bounds,  Next: Linear Constraints,  Prev: Objective Functions,  Up: Optimization

Bounds
======

 - :  Bounds (void)
 - :  Bounds (int N)
 - :  Bounds (const ColumnVector LB, const ColumnVector UB)
 - :  Bounds (const Bounds &A)

 - : Bounds& operator = (const Bounds &A)

 - : Bounds& resize (int N)

 - : double lower_bound (int INDEX) const;
 - : double upper_bound (int INDEX) const;

 - : ColumnVector lower_bounds (void) const;
 - : ColumnVector upper_bounds (void) const;

 - : int size (void) const;

 - : Bounds& set_bound (int INDEX, double LOW, double HIGH)

 - : Bounds& set_bounds (double LOW, double HIGH)
 - : Bounds& set_bounds (const ColumnVector LB, const ColumnVector UB)

 - : Bounds& set_lower_bound (int INDEX, double LOW)
 - : Bounds& set_upper_bound (int INDEX, double HIGH)

 - : Bounds& set_lower_bounds (double LOW)
 - : Bounds& set_upper_bounds (double HIGH)

 - : Bounds& set_lower_bounds (const ColumnVector LB)
 - : Bounds& set_upper_bounds (const ColumnVector UB)

 - : ostream& operator << (ostream &OS, const Bounds &B)


File: liboctave.info,  Node: Linear Constraints,  Next: Nonlinear Constraints,  Prev: Bounds,  Up: Optimization

Linear Constraints
==================

 - :  LinConst (void)
 - :  LinConst (int NCLIN, int NX)
 - :  LinConst (int NCLIN_EQ, int NCLIN_INEQ, int NX)
 - :  LinConst (const ColumnVector &LB, const Matrix &A, const
          ColumnVector &UB)
 - :  LinConst (const Matrix &A_EQ, const ColumnVector &B_EQ, const
          Matrix &A_INEQ, const ColumnVector &B_INEQ)
 - :  LinConst (const LinConst &A)

 - : LinConst& operator = (const LinConst &A)

 - : LinConst& resize (int NCLIN, int N)

 - : Matrix constraint_matrix (void) const;

 - : LinConst& set_constraint_matrix (const Matrix &A)

 - : Matrix eq_constraint_matrix (void) const;
 - : Matrix ineq_constraint_matrix (void) const;

 - : ColumnVector eq_constraint_vector (void) const;
 - : ColumnVector ineq_constraint_vector (void) const;

 - : ostream& operator << (ostream &OS, const LinConst &B)


File: liboctave.info,  Node: Nonlinear Constraints,  Next: Quadratic Programming,  Prev: Linear Constraints,  Up: Optimization

Nonlinear Constraints
=====================

 - :  NLConst (void)
 - :  NLConst (int N)
 - :  NLConst (const ColumnVector LB, const NLFunc F, const
          ColumnVector UB)
 - :  NLConst (const NLConst &A)

 - : NLConst& operator = (const NLConst &A)


File: liboctave.info,  Node: Quadratic Programming,  Next: Nonlinear Programming,  Prev: Nonlinear Constraints,  Up: Optimization

Quadratic Programming
=====================

 - :  QP (void)
 - :  QP (const ColumnVector &X, const Matrix &H)
 - :  QP (const ColumnVector &X, const Matrix &H, const ColumnVector &C)
 - :  QP (const ColumnVector &X, const Matrix &H, const Bounds &B)
 - :  QP (const ColumnVector &X, const Matrix &H, const LinConst &LC)
 - :  QP (const ColumnVector &X, const Matrix &H, const ColumnVector
          &C, const Bounds &B)
 - :  QP (const ColumnVector &X, const Matrix &H, const ColumnVector
          &C, const LinConst &LC)
 - :  QP (const ColumnVector &X, const Matrix &H, const Bounds &B,
          const LinConst &LC)
 - :  QP (const ColumnVector &X, const Matrix &H, const ColumnVector
          &C, const Bounds &B, const LinConst &LC)

 - : virtual ColumnVector minimize (void)
 - : virtual ColumnVector minimize (double &OBJF)
 - : virtual ColumnVector minimize (double &OBJF, int &INFORM)
 - : virtual ColumnVector minimize (double &OBJF, int &INFORM,
          ColumnVector &LAMBDA) = 0;

 - : virtual ColumnVector minimize (const ColumnVector &X)
 - : virtual ColumnVector minimize (const ColumnVector &X, double &OBJF)
 - : virtual ColumnVector minimize (const ColumnVector &X, double
          &OBJF, int &INFORM)
 - : virtual ColumnVector minimize (const ColumnVector &X, double
          &OBJF, int &INFORM, ColumnVector &LAMBDA)

 - : ColumnVector minimize (double &OBJF, int &INFORM, ColumnVector
          &LAMBDA)


File: liboctave.info,  Node: Nonlinear Programming,  Prev: Quadratic Programming,  Up: Optimization

Nonlinear Programming
=====================

 - :  NLP (void)
 - :  NLP (const ColumnVector &X, const Objective &PHI)
 - :  NLP (const ColumnVector &X, const Objective &PHI, const Bounds &B)
 - :  NLP (const ColumnVector &X, const Objective &PHI, const Bounds
          &B, const LinConst &LC)
 - :  NLP (const ColumnVector &X, const Objective &PHI, const Bounds
          &B, const LinConst &LC, const NLConst &NLC)
 - :  NLP (const ColumnVector &X, const Objective &PHI, const LinConst
          &LC)
 - :  NLP (const ColumnVector &X, const Objective &PHI, const LinConst
          &LC, const NLConst &NLC)
 - :  NLP (const ColumnVector &X, const Objective &PHI, const NLConst
          &NLC)
 - :  NLP (const ColumnVector &X, const Objective &PHI, const Bounds
          &B, const NLConst &NLC)

 - : NLP& operator = (const NLP &A)

 - : int size (void) const

 - : ColumnVector minimize (void)
 - : ColumnVector minimize (double &OBJF)
 - : ColumnVector minimize (double &OBJF, int &INFORM)
 - : ColumnVector minimize (double &OBJF, int &INFORM, ColumnVector
          &LAMBDA)

 - : ColumnVector minimize (const ColumnVector &X)
 - : ColumnVector minimize (const ColumnVector &X, double &OBJF)
 - : ColumnVector minimize (const ColumnVector &X, double &OBJF, int
          &INFORM)
 - : ColumnVector minimize (const ColumnVector &X, double &OBJF, int
          &INFORM, ColumnVector &LAMBDA)


File: liboctave.info,  Node: Quadrature,  Next: Ordinary Differential Equations,  Prev: Optimization,  Up: Top

Quadrature
**********

 - :  Quad (integrand_fcn FCN)
 - :  Quad (integrand_fcn FCN, double ABS, double REL)

 - : virtual double integrate (void)
 - : virtual double integrate (int &IER)
 - : virtual double integrate (int &IER, int &NEVAL)
 - : virtual double integrate (int &IER, int &NEVAL, double &ABSERR) = 0

 - : Quad_options (void)
 - : Quad_options (const Quad_options &OPT)

 - : Quad_options& operator = (const Quad_options &OPT)

 - : void init (void)

 - : void copy (const Quad_options &OPT)

 - : void set_default_options (void)

 - : void set_absolute_tolerance (double VAL)

 - : void set_relative_tolerance (double VAL)

 - : double absolute_tolerance (void)
 - : double relative_tolerance (void)

 - :  DefQuad (integrand_fcn FCN)
 - :  DefQuad (integrand_fcn FCN, double LL, double UL)
 - :  DefQuad (integrand_fcn FCN, double LL, double UL, double ABS,
          double REL)
 - :  DefQuad (integrand_fcn FCN, double LL, double UL, const
          ColumnVector &SING)
 - :  DefQuad (integrand_fcn FCN, const ColumnVector &SING, double ABS,
          double REL)
 - :  DefQuad (integrand_fcn FCN, const ColumnVector &SING)
 - :  DefQuad (integrand_fcn FCN, double LL, double UL, const
          ColumnVector &SING, double ABS, double REL)

 - :  IndefQuad (integrand_fcn FCN)
 - :  IndefQuad (integrand_fcn FCN, double B, IntegralType T)
 - :  IndefQuad (integrand_fcn FCN, double B, IntegralType T, double
          ABS, double REL)
 - :  IndefQuad (integrand_fcn FCN, double ABS, double REL)

* Menu:

* Collocation Weights::


File: liboctave.info,  Node: Collocation Weights,  Prev: Quadrature,  Up: Quadrature

Collocation Weights
===================

 - :  CollocWt (void)
 - :  CollocWt (int N, int INC_L, int INC_R)
 - :  CollocWt (int N, int INC_L, int INC_R, double L, double R)
 - :  CollocWt (int N, double A, double B, int INC_L, int INC_R)
 - :  CollocWt (int N, int INC_L, int INC_R, double L, double R)
 - :  CollocWt (const CollocWt&)

 - : CollocWt& operator = (const CollocWt&)

 - : CollocWt& resize (int NCOL)

 - : CollocWt& add_left (void)
 - : CollocWt& add_right (void)

 - : CollocWt& delete_left (void)
 - : CollocWt& delete_right (void)

 - : CollocWt& set_left (double VAL)
 - : CollocWt& set_right (double VAL)

 - : CollocWt& set_alpha (double VAL)
 - : CollocWt& set_beta (double VAL)

 - : int ncol (void) const

 - : int left_included (void) const
 - : int right_included (void) const

 - : double left (void) const
 - : double right (void) const
 - : double width (void) const

 - : double alpha (void) const
 - : double beta (void) const

 - : ColumnVector roots (void)
 - : ColumnVector quad (void)
 - : ColumnVector quad_weights (void)

 - : Matrix first (void)
 - : Matrix second (void)

 - : ostream& operator << (ostream &OS, const CollocWt &C)


File: liboctave.info,  Node: Ordinary Differential Equations,  Next: Differential Algebraic Equations,  Prev: Quadrature,  Up: Top

Ordinary Differential Equations
*******************************

 - :  ODE_options (void)
 - :  ODE_options (const ODE_options &OPT)

 - : ODE_options& operator = (const ODE_options &OPT)

 - : void init (void)

 - : void copy (const ODE_options &OPT)

 - : void set_default_options (void)

 - : void set_absolute_tolerance (double VAL)

 - : void set_initial_step_size (double VAL)

 - : void set_maximum_step_size (double VAL)

 - : void set_minimum_step_size (double VAL)

 - : void set_relative_tolerance (double VAL)

 - : double absolute_tolerance (void)
 - : double initial_step_size (void)
 - : double maximum_step_size (void)
 - : double minimum_step_size (void)
 - : double relative_tolerance (void)

 - :  ODE (void)
 - :  ODE (int N)
 - :  ODE (const ColumnVector &STATE, double TIME, const ODEFunc &F)

 - : virtual int size (void) const

 - : virtual ColumnVector state (void) const

 - : virtual double time (void) const

 - : virtual void force_restart (void)

 - : virtual void initialize (const ColumnVector &X, double T)

 - : virtual void set_stop_time (double T)

 - : virtual void clear_stop_time (void)

 - : virtual ColumnVector integrate (double T)

 - : void integrate (int NSTEPS, double TSTEP, ostream &S)

 - : Matrix integrate (const ColumnVector &TOUT)
 - : Matrix integrate (const ColumnVector &TOUT, const ColumnVector
          &TCRIT)


File: liboctave.info,  Node: Differential Algebraic Equations,  Next: Error Handling,  Prev: Ordinary Differential Equations,  Up: Top

Differential Algebraic Equations
********************************

 - :  DAE (void)
 - :  DAE (int N)
 - :  DAE (const ColumnVector &X, double TIME, DAEFunc &F)
 - :  DAE (const ColumnVector &X, ColumnVector &XDOT, double TIME,
          DAEFunc &F)

 - : ColumnVector deriv (void)

 - : virtual void initialize (const ColumnVector &X, double T)
 - : virtual void initialize (const ColumnVector &X, ColumnVector
          &XDOT, double T)

 - : ColumnVector integrate (double T)

 - : Matrix integrate (const ColumnVector &TOUT, Matrix &XDOT_OUT)
 - : Matrix integrate (const ColumnVector &TOUT, Matrix &XDOT_OUT,
          const ColumnVector &TCRIT)


File: liboctave.info,  Node: Error Handling,  Next: Installation,  Prev: Differential Algebraic Equations,  Up: Top

Error Handling
**************


File: liboctave.info,  Node: Installation,  Next: Bugs,  Prev: Error Handling,  Up: Top

Installation
************


File: liboctave.info,  Node: Bugs,  Next: Concept Index,  Prev: Installation,  Up: Top

Bugs
****


File: liboctave.info,  Node: Concept Index,  Next: Function Index,  Prev: Bugs,  Up: Top

Concept Index
*************

* Menu:

* acknowledgements:                      Acknowledgements.
* arrays:                                Arrays.
* bounds:                                Bounds.
* bugs, known:                           Bugs.
* collocation weights:                   Collocation Weights.
* contributors:                          Contributors.
* copyright:                             Contributors.
* DAE:                                   Differential Algebraic Equations.
* factorizations:                        Matrix Factorizations.
* installation:                          Installation.
* installation trouble:                  Bugs.
* integration:                           Quadrature.
* introduction:                          Introduction.
* known causes of trouble:               Bugs.
* linear Constraints:                    Linear Constraints.
* matrix factorizations:                 Matrix Factorizations.
* matrix manipulations:                  Matrix and Vector Operations.
* NLP:                                   Nonlinear Programming.
* nonlinear Constraints:                 Nonlinear Constraints.
* nonlinear equations:                   Nonlinear Equations.
* nonlinear functions:                   Nonlinear Functions.
* nonlinear programming:                 Nonlinear Programming.
* numerical integration:                 Quadrature.
* objective functions:                   Objective Functions.
* ODE:                                   Ordinary Differential Equations.
* optimization:                          Optimization.
* orthogonal collocation:                Collocation Weights.
* QP:                                    Quadratic Programming.
* quadratic programming:                 Quadratic Programming.
* quadrature:                            Quadrature.
* ranges:                                Ranges.
* troubleshooting:                       Bugs.
* vector manipulations:                  Matrix and Vector Operations.
* warranty:                              Contributors.


File: liboctave.info,  Node: Function Index,  Prev: Concept Index,  Up: Top

Function Index
**************

* Menu:

* ( <1>:                                 Quadrature.
* (:                                     Matrix Factorizations.
* ( on DiagArray<T>&:                    Constructors and Assignment.
* absolute_tolerance <1>:                Ordinary Differential Equations.
* absolute_tolerance:                    Quadrature.
* add_left:                              Collocation Weights.
* add_right:                             Collocation Weights.
* AEPBALANCE:                            Matrix Factorizations.
* all:                                   Matrix and Vector Operations.
* alpha:                                 Collocation Weights.
* any:                                   Matrix and Vector Operations.
* append:                                Matrix and Vector Operations.
* Array2<T>:                             Constructors and Assignment.
* Array3<T>:                             Constructors and Assignment.
* Array<T>:                              Constructors and Assignment.
* balanced_a_matrix:                     Matrix Factorizations.
* balanced_b_matrix:                     Matrix Factorizations.
* balanced_matrix:                       Matrix Factorizations.
* balancing_matrix:                      Matrix Factorizations.
* base:                                  Ranges.
* beta:                                  Collocation Weights.
* Bounds:                                Bounds.
* capacity on Array<T>:                  Constructors and Assignment.
* checkelem on Array2<T>:                Constructors and Assignment.
* checkelem on Array3<T>:                Constructors and Assignment.
* checkelem on Array<T>:                 Constructors and Assignment.
* checkelem on DiagArray<T>:             Constructors and Assignment.
* CHOL:                                  Matrix Factorizations.
* chol_matrix:                           Matrix Factorizations.
* clear_stop_time:                       Ordinary Differential Equations.
* coefficient:                           Matrix Factorizations.
* CollocWt:                              Collocation Weights.
* cols on Array2<T>:                     Constructors and Assignment.
* cols on DiagArray<T>:                  Constructors and Assignment.
* column:                                Matrix and Vector Operations.
* column_max:                            Matrix and Vector Operations.
* column_max_loc:                        Matrix and Vector Operations.
* column_min:                            Matrix and Vector Operations.
* column_min_loc:                        Matrix and Vector Operations.
* columns on Array2<T>:                  Constructors and Assignment.
* columns on DiagArray<T>:               Constructors and Assignment.
* ColumnVector:                          Matrix and Vector Operations.
* ComplexCHOL:                           Matrix Factorizations.
* ComplexColumnVector:                   Matrix and Vector Operations.
* ComplexDET:                            Matrix Factorizations.
* ComplexDiagMatrix:                     Matrix and Vector Operations.
* ComplexHESS:                           Matrix Factorizations.
* ComplexLU:                             Matrix Factorizations.
* ComplexMatrix:                         Matrix and Vector Operations.
* ComplexQR:                             Matrix Factorizations.
* ComplexRowVector:                      Matrix and Vector Operations.
* ComplexSCHUR:                          Matrix Factorizations.
* ComplexSVD:                            Matrix Factorizations.
* conj:                                  Matrix and Vector Operations.
* constraint_matrix:                     Linear Constraints.
* copy <1>:                              Ordinary Differential Equations.
* copy <2>:                              Quadrature.
* copy:                                  Nonlinear Equations.
* cumprod:                               Matrix and Vector Operations.
* cumsum:                                Matrix and Vector Operations.
* DAE:                                   Differential Algebraic Equations.
* data on Array<T>:                      Constructors and Assignment.
* DefQuad:                               Quadrature.
* delete_left:                           Collocation Weights.
* delete_right:                          Collocation Weights.
* deriv:                                 Differential Algebraic Equations.
* DET:                                   Matrix Factorizations.
* determinant:                           Matrix and Vector Operations.
* diag:                                  Matrix and Vector Operations.
* DiagArray<T>:                          Constructors and Assignment.
* DiagMatrix:                            Matrix and Vector Operations.
* dim1 on Array2<T>:                     Constructors and Assignment.
* dim1 on Array3<T>:                     Constructors and Assignment.
* dim1 on DiagArray<T>:                  Constructors and Assignment.
* dim2 on Array2<T>:                     Constructors and Assignment.
* dim2 on Array3<T>:                     Constructors and Assignment.
* dim2 on DiagArray<T>:                  Constructors and Assignment.
* dim3 on Array3<T>:                     Constructors and Assignment.
* EIG:                                   Matrix Factorizations.
* eigenvalues:                           Matrix Factorizations.
* eigenvectors:                          Matrix Factorizations.
* elem on Array2<T>:                     Constructors and Assignment.
* elem on Array3<T>:                     Constructors and Assignment.
* elem on Array<T>:                      Constructors and Assignment.
* elem on DiagArray<T>:                  Constructors and Assignment.
* eq_constraint_matrix:                  Linear Constraints.
* eq_constraint_vector:                  Linear Constraints.
* exponent:                              Matrix Factorizations.
* extract:                               Matrix and Vector Operations.
* fill:                                  Matrix and Vector Operations.
* first:                                 Collocation Weights.
* force_restart:                         Ordinary Differential Equations.
* fourier:                               Matrix and Vector Operations.
* function:                              Nonlinear Functions.
* GEPBALANCE:                            Matrix Factorizations.
* gradient_function:                     Objective Functions.
* HESS:                                  Matrix Factorizations.
* hess_matrix:                           Matrix Factorizations.
* ifourier:                              Matrix and Vector Operations.
* imag:                                  Matrix and Vector Operations.
* inc:                                   Ranges.
* IndefQuad:                             Quadrature.
* ineq_constraint_matrix:                Linear Constraints.
* ineq_constraint_vector:                Linear Constraints.
* init <1>:                              Ordinary Differential Equations.
* init <2>:                              Quadrature.
* init:                                  Nonlinear Equations.
* initial_step_size:                     Ordinary Differential Equations.
* initialize <1>:                        Differential Algebraic Equations.
* initialize:                            Ordinary Differential Equations.
* insert:                                Matrix and Vector Operations.
* integrate <1>:                         Differential Algebraic Equations.
* integrate <2>:                         Ordinary Differential Equations.
* integrate:                             Quadrature.
* inverse:                               Matrix and Vector Operations.
* jacobian_function:                     Nonlinear Functions.
* L:                                     Matrix Factorizations.
* left:                                  Collocation Weights.
* left_balancing_matrix:                 Matrix Factorizations.
* left_included:                         Collocation Weights.
* left_singular_matrix:                  Matrix Factorizations.
* length on Array<T>:                    Constructors and Assignment.
* limit:                                 Ranges.
* LinConst:                              Linear Constraints.
* lower_bound:                           Bounds.
* lower_bounds:                          Bounds.
* lssolve:                               Matrix and Vector Operations.
* LU:                                    Matrix Factorizations.
* map:                                   Matrix and Vector Operations.
* Matrix:                                Matrix and Vector Operations.
* max <1>:                               Ranges.
* max:                                   Matrix and Vector Operations.
* maximum_step_size:                     Ordinary Differential Equations.
* min <1>:                               Ranges.
* min:                                   Matrix and Vector Operations.
* minimize <1>:                          Nonlinear Programming.
* minimize:                              Quadratic Programming.
* minimum_step_size:                     Ordinary Differential Equations.
* ncol:                                  Collocation Weights.
* nelem:                                 Ranges.
* NLConst:                               Nonlinear Constraints.
* NLEqn:                                 Nonlinear Equations.
* NLEqn_options:                         Nonlinear Equations.
* NLFunc:                                Nonlinear Functions.
* NLP:                                   Nonlinear Programming.
* Objective:                             Objective Functions.
* objective_function:                    Objective Functions.
* ODE:                                   Ordinary Differential Equations.
* ODE_options:                           Ordinary Differential Equations.
* operator !:                            Matrix and Vector Operations.
* operator !=:                           Matrix and Vector Operations.
* operator () on Array2<T>:              Constructors and Assignment.
* operator () on Array3<T>:              Constructors and Assignment.
* operator () on Array<T>:               Constructors and Assignment.
* operator () on DiagArray<T>:           Constructors and Assignment.
* operator * <1>:                        Matrix and Vector Operations.
* operator *:                            Constructors and Assignment.
* operator + <1>:                        Matrix and Vector Operations.
* operator +:                            Constructors and Assignment.
* operator +=:                           Matrix and Vector Operations.
* operator - <1>:                        Matrix and Vector Operations.
* operator -:                            Constructors and Assignment.
* operator -=:                           Matrix and Vector Operations.
* operator / <1>:                        Matrix and Vector Operations.
* operator /:                            Constructors and Assignment.
* operator << <1>:                       Collocation Weights.
* operator << <2>:                       Linear Constraints.
* operator << <3>:                       Bounds.
* operator << <4>:                       Ranges.
* operator << <5>:                       Matrix Factorizations.
* operator <<:                           Matrix and Vector Operations.
* operator = <1>:                        Ordinary Differential Equations.
* operator = <2>:                        Collocation Weights.
* operator = <3>:                        Quadrature.
* operator = <4>:                        Nonlinear Programming.
* operator = <5>:                        Nonlinear Constraints.
* operator = <6>:                        Linear Constraints.
* operator = <7>:                        Bounds.
* operator = <8>:                        Objective Functions.
* operator = <9>:                        Nonlinear Equations.
* operator = <10>:                       Nonlinear Functions.
* operator = <11>:                       Matrix Factorizations.
* operator =:                            Matrix and Vector Operations.
* operator = on Array2<T>:               Constructors and Assignment.
* operator = on Array3<T>:               Constructors and Assignment.
* operator = on Array<T>:                Constructors and Assignment.
* operator ==:                           Matrix and Vector Operations.
* operator >> <1>:                       Ranges.
* operator >>:                           Matrix and Vector Operations.
* P:                                     Matrix Factorizations.
* print_range:                           Ranges.
* prod:                                  Matrix and Vector Operations.
* product <1>:                           Matrix and Vector Operations.
* product:                               Constructors and Assignment.
* Q:                                     Matrix Factorizations.
* QP:                                    Quadratic Programming.
* QR:                                    Matrix Factorizations.
* quad:                                  Collocation Weights.
* Quad:                                  Quadrature.
* quad_weights:                          Collocation Weights.
* quotient <1>:                          Matrix and Vector Operations.
* quotient:                              Constructors and Assignment.
* R:                                     Matrix Factorizations.
* Range:                                 Ranges.
* real:                                  Matrix and Vector Operations.
* relative_tolerance <1>:                Ordinary Differential Equations.
* relative_tolerance:                    Quadrature.
* resize <1>:                            Collocation Weights.
* resize <2>:                            Linear Constraints.
* resize <3>:                            Bounds.
* resize:                                Nonlinear Equations.
* resize on Array2<T>:                   Constructors and Assignment.
* resize on Array3<T>:                   Constructors and Assignment.
* resize on Array<T>:                    Constructors and Assignment.
* resize on DiagArray<T>:                Constructors and Assignment.
* right:                                 Collocation Weights.
* right_balancing_matrix:                Matrix Factorizations.
* right_included:                        Collocation Weights.
* right_singular_matrix:                 Matrix Factorizations.
* roots:                                 Collocation Weights.
* row:                                   Matrix and Vector Operations.
* row_max:                               Matrix and Vector Operations.
* row_max_loc:                           Matrix and Vector Operations.
* row_min:                               Matrix and Vector Operations.
* row_min_loc:                           Matrix and Vector Operations.
* rows on Array2<T>:                     Constructors and Assignment.
* rows on DiagArray<T>:                  Constructors and Assignment.
* RowVector:                             Matrix and Vector Operations.
* SCHUR:                                 Matrix Factorizations.
* schur_matrix:                          Matrix Factorizations.
* second:                                Collocation Weights.
* set_absolute_tolerance <1>:            Ordinary Differential Equations.
* set_absolute_tolerance:                Quadrature.
* set_alpha:                             Collocation Weights.
* set_base:                              Ranges.
* set_beta:                              Collocation Weights.
* set_bound:                             Bounds.
* set_bounds:                            Bounds.
* set_constraint_matrix:                 Linear Constraints.
* set_default_options <1>:               Ordinary Differential Equations.
* set_default_options <2>:               Quadrature.
* set_default_options:                   Nonlinear Equations.
* set_function:                          Nonlinear Functions.
* set_gradient_function:                 Objective Functions.
* set_inc:                               Ranges.
* set_initial_step_size:                 Ordinary Differential Equations.
* set_jacobian_function:                 Nonlinear Functions.
* set_left:                              Collocation Weights.
* set_limit:                             Ranges.
* set_lower_bound:                       Bounds.
* set_lower_bounds:                      Bounds.
* set_maximum_step_size:                 Ordinary Differential Equations.
* set_minimum_step_size:                 Ordinary Differential Equations.
* set_objective_function:                Objective Functions.
* set_relative_tolerance <1>:            Ordinary Differential Equations.
* set_relative_tolerance:                Quadrature.
* set_right:                             Collocation Weights.
* set_states:                            Nonlinear Equations.
* set_stop_time:                         Ordinary Differential Equations.
* set_tolerance:                         Nonlinear Equations.
* set_upper_bound:                       Bounds.
* set_upper_bounds:                      Bounds.
* singular_values:                       Matrix Factorizations.
* size <1>:                              Ordinary Differential Equations.
* size <2>:                              Nonlinear Programming.
* size <3>:                              Bounds.
* size:                                  Nonlinear Equations.
* solve <1>:                             Nonlinear Equations.
* solve:                                 Matrix and Vector Operations.
* sort:                                  Ranges.
* stack:                                 Matrix and Vector Operations.
* state:                                 Ordinary Differential Equations.
* states:                                Nonlinear Equations.
* sum:                                   Matrix and Vector Operations.
* sumsq:                                 Matrix and Vector Operations.
* SVD:                                   Matrix Factorizations.
* time:                                  Ordinary Differential Equations.
* tolerance:                             Nonlinear Equations.
* transpose:                             Matrix and Vector Operations.
* U:                                     Matrix Factorizations.
* unitary_hess_matrix:                   Matrix Factorizations.
* unitary_matrix:                        Matrix Factorizations.
* upper_bound:                           Bounds.
* upper_bounds:                          Bounds.
* value:                                 Matrix Factorizations.
* value_will_overflow:                   Matrix Factorizations.
* value_will_underflow:                  Matrix Factorizations.
* width:                                 Collocation Weights.
* xelem on Array<T>:                     Constructors and Assignment.



Tag Table:
Node: Top691
Node: Acknowledgements1684
Node: Contributors1896
Node: Copying2196
Node: Introduction21406
Node: Arrays21653
Node: Constructors and Assignment21817
Node: Matrix and Vector Operations30054
Node: Matrix Factorizations61047
Node: Ranges67254
Node: Nonlinear Functions67931
Node: Nonlinear Equations68466
Node: Optimization69377
Node: Objective Functions69652
Node: Bounds70232
Node: Linear Constraints71318
Node: Nonlinear Constraints72288
Node: Quadratic Programming72672
Node: Nonlinear Programming74238
Node: Quadrature75739
Node: Collocation Weights77401
Node: Ordinary Differential Equations78660
Node: Differential Algebraic Equations80165
Node: Error Handling80955
Node: Installation81105
Node: Bugs81223
Node: Concept Index81324
Node: Function Index83448

End Tag Table
