// DO NOT EDIT!  Generated automatically by mkgendoc

#include <iostream>
#include <string>

#define XDEFUN_DLD_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc) \
  print_doc_string (#name, doc);

#define XDEFUN_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc) \
  print_doc_string (#name, doc);

#define XDEFUNX_INTERNAL(name, fname, args_name, nargout_name, \
			 is_text_fcn, doc) \
  print_doc_string (name, doc);

#define XDEFALIAS_INTERNAL(alias, name)

#define XDEFVAR_INTERNAL(name, sname, defn, protect, chg_fcn, doc) \
  print_doc_string (#name, doc);

#define XDEFCONST_INTERNAL(name, defn, doc) \
  print_doc_string (#name, doc);

#define XDEFUN_MAPPER_INTERNAL(name, ch_map, d_b_map, c_b_map, d_d_map, \
			       d_c_map, c_c_map, lo, hi, \
			       can_ret_cmplx_for_real, doc) \
  print_doc_string (#name, doc);

static void
print_doc_string (const std::string& name, const std::string& doc)
{
  std::cout << "";

  size_t len = name.length ();

  if (name[0] == '"' && name[len-1] == '"')
    std::cout << name.substr (1, len-2);
  else
    std::cout << name;

  std::cout << "\n" << doc << "\n";
}

static void
print_balance_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (balance, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {@var{aa} =} balance (@var{a}, @var{opt})\n@deftypefnx {Loadable Function} {[@var{dd}, @var{aa}] =} balance (@var{a}, @var{opt})\n@deftypefnx {Loadable Function} {[@var{cc}, @var{dd}, @var{aa}, @var{bb}] =} balance (@var{a}, @var{b}, @var{opt})\n\n@code{[dd, aa] = balance (a)} returns @code{aa = dd \\ a * dd}.\n@code{aa} is a matrix whose row and column norms are roughly equal in\nmagnitude, and @code{dd} = @code{p * d}, where @code{p} is a permutation\nmatrix and @code{d} is a diagonal matrix of powers of two.  This allows\nthe equilibration to be computed without roundoff.  Results of\neigenvalue calculation are typically improved by balancing first.\n\n@code{[cc, dd, aa, bb] = balance (a, b)} returns @code{aa = cc*a*dd} and\n@code{bb = cc*b*dd)}, where @code{aa} and @code{bb} have non-zero\nelements of approximately the same magnitude and @code{cc} and @code{dd}\nare permuted diagonal matrices as in @code{dd} for the algebraic\neigenvalue problem.\n\nThe eigenvalue balancing option @code{opt} is selected as follows:\n\n@table @asis\n@item @code{\"N\"}, @code{\"n\"}\nNo balancing; arguments copied, transformation(s) set to identity.\n\n@item @code{\"P\"}, @code{\"p\"}\nPermute argument(s) to isolate eigenvalues where possible.\n\n@item @code{\"S\"}, @code{\"s\"}\nScale to improve accuracy of computed eigenvalues.\n\n@item @code{\"B\"}, @code{\"b\"}\nPermute and scale, in that order. Rows/columns of a (and b)\nthat are isolated by permutation are not scaled.  This is the default\nbehavior.\n@end table\n\nAlgebraic eigenvalue balancing uses standard @sc{Lapack} routines.\n\nGeneralized eigenvalue problem balancing uses Ward's algorithm\n(SIAM Journal on Scientific and Statistical Computing, 1981).\n@end deftypefn") 
}

static void
print_besselj_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (besselj, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{j}, @var{ierr}] =} besselj (@var{alpha}, @var{x}, @var{opt})\n@deftypefnx {Loadable Function} {[@var{y}, @var{ierr}] =} bessely (@var{alpha}, @var{x}, @var{opt})\n@deftypefnx {Loadable Function} {[@var{i}, @var{ierr}] =} besseli (@var{alpha}, @var{x}, @var{opt})\n@deftypefnx {Loadable Function} {[@var{k}, @var{ierr}] =} besselk (@var{alpha}, @var{x}, @var{opt})\n@deftypefnx {Loadable Function} {[@var{h}, @var{ierr}] =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})\nCompute Bessel or Hankel functions of various kinds:\n\n@table @code\n@item besselj\nBessel functions of the first kind.\n@item bessely\nBessel functions of the second kind.\n@item besseli\nModified Bessel functions of the first kind.\n@item besselk\nModified Bessel functions of the second kind.\n@item besselh\nCompute Hankel functions of the first (@var{k} = 1) or second (@var{k}\n = 2) kind.\n@end table\n\nIf the argument @var{opt} is supplied, the result is scaled by the\n@code{exp (-I*@var{x})} for @var{k} = 1 or @code{exp (I*@var{x})} for\n @var{k} = 2.\n\nIf @var{alpha} is a scalar, the result is the same size as @var{x}.\nIf @var{x} is a scalar, the result is the same size as @var{alpha}.\nIf @var{alpha} is a row vector and @var{x} is a column vector, the\nresult is a matrix with @code{length (@var{x})} rows and\n@code{length (@var{alpha})} columns.  Otherwise, @var{alpha} and\n@var{x} must conform and the result will be the same size.\n\nThe value of @var{alpha} must be real.  The value of @var{x} may be\ncomplex.\n\nIf requested, @var{ierr} contains the following status information\nand is the same size as the result.\n\n@enumerate 0\n@item\nNormal return.\n@item\nInput error, return @code{NaN}.\n@item\nOverflow, return @code{Inf}.\n@item\nLoss of significance by argument reduction results in less than\nhalf of machine accuracy.\n@item\nComplete loss of significance by argument reduction, return @code{NaN}.\n@item\nError---no computation, algorithm termination condition not met,\nreturn @code{NaN}.\n@end enumerate\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (bessely, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{y}, @var{ierr}] =} bessely (@var{alpha}, @var{x}, @var{opt})\nSee besselj.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (besseli, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{i}, @var{ierr}] =} besseli (@var{alpha}, @var{x}, @var{opt})\nSee besselj.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (besselk, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{k}, @var{ierr}] =} besselk (@var{alpha}, @var{x}, @var{opt})\nSee besselj.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (besselh, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{h}, @var{ierr}] =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})\nSee besselj.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (airy, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{a}, @var{ierr}] =} airy (@var{k}, @var{z}, @var{opt})\nCompute Airy functions of the first and second kind, and their\nderivatives.\n\n@example\n  K   Function   Scale factor (if a third argument is supplied)\n ---  --------   ----------------------------------------------\n  0   Ai (Z)     exp ((2/3) * Z * sqrt (Z))\n  1   dAi(Z)/dZ  exp ((2/3) * Z * sqrt (Z))\n  2   Bi (Z)     exp (-abs (real ((2/3) * Z *sqrt (Z))))\n  3   dBi(Z)/dZ  exp (-abs (real ((2/3) * Z *sqrt (Z))))\n@end example\n\nThe function call @code{airy (@var{z})} is equivalent to\n@code{airy (0, @var{z})}.\n\nThe result is the same size as @var{z}.\n\nIf requested, @var{ierr} contains the following status information and\nis the same size as the result.\n\n@enumerate 0\n@item\nNormal return.\n@item\nInput error, return @code{NaN}.\n@item\nOverflow, return @code{Inf}.\n@item\nLoss of significance by argument reduction results in less than half\n of machine accuracy.\n@item\nComplete loss of significance by argument reduction, return @code{NaN}.\n@item\nError---no computation, algorithm termination condition not met,\nreturn @code{NaN}\n@end enumerate\n@end deftypefn") 
}

static void
print_betainc_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (betainc, args,, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} betainc (@var{x}, @var{a}, @var{b})\nReturn the incomplete Beta function,\n@iftex\n@tex\n$$\n \\beta (a, b, x) = B (a, b)^{-1} \\int_0^x t^{(a-z)} (1-t)^{(b-1)} dt.\n$$\n@end tex\n@end iftex\n@ifinfo\n\n@smallexample\n                                    x\n                                   /\nbetai (a, b, x) = beta (a, b)^(-1) | t^(a-1) (1-t)^(b-1) dt.\n                                   /\n                                t=0\n@end smallexample\n@end ifinfo\n\nIf x has more than one component, both @var{a} and @var{b} must be\nscalars.  If @var{x} is a scalar, @var{a} and @var{b} must be of\ncompatible dimensions.\n@end deftypefn") 
}

static void
print_chol_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (chol, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} chol (@var{a})\n@cindex Cholesky factorization\nCompute the Cholesky factor, @var{r}, of the symmetric positive definite\nmatrix @var{a}, where\n@iftex\n@tex\n$ R^T R = A $.\n@end tex\n@end iftex\n@ifinfo\n\n@example\nr' * r = a.\n@end example\n@end ifinfo\n@end deftypefn") 
}

static void
print_colloc_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (colloc, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{r}, @var{amat}, @var{bmat}, @var{q}] =} colloc (@var{n}, \"left\", \"right\")\nCompute derivative and integral weight matrices for orthogonal\ncollocation using the subroutines given in J. Villadsen and\nM. L. Michelsen, @cite{Solution of Differential Equation Models by\nPolynomial Approximation}.\n@end deftypefn") 
}

static void
print_daspk_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (daspk, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{x}, @var{xdot}] =} daspk (@var{fcn}, @var{x0}, @var{xdot0}, @var{t}, @var{t_crit})\nReturn a matrix of states and their first derivatives with respect to\n@var{t}.  Each row in the result matrices correspond to one of the\nelements in the vector @var{t}.  The first element of @var{t}\ncorresponds to the initial state @var{x0} and derivative @var{xdot0}, so\nthat the first row of the output @var{x} is @var{x0} and the first row\nof the output @var{xdot} is @var{xdot0}.\n\nThe first argument, @var{fcn}, is a string that names the function to\ncall to compute the vector of residuals for the set of equations.\nIt must have the form\n\n@example\n@var{res} = f (@var{x}, @var{xdot}, @var{t})\n@end example\n\n@noindent\nwhere @var{x}, @var{xdot}, and @var{res} are vectors, and @var{t} is a\nscalar.\n\nThe second and third arguments to @code{daspk} specify the initial\ncondition of the states and their derivatives, and the fourth argument\nspecifies a vector of output times at which the solution is desired, \nincluding the time corresponding to the initial condition.\n\nThe set of initial states and derivatives are not strictly required to\nbe consistent.  In practice, however, @sc{Dassl} is not very good at\ndetermining a consistent set for you, so it is best if you ensure that\nthe initial values result in the function evaluating to zero.\n\nThe fifth argument is optional, and may be used to specify a set of\ntimes that the DAE solver should not integrate past.  It is useful for\navoiding difficulties with singularities and points where there is a\ndiscontinuity in the derivative.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (daspk_options, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} daspk_options (@var{opt}, @var{val})\nWhen called with two arguments, this function allows you set options\nparameters for the function @code{lsode}.  Given one argument,\n@code{daspk_options} returns the value of the corresponding option.  If\nno arguments are supplied, the names of all the available options and\ntheir current values are displayed.\n@end deftypefn") 
}

static void
print_dassl_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (dassl, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{x}, @var{xdot}] =} dassl (@var{fcn}, @var{x0}, @var{xdot0}, @var{t}, @var{t_crit})\nReturn a matrix of states and their first derivatives with respect to\n@var{t}.  Each row in the result matrices correspond to one of the\nelements in the vector @var{t}.  The first element of @var{t}\ncorresponds to the initial state @var{x0} and derivative @var{xdot0}, so\nthat the first row of the output @var{x} is @var{x0} and the first row\nof the output @var{xdot} is @var{xdot0}.\n\nThe first argument, @var{fcn}, is a string that names the function to\ncall to compute the vector of residuals for the set of equations.\nIt must have the form\n\n@example\n@var{res} = f (@var{x}, @var{xdot}, @var{t})\n@end example\n\n@noindent\nwhere @var{x}, @var{xdot}, and @var{res} are vectors, and @var{t} is a\nscalar.\n\nThe second and third arguments to @code{dassl} specify the initial\ncondition of the states and their derivatives, and the fourth argument\nspecifies a vector of output times at which the solution is desired, \nincluding the time corresponding to the initial condition.\n\nThe set of initial states and derivatives are not strictly required to\nbe consistent.  In practice, however, @sc{Dassl} is not very good at\ndetermining a consistent set for you, so it is best if you ensure that\nthe initial values result in the function evaluating to zero.\n\nThe fifth argument is optional, and may be used to specify a set of\ntimes that the DAE solver should not integrate past.  It is useful for\navoiding difficulties with singularities and points where there is a\ndiscontinuity in the derivative.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (dassl_options, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} dassl_options (@var{opt}, @var{val})\nWhen called with two arguments, this function allows you set options\nparameters for the function @code{lsode}.  Given one argument,\n@code{dassl_options} returns the value of the corresponding option.  If\nno arguments are supplied, the names of all the available options and\ntheir current values are displayed.\n@end deftypefn") 
}

static void
print_data_doc_strings (void)
{
 XDEFUN_INTERNAL (all, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} all (@var{x})\nThe function @code{all} behaves like the function @code{any}, except\nthat it returns true only if all the elements of a vector, or all the\nelements in a column of a matrix, are nonzero.\n@end deftypefn") 
 XDEFUN_INTERNAL (any, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} any (@var{x})\nFor a vector argument, return 1 if any element of the vector is\nnonzero.\n\nFor a matrix argument, return a row vector of ones and\nzeros with each element indicating whether any of the elements of the\ncorresponding column of the matrix are nonzero.  For example,\n\n@example\n@group\nany (eye (2, 4))\n     @result{} [ 1, 1, 0, 0 ]\n@end group\n@end example\n\nTo see if any of the elements of a matrix are nonzero, you can use a\nstatement like\n\n@example\nany (any (a))\n@end example\n@end deftypefn") 
 XDEFUN_INTERNAL (atan2, args,, false, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} atan2 (@var{y}, @var{x})\nCompute atan (@var{y} / @var{x}) for corresponding elements of @var{y}\nand @var{x}.  The result is in range -pi to pi.\n@end deftypefn") 
 XDEFUN_INTERNAL (cumprod, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} cumprod (@var{x}, @var{dim})\nCumulative product of elements along dimension @var{dim}.  If\n@var{dim} is omitted, it defaults to 1 (column-wise cumulative\nproducts).\n@end deftypefn") 
 XDEFUN_INTERNAL (cumsum, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} cumsum (@var{x}, @var{dim})\nCumulative sum of elements along dimension @var{dim}.  If @var{dim}\nis omitted, it defaults to 1 (column-wise cumulative sums).\n@end deftypefn") 
 XDEFUN_INTERNAL (diag, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} diag (@var{v}, @var{k})\nReturn a diagonal matrix with vector @var{v} on diagonal @var{k}.  The\nsecond argument is optional.  If it is positive, the vector is placed on\nthe @var{k}-th super-diagonal.  If it is negative, it is placed on the\n@var{-k}-th sub-diagonal.  The default value of @var{k} is 0, and the\nvector is placed on the main diagonal.  For example,\n\n@example\n@group\ndiag ([1, 2, 3], 1)\n     @result{}  0  1  0  0\n         0  0  2  0\n         0  0  0  3\n         0  0  0  0\n@end group\n@end example\n@end deftypefn") 
 XDEFUN_INTERNAL (prod, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} prod (@var{x}, @var{dim})\nProduct of elements along dimension @var{dim}.  If @var{dim} is\nomitted, it defaults to 1 (column-wise products).\n@end deftypefn") 
 XDEFUN_INTERNAL (length, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} length (@var{a})\nReturn the `lenghth' of the object @var{a}.  For matrix objects, the\nlength is the number of rows or columns, whichever is greater (this\nodd definition is used for compatibility with Matlab).\n@end deftypefn") 
 XDEFUN_INTERNAL (size, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} size (@var{a}, @var{n})\nReturn the number rows and columns of @var{a}.\n\nWith one input argument and one output argument, the result is returned\nin a 2 element row vector.  If there are two output arguments, the\nnumber of rows is assigned to the first, and the number of columns to\nthe second.  For example,\n\n@example\n@group\nsize ([1, 2; 3, 4; 5, 6])\n     @result{} [ 3, 2 ]\n\n[nr, nc] = size ([1, 2; 3, 4; 5, 6])\n     @result{} nr = 3\n     @result{} nc = 2\n@end group\n@end example\n\nIf given a second argument of either 1 or 2, @code{size} will return\nonly the row or column dimension.  For example\n\n@example\nsize ([1, 2; 3, 4; 5, 6], 2)\n     @result{} 2\n@end example\n\n@noindent\nreturns the number of columns in the given matrix.\n@end deftypefn") 
 XDEFUN_INTERNAL (sum, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} sum (@var{x}, @var{dim})\nSum of elements along dimension @var{dim}.  If @var{dim} is\nomitted, it defaults to 1 (column-wise sum).\n@end deftypefn") 
 XDEFUN_INTERNAL (sumsq, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} sumsq (@var{x}, @var{dim})\nSum of squares of elements along dimension @var{dim}.  If @var{dim}\nis omitted, it defaults to 1 (column-wise sum of squares).\n\nThis function is equivalent to computing\n@example\nsum (x .* conj (x), dim)\n@end example\nbut it uses less memory and avoids calling conj if @var{x} is real.\n@end deftypefn") 
 XDEFUN_INTERNAL (is_bool, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Functio} {} is_bool (@var{x})\nReturn true if @var{x} is a boolean object.\n@end deftypefn") 
 XDEFALIAS_INTERNAL(islogical, is_bool) ;
 XDEFUN_INTERNAL (is_complex, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} is_complex (@var{x})\nReturn true if @var{x} is a complex-valued numeric object.\n@end deftypefn") 
 XDEFUN_INTERNAL (isreal, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} isreal (@var{x})\nReturn true if @var{x} is a real-valued numeric object.\n@end deftypefn") 
 XDEFUN_INTERNAL (isempty, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} isempty (@var{a})\nReturn 1 if @var{a} is an empty matrix (either the number of rows, or\nthe number of columns, or both are zero).  Otherwise, return 0.\n@end deftypefn") 
 XDEFUN_INTERNAL (isnumeric, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} isnumeric (@var{x})\nReturn nonzero if @var{x} is a numeric object.\n@end deftypefn") 
 XDEFUN_INTERNAL (is_list, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} is_list (@var{x})\nReturn nonzero if @var{x} is a list.\n@end deftypefn") 
 XDEFUN_INTERNAL (is_matrix, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} is_matrix (@var{a})\nReturn 1 if @var{a} is a matrix.  Otherwise, return 0.\n@end deftypefn") 
 XDEFUN_INTERNAL (is_struct, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} is_struct (@var{expr})\nReturn 1 if the value of the expression @var{expr} is a structure.\n@end deftypefn") 
 XDEFUN_INTERNAL (struct_elements, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} struct_elements (@var{struct})\nReturn a list of strings naming the elements of the structure\n@var{struct}.  It is an error to call @code{struct_elements} with an\nargument that is not a structure.\n@end deftypefn") 
 XDEFUN_INTERNAL (struct_contains, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} struct_contains (@var{expr}, @var{name})\nReturn 1 if the expression @var{expr} is a structure and it includes an\nelement named @var{name}.  The first argument must be a structure and\nthe second must be a string.\n@end deftypefn") 
 XDEFUN_INTERNAL (ones, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} ones (@var{x})\n@deftypefnx {Built-in Function} {} ones (@var{n}, @var{m})\nReturn a matrix whose elements are all 1.  The arguments are handled\nthe same as the arguments for @code{eye}.\n\nIf you need to create a matrix whose values are all the same, you should\nuse an expression like\n\n@example\nval_matrix = val * ones (n, m)\n@end example\n@end deftypefn") 
 XDEFUN_INTERNAL (zeros, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} zeros (@var{x})\n@deftypefnx {Built-in Function} {} zeros (@var{n}, @var{m})\nReturn a matrix whose elements are all 0.  The arguments are handled\nthe same as the arguments for @code{eye}.\n@end deftypefn") 
 XDEFUN_INTERNAL (eye, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} eye (@var{x})\n@deftypefnx {Built-in Function} {} eye (@var{n}, @var{m})\nReturn an identity matrix.  If invoked with a single scalar argument,\n@code{eye} returns a square matrix with the dimension specified.  If you\nsupply two scalar arguments, @code{eye} takes them to be the number of\nrows and columns.  If given a vector with two elements, @code{eye} uses\nthe values of the elements as the number of rows and columns,\nrespectively.  For example,\n\n@example\n@group\neye (3)\n     @result{}  1  0  0\n         0  1  0\n         0  0  1\n@end group\n@end example\n\nThe following expressions all produce the same result:\n\n@example\n@group\neye (2)\n@equiv{}\neye (2, 2)\n@equiv{}\neye (size ([1, 2; 3, 4])\n@end group\n@end example\n\nFor compatibility with @sc{Matlab}, calling @code{eye} with no arguments\nis equivalent to calling it with an argument of 1.\n@end deftypefn") 
 XDEFUN_INTERNAL (linspace, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} linspace (@var{base}, @var{limit}, @var{n})\nReturn a row vector with @var{n} linearly spaced elements between\n@var{base} and @var{limit}.  The number of elements, @var{n}, must be\ngreater than 1.  The @var{base} and @var{limit} are always included in\nthe range.  If @var{base} is greater than @var{limit}, the elements are\nstored in decreasing order.  If the number of points is not specified, a\nvalue of 100 is used.\n\nThe @code{linspace} function always returns a row vector, regardless of\nthe value of @code{prefer_column_vectors}.\n@end deftypefn") 
   XDEFCONST_INTERNAL(I, Complex (0.0, 1.0), "-*- texinfo -*-\n@defvr {Built-in Variable} I\n@defvrx {Built-in Variable} J\n@defvrx {Built-in Variable} i\n@defvrx {Built-in Variable} j\nA pure imaginary number, defined as\n@iftex\n@tex\n  $\\sqrt{-1}$.\n@end tex\n@end iftex\n@ifinfo\n  @code{sqrt (-1)}.\n@end ifinfo\nThe @code{I} and @code{J} forms are true constants, and cannot be\nmodified.  The @code{i} and @code{j} forms are like ordinary variables,\nand may be used for other purposes.  However, unlike other variables,\nthey once again assume their special predefined values if they are\ncleared @xref{Status of Variables}.\n@end defvr") ;
   XDEFCONST_INTERNAL(Inf, octave_Inf, "-*- texinfo -*-\n@defvr {Built-in Variable} Inf\n@defvrx {Built-in Variable} inf\nInfinity.  This is the result of an operation like 1/0, or an operation\nthat results in a floating point overflow.\n@end defvr") ;
   XDEFCONST_INTERNAL(J, Complex (0.0, 1.0), "-*- texinfo -*-\n@defvr {Built-in Variable} I\n@defvrx {Built-in Variable} J\n@defvrx {Built-in Variable} i\n@defvrx {Built-in Variable} j\nA pure imaginary number, defined as\n@iftex\n@tex\n  $\\sqrt{-1}$.\n@end tex\n@end iftex\n@ifinfo\n  @code{sqrt (-1)}.\n@end ifinfo\nThe @code{I} and @code{J} forms are true constants, and cannot be\nmodified.  The @code{i} and @code{j} forms are like ordinary variables,\nand may be used for other purposes.  However, unlike other variables,\nthey once again assume their special predefined values if they are\ncleared @xref{Status of Variables}.\n@end defvr") ;
   XDEFCONST_INTERNAL(NaN, octave_NaN, "-*- texinfo -*-\n@defvr {Built-in Variable} NaN\n@defvrx {Built-in Variable} nan\nNot a number.  This is the result of an operation like\n@iftex\n@tex\n$0/0$, or $\\infty - \\infty$,\n@end tex\n@end iftex\n@ifinfo\n0/0, or @samp{Inf - Inf},\n@end ifinfo\nor any operation with a NaN.\n\nNote that NaN always compares not equal to NaN.  This behavior is\nspecified by the IEEE standard for floating point arithmetic.  To\nfind NaN values, you must use the @code{isnan} function.\n@end defvr") ;
   XDEFCONST_INTERNAL(e, e_val, "-*- texinfo -*-\n@defvr {Built-in Variable} e\nThe base of natural logarithms.  The constant\n@iftex\n@tex\n $e$\n@end tex\n@end iftex\n@ifinfo\n @var{e}\n@end ifinfo\n satisfies the equation\n@iftex\n@tex\n $\\log (e) = 1$.\n@end tex\n@end iftex\n@ifinfo\n @code{log} (@var{e}) = 1.\n@end ifinfo\n@end defvr") ;
   XDEFCONST_INTERNAL(eps, 2.2204460492503131e-16, "-*- texinfo -*-\n@defvr {Built-in Variable} eps\nThe machine precision.  More precisely, @code{eps} is the largest\nrelative spacing between any two adjacent numbers in the machine's\nfloating point system.  This number is obviously system-dependent.  On\nmachines that support 64 bit IEEE floating point arithmetic, @code{eps}\nis approximately\n@ifinfo\n 2.2204e-16.\n@end ifinfo\n@iftex\n@tex\n $2.2204\\times10^{-16}$.\n@end tex\n@end iftex\n@end defvr") ;
   XDEFCONST_INTERNAL(false, false, "-*- texinfo -*-\n@defvr {Built-in Variable} false\nLogical false value.\n@end defvr") ;
   XDEFCONST_INTERNAL(i, Complex (0.0, 1.0), "-*- texinfo -*-\n@defvr {Built-in Variable} I\n@defvrx {Built-in Variable} J\n@defvrx {Built-in Variable} i\n@defvrx {Built-in Variable} j\nA pure imaginary number, defined as\n@iftex\n@tex\n  $\\sqrt{-1}$.\n@end tex\n@end iftex\n@ifinfo\n  @code{sqrt (-1)}.\n@end ifinfo\nThe @code{I} and @code{J} forms are true constants, and cannot be\nmodified.  The @code{i} and @code{j} forms are like ordinary variables,\nand may be used for other purposes.  However, unlike other variables,\nthey once again assume their special predefined values if they are\ncleared @xref{Status of Variables}.\n@end defvr") ;
   XDEFCONST_INTERNAL(inf, octave_Inf, "-*- texinfo -*-\n@defvr {Built-in Variable} Inf\n@defvrx {Built-in Variable} inf\nInfinity.  This is the result of an operation like 1/0, or an operation\nthat results in a floating point overflow.\n@end defvr") ;
   XDEFCONST_INTERNAL(j, Complex (0.0, 1.0), "-*- texinfo -*-\n@defvr {Built-in Variable} I\n@defvrx {Built-in Variable} J\n@defvrx {Built-in Variable} i\n@defvrx {Built-in Variable} j\nA pure imaginary number, defined as\n@iftex\n@tex\n  $\\sqrt{-1}$.\n@end tex\n@end iftex\n@ifinfo\n  @code{sqrt (-1)}.\n@end ifinfo\nThe @code{I} and @code{J} forms are true constants, and cannot be\nmodified.  The @code{i} and @code{j} forms are like ordinary variables,\nand may be used for other purposes.  However, unlike other variables,\nthey once again assume their special predefined values if they are\ncleared @xref{Status of Variables}.\n@end defvr") ;
   XDEFCONST_INTERNAL(nan, octave_NaN, "-*- texinfo -*-\n@defvr {Built-in Variable} NaN\n@defvrx {Built-in Variable} nan\nNot a number.  This is the result of an operation like\n@iftex\n@tex\n$0/0$, or $\\infty - \\infty$,\n@end tex\n@end iftex\n@ifinfo\n0/0, or @samp{Inf - Inf},\n@end ifinfo\nor any operation with a NaN.\n\nNote that NaN always compares not equal to NaN.  This behavior is\nspecified by the IEEE standard for floating point arithmetic.  To\nfind NaN values, you must use the @code{isnan} function.\n@end defvr") ;
   XDEFCONST_INTERNAL(pi, pi_val, "-*- texinfo -*-\n@defvr {Built-in Variable} pi\nThe ratio of the circumference of a circle to its diameter.\nInternally, @code{pi} is computed as @samp{4.0 * atan (1.0)}.\n@end defvr") ;
   XDEFCONST_INTERNAL(realmax, 1.7976931348623157e+308, "-*- texinfo -*-\n@defvr {Built-in Variable} realmax\nThe largest floating point number that is representable.  The actual\nvalue is system-dependent.  On machines that support 64 bit IEEE\nfloating point arithmetic, @code{realmax} is approximately\n@ifinfo\n 1.7977e+308\n@end ifinfo\n@iftex\n@tex\n $1.7977\\times10^{308}$.\n@end tex\n@end iftex\n@end defvr") ;
   XDEFCONST_INTERNAL(realmin, 2.2250738585072014e-308, "-*- texinfo -*-\n@defvr {Built-in Variable} realmin\nThe smallest floating point number that is representable.  The actual\nvalue is system-dependent.  On machines that support 64 bit IEEE\nfloating point arithmetic, @code{realmin} is approximately\n@ifinfo\n 2.2251e-308\n@end ifinfo\n@iftex\n@tex\n $2.2251\\times10^{-308}$.\n@end tex\n@end iftex\n@end defvr") ;
   XDEFCONST_INTERNAL(true, true, "-*- texinfo -*-\n@defvr {Built-in Variable} true\nLogical true value.\n@end defvr") ;
}

static void
print_debug_doc_strings (void)
{
 XDEFUN_INTERNAL (dbstop, args,, true, "-*- texinfo -*-\n@deftypefn {Loadable Function} {rline =} dbstop (func, line)\nSet a breakpoint in a function\n@table @code\n@item func\nString representing the function name.  When already in debug\nmode this should be left out and only the line should be given.\n@item line\nLine you would like the breakpoint to be set on\n@end table\n\nThe rline returned is the real line that the breakpoint was set at.\n\n@end deftypefn\n@seealso{dbclear, dbtatus, dbnext}") 
 XDEFUN_INTERNAL (dbclear, args,, true, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} dbclear (func, line)\nDelete a breakpoint in a function\n@table @code\n@item func\nString representing the function name.  When already in debug\nmode this should be left out and only the line should be given.\n@item line\nLine where you would like to remove the the breakpoint\n@end table\nNo checking is done to make sure that the line you requested is really\na breakpoint.   If you get the wrong line nothing will happen.\n@end deftypefn\n@seealso{dbstop, dbstatus, dbwhere}") 
 XDEFUN_INTERNAL (dbstatus, args,, true, "-*- texinfo -*-\n@deftypefn {Loadable Function} {lst =} dbstatus ([func])\nReturn a vector containing the lines on which a function has \nbreakpoints set.\n@table @code\n@item func\nString representing the function name.  When already in debug\nmode this should be left out.\n@end table\n@end deftypefn\n@seealso{dbclear, dbwhere}") 
 XDEFUN_INTERNAL (dbwhere,,, true, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} dbwhere ()\nShow where we are in the code\n@end deftypefn\n@seealso{dbclear, dbstatus, dbstop}") 
 XDEFUN_INTERNAL (dbtype, args,, true, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} dbtype ()\nList script file with line numbers.\n@end deftypefn\n@seealso{dbclear, dbstatus, dbstop}") 
}

static void
print_defaults_doc_strings (void)
{
   XDEFVAR_INTERNAL("EDITOR", SBV_EDITOR, Veditor, false, editor, "-*- texinfo -*-\n@defvr {Built-in Variable} EDITOR\nA string naming the editor to use with the @code{edit_history} command.\nIf the environment variable @code{EDITOR} is set when Octave starts, its\nvalue is used as the default.  Otherwise, @code{EDITOR} is set to\n@code{\"emacs\"}.\n@end defvr") ;
   XDEFVAR_INTERNAL("EXEC_PATH", SBV_EXEC_PATH, Vexec_path, false, exec_path, "-*- texinfo -*-\n@defvr {Built-in Variable} EXEC_PATH\nThe variable @code{EXEC_PATH} is a colon separated list of directories\nto search when executing subprograms.  Its initial value is taken from\nthe environment variable @code{OCTAVE_EXEC_PATH} (if it exists) or\n@code{PATH}, but that value can be overridden by the command line\nargument @code{--exec-path PATH}, or by setting the value of\n@code{EXEC_PATH} in a startup script.  If the value of @code{EXEC_PATH}\nbegins (ends) with a colon, the directories\n\n@example\n@group\n@var{octave-home}/libexec/octave/site/exec/@var{arch}\n@var{octave-home}/libexec/octave/@var{version}/exec/@var{arch}\n@end group\n@end example\n\n@noindent\nare prepended (appended) to @code{EXEC_PATH}, where @var{octave-home}\nis the top-level directory where all of Octave is installed\n(the default value is @file{@value{OCTAVEHOME}}).  If you don't specify\na value for @code{EXEC_PATH} explicitly, these special directories are\nprepended to your shell path.\n@end defvr") ;
   XDEFVAR_INTERNAL("LOADPATH", SBV_LOADPATH, Vload_path, false, loadpath, "-*- texinfo -*-\n@defvr {Built-in Variable} LOADPATH\nA colon separated list of directories in which to search for function\nfiles.  @xref{Functions and Scripts}.  The value of @code{LOADPATH}\noverrides the environment variable @code{OCTAVE_PATH}.  @xref{Installation}.\n\n@code{LOADPATH} is now handled in the same way as @TeX{} handles\n@code{TEXINPUTS}.  Leading, trailing, or doubled colons that appear in\n@code{LOADPATH} are replaced by the value of @code{DEFAULT_LOADPATH}.\nThe default value of @code{LOADPATH} is @code{\":\"}, which tells Octave\nto search in the directories specified by @code{DEFAULT_LOADPATH}.\n\nIn addition, if any path element ends in @samp{//}, that directory and\nall subdirectories it contains are searched recursively for function\nfiles.  This can result in a slight delay as Octave caches the lists of\nfiles found in the @code{LOADPATH} the first time Octave searches for a\nfunction.  After that, searching is usually much faster because Octave\nnormally only needs to search its internal cache for files.\n\nTo improve performance of recursive directory searching, it is best for\neach directory that is to be searched recursively to contain\n@emph{either} additional subdirectories @emph{or} function files, but\nnot a mixture of both.\n\n@xref{Organization of Functions}, for a description of the function file\ndirectories that are distributed with Octave.\n@end defvr") ;
   XDEFCONST_INTERNAL(DEFAULT_LOADPATH, Vdefault_load_path, "-*- texinfo -*-\n@defvr {Built-in Variable} DEFAULT_LOADPATH\nA colon separated list of directories in which to search for function\nfiles by default.  The value of this variable is also automatically\nsubstituted for leading, trailing, or doubled colons that appear in the\nbuilt-in variable @code{LOADPATH}.\n@end defvr") ;
   XDEFVAR_INTERNAL("IMAGEPATH", SBV_IMAGEPATH, ".:/usr/local/share/octave/2.1.36/imagelib//", false, imagepath, "-*- texinfo -*-\n@defvr {Built-in Variable} IMAGEPATH\nA colon separated list of directories in which to search for image\nfiles.\n@end defvr") ;
   XDEFCONST_INTERNAL(OCTAVE_HOME, Voctave_home, "-*- texinfo -*-\n@defvr {Built-in Variable} OCTAVE_HOME\nThe name of the top-level Octave installation directory.\n@end defvr") ;
   XDEFCONST_INTERNAL("OCTAVE_VERSION", "2.1.36", "-*- texinfo -*-\n@defvr {Built-in Variable} OCTAVE_VERSION\nThe version number of Octave, as a string.\n@end defvr") ;
 XDEFUN_INTERNAL (rehash,,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} rehash ()\nReinitialize Octave's @code{LOADPATH} directory cache.\n@end deftypefn") 
}

static void
print_defun_doc_strings (void)
{
}

static void
print_det_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (det, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{d}, @var{rcond}] = } det (@var{a})\nCompute the determinant of @var{a} using @sc{Linpack}.  Return an estimate\nof the reciprocal condition number if requested.\n@end deftypefn") 
}

static void
print_dirfns_doc_strings (void)
{
 XDEFUN_INTERNAL (cd, args,, true, "-*- texinfo -*-\n@deffn {Command} cd dir\n@deffnx {Command} chdir dir\nChange the current working directory to @var{dir}.  If @var{dir} is\nomitted, the current directory is changed to the users home\ndirectory.  For example,\n\n@example\ncd ~/octave\n@end example\n\n@noindent\nChanges the current working directory to @file{~/octave}.  If the\ndirectory does not exist, an error message is printed and the working\ndirectory is not changed.\n@end deffn") 
 XDEFALIAS_INTERNAL(chdir, cd) ;
 XDEFUN_INTERNAL (ls, args,, true, "-*- texinfo -*-\n@deffn {Command} ls options\n@deffnx {Command} dir options\nList directory contents.  For example,\n\n@example\nls -l\n     @print{} total 12\n     @print{} -rw-r--r--   1 jwe  users  4488 Aug 19 04:02 foo.m\n     @print{} -rw-r--r--   1 jwe  users  1315 Aug 17 23:14 bar.m\n@end example\n\nThe @code{dir} and @code{ls} commands are implemented by calling your\nsystem's directory listing command, so the available options may vary\nfrom system to system.\n@end deffn") 
 XDEFALIAS_INTERNAL(dir, ls) ;
 XDEFUN_INTERNAL (pwd,, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} pwd ()\nReturn the current working directory.\n@end deftypefn") 
 XDEFUN_INTERNAL (readdir, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{files}, @var{err}, @var{msg}] =} readdir (@var{dir})\nReturn names of the files in the directory @var{dir} as an array of\nstrings.  If an error occurs, return an empty matrix in @var{files}.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (mkdir, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} mkdir (@var{dir})\\nCreate a directory named @var{dir}.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (rmdir, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} rmdir (@var{dir})\nRemove the directory named @var{dir}.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (link, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} link (@var{old}, @var{new})\nCreate a new link (also known as a hard link) to an existing file.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (symlink, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} symlink (@var{old}, @var{new})\nCreate a symbolic link @var{new} which contains the string @var{old}.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (readlink, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{result}, @var{err}, @var{msg}] =} symlink (@var{symlink})\nRead the value of the symbolic link @var{symlink}.\n\nIf successful, @var{result} contains the contents of the symbolic link\n@var{symlink}, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (rename, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} rename (@var{old}, @var{new})\nChange the name of file @var{old} to @var{new}.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (glob, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} glob (@var{pattern})\nGiven an array of strings in @var{pattern}, return the list of file\nnames that match any of them, or an empty string if no patterns match.\nTilde expansion is performed on each of the patterns before looking for\nmatching file names.  For example,\n\n@example\n@group\nglob (\"/vm*\")\n     @result{} \"/vmlinuz\"\n@end group\n@end example\n\nNote that multiple values are returned in a string matrix with the fill\ncharacter set to ASCII NUL.\n@end deftypefn") 
 XDEFUN_INTERNAL (fnmatch, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} fnmatch (@var{pattern}, @var{string})\nReturn 1 or zero for each element of @var{string} that matches any of\nthe elements of the string array @var{pattern}, using the rules of\nfilename pattern matching.  For example,\n\n@example\n@group\nfnmatch (\"a*b\", [\"ab\"; \"axyzb\"; \"xyzab\"])\n     @result{} [ 1; 1; 0 ]\n@end group\n@end example\n@end deftypefn") 
}

static void
print_dynamic_ld_doc_strings (void)
{
   XDEFVAR_INTERNAL("warn_reload_forces_clear", SBV_warn_reload_forces_clear, 1.0, false, warn_reload_forces_clear, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_reload_forces_clear\nIf several functions have been loaded from the same file, Octave must\nclear all the functions before any one of them can be reloaded.  If\n@code{warn_reload_forces_clear}, Octave will warn you when this happens,\nand print a list of the additional functions that it is forced to clear.\n@end defvr") ;
}

static void
print_eig_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (eig, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {@var{lambda} =} eig (@var{a})\n@deftypefnx {Loadable Function} {[@var{v}, @var{lambda}] =} eig (@var{a})\nThe eigenvalues (and eigenvectors) of a matrix are computed in a several\nstep process which begins with a Hessenberg decomposition, followed by a\nSchur decomposition, from which the eigenvalues are apparent.  The\neigenvectors, when desired, are computed by further manipulations of the\nSchur decomposition.\n@end deftypefn") 
}

static void
print_error_doc_strings (void)
{
 XDEFUN_INTERNAL (error, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} error (@var{template}, @dots{})\nThe @code{error} function formats the optional arguments under the\ncontrol of the template string @var{template} using the same rules as\nthe @code{printf} family of functions (@pxref{Formatted Output}).\nThe resulting message is prefixed by the string @samp{error: } and\nprinted on the @code{stderr} stream.\n\nCalling @code{error} also sets Octave's internal error state such that\ncontrol will return to the top level without evaluating any more\ncommands.  This is useful for aborting from functions or scripts.\n\nIf the error message does not end with a new line character, Octave will\nprint a traceback of all the function calls leading to the error.  For\nexample, given the following function definitions:\n\n@example\n@group\nfunction f () g () end\nfunction g () h () end\nfunction h () nargin == 1 || error (\"nargin != 1\"); end\n@end group\n@end example\n\n@noindent\ncalling the function @code{f} will result in a list of messages that\ncan help you to quickly locate the exact location of the error:\n\n@example\n@group\nf ()\nerror: nargin != 1\nerror: evaluating index expression near line 1, column 30\nerror: evaluating binary operator `||' near line 1, column 27\nerror: called from `h'\nerror: called from `g'\nerror: called from `f'\n@end group\n@end example\n\nIf the error message ends in a new line character, Octave will print the\nmessage but will not display any traceback messages as it returns\ncontrol to the top level.  For example, modifying the error message\nin the previous example to end in a new line causes Octave to only print\na single message:\n\n@example\n@group\nfunction h () nargin == 1 || error (\"nargin != 1\\n\"); end\nf ()\nerror: nargin != 1\n@end group\n@end example\n@end deftypefn") 
 XDEFUN_INTERNAL (warning, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} warning (@var{msg})\nPrint a warning message @var{msg} prefixed by the string @samp{warning: }.  \nAfter printing the warning message, Octave will continue to execute\ncommands.  You should use this function when you want to notify the user\nof an unusual condition, but only when it makes sense for your program\nto go on.\n@end deftypefn") 
 XDEFUN_INTERNAL (usage, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} usage (@var{msg})\nPrint the message @var{msg}, prefixed by the string @samp{usage: }, and\nset Octave's internal error state such that control will return to the\ntop level without evaluating any more commands.  This is useful for\naborting from functions.\n\nAfter @code{usage} is evaluated, Octave will print a traceback of all\nthe function calls leading to the usage message.\n\nYou should use this function for reporting problems errors that result\nfrom an improper call to a function, such as calling a function with an\nincorrect number of arguments, or with arguments of the wrong type.  For\nexample, most functions distributed with Octave begin with code like\nthis\n\n@example\n@group\nif (nargin != 2)\n  usage (\"foo (a, b)\");\nendif\n@end group\n@end example\n\n@noindent\nto check for the proper number of arguments.\n@end deftypefn") 
   XDEFVAR_INTERNAL("beep_on_error", SBV_beep_on_error, 0.0, false, beep_on_error, "-*- texinfo -*-\n@defvr {Built-in Variable} beep_on_error\nIf the value of @code{beep_on_error} is nonzero, Octave will try\nto ring your terminal's bell before printing an error message.  The\ndefault value is 0.\n@end defvr") ;
   XDEFVAR_INTERNAL("debug_on_error", SBV_debug_on_error, 0.0, false, debug_on_error, "-*- texinfo -*-\n@defvr {Built-in Variable} debug_on_error\nIf the value of @code{debug_on_error} is nonzero, Octave will try\nto enter the debugger when an error is encountered.  This will also\ninhibit printing of the normal traceback message (you will only see\nthe top-level error message).  The default value is 0.\n@end defvr") ;
   XDEFVAR_INTERNAL("debug_on_warning", SBV_debug_on_warning, 0.0, false, debug_on_warning, "-*- texinfo -*-\n@defvr {Built-in Variable} debug_on_warning\nIf the value of @code{debug_on_warning} is nonzero, Octave will try\nto enter the debugger when a warning is encountered.  The default\nvalue is 0.\n@end defvr") ;
   XDEFCONST_INTERNAL(error_text, "", "-*- texinfo -*-\n@defvr {Built-in Variable} error_text\nThis variable contains the text of error messages that would have\nbeen printed in the body of the most recent @code{unwind_protect} or\n@code{try} statement or the @var{try} part of the most recent call to\nthe @code{eval} function.  Outside of the @code{unwind_protect} and\n@code{try} statements or the @code{eval} function, or if no error has\noccurred within them, the value of @code{error_text} is guaranteed to be\nthe empty string.\n\nNote that the message does not include the first @samp{error: } prefix,\nso that it may easily be passed to the @code{error} function without\nadditional processing@footnote{Yes, it's a kluge, but it seems to be a\nreasonably useful one.}.\n\n@xref{The try Statement}, and @ref{The unwind_protect Statement}.\n@end defvr") ;
}

static void
print_expm_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (expm, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} expm (@var{a})\nReturn the exponential of a matrix, defined as the infinite Taylor\nseries\n@iftex\n@tex\n$$\n \\exp (A) = I + A + {A^2 \\over 2!} + {A^3 \\over 3!} + \\cdots\n$$\n@end tex\n@end iftex\n@ifinfo\n\n@example\nexpm(a) = I + a + a^2/2! + a^3/3! + ...\n@end example\n\n@end ifinfo\nThe Taylor series is @emph{not} the way to compute the matrix\nexponential; see Moler and Van Loan, @cite{Nineteen Dubious Ways to\nCompute the Exponential of a Matrix}, SIAM Review, 1978.  This routine\nuses Ward's diagonal\n@iftex\n@tex\nPad\\'e\n@end tex\n@end iftex\n@ifinfo\nPade'\n@end ifinfo\napproximation method with three step preconditioning (SIAM Journal on\nNumerical Analysis, 1977).  Diagonal\n@iftex\n@tex\nPad\\'e\n@end tex\n@end iftex\n@ifinfo\nPade'\n@end ifinfo\n approximations are rational polynomials of matrices\n@iftex\n@tex\n$D_q(a)^{-1}N_q(a)$\n@end tex\n@end iftex\n@ifinfo\n\n@example\n     -1\nD (a)   N (a)\n@end example\n\n@end ifinfo\n whose Taylor series matches the first\n@iftex\n@tex\n$2 q + 1 $\n@end tex\n@end iftex\n@ifinfo\n@code{2q+1}\n@end ifinfo\nterms of the Taylor series above; direct evaluation of the Taylor series\n(with the same preconditioning steps) may be desirable in lieu of the\n@iftex\n@tex\nPad\\'e\n@end tex\n@end iftex\n@ifinfo\nPade'\n@end ifinfo\napproximation when\n@iftex\n@tex\n$D_q(a)$\n@end tex\n@end iftex\n@ifinfo\n@code{Dq(a)}\n@end ifinfo\nis ill-conditioned.\n@end deftypefn") 
}

static void
print_fft_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (fft, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} fft (@var{a}, @var{n})\nCompute the FFT of @var{a} using subroutines from @sc{Fftpack}.  If @var{a}\nis a matrix, @code{fft} computes the FFT for each column of @var{a}.\n\nIf called with two arguments, @var{n} is expected to be an integer\nspecifying the number of elements of @var{a} to use.  If @var{a} is a\nmatrix, @var{n} specifies the number of rows of @var{a} to use.  If\n@var{n} is larger than the size of @var{a}, @var{a} is resized and\npadded with zeros.\n@end deftypefn") 
}

static void
print_fft2_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (fft2, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} fft2 (@var{a}, @var{n}, @var{m})\nCompute the two dimensional FFT of @var{a}.\n\nThe optional arguments @var{n} and @var{m} may be used specify the\nnumber of rows and columns of @var{a} to use.  If either of these is\nlarger than the size of @var{a}, @var{a} is resized and padded with\nzeros.\n@end deftypefn") 
}

static void
print_file_io_doc_strings (void)
{
 XDEFUN_INTERNAL (is_stream, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} is_stream (@var{x})\nReturn true if @var{x} is a stream object.  Otherwise, return false.\n@end deftypefn") 
 XDEFUN_INTERNAL (fclose, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} fclose (@var{fid})\nCloses the specified file.  If an error is encountered while trying to\nclose the file, an error message is printed and @code{fclose} returns\n0.  Otherwise, it returns 1.\n@end deftypefn") 
 XDEFUN_INTERNAL (fflush, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} fflush (@var{fid})\nFlush output to @var{fid}.  This is useful for ensuring that all\npending output makes it to the screen before some other event occurs.\nFor example, it is always a good idea to flush the standard output\nstream before calling @code{input}.\n@end deftypefn") 
 XDEFUN_INTERNAL (fgetl, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} fgetl (@var{fid}, @var{len})\nRead characters from a file, stopping after a newline, or EOF,\nor @var{len} characters have been read.  The characters read, excluding\nthe possible trailing newline, are returned as a string.\n\nIf @var{len} is omitted, @code{fgetl} reads until the next newline\ncharacter.\n\nIf there are no more characters to read, @code{fgetl} returns @minus{}1.\n@end deftypefn") 
 XDEFUN_INTERNAL (fgets, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} fgets (@var{fid}, @var{len})\nRead characters from a file, stopping after a newline, or EOF,\nor @var{len} characters have been read.  The characters read, including\nthe possible trailing newline, are returned as a string.\n\nIf @var{len} is omitted, @code{fgets} reads until the next newline\ncharacter.\n\nIf there are no more characters to read, @code{fgets} returns @minus{}1.\n@end deftypefn") 
 XDEFUN_INTERNAL (fopen, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{fid}, @var{msg}] =} fopen (@var{name}, @var{mode}, @var{arch})\n@deftypefnx {Built-in Function} {@var{fid_list} =} fopen (\"all\")\n@deftypefnx {Built-in Function} {@var{file} =} fopen (@var{fid})\nThe first form of the @code{fopen} function opens the named file with\nthe specified mode (read-write, read-only, etc.) and architecture\ninterpretation (IEEE big endian, IEEE little endian, etc.), and returns\nan integer value that may be used to refer to the file later.  If an\nerror occurs, @var{fid} is set to @minus{}1 and @var{msg} contains the\ncorresponding system error message.  The @var{mode} is a one or two\ncharacter string that specifies whether the file is to be opened for\nreading, writing, or both.\n\nThe second form of the @code{fopen} function returns a vector of file ids\ncorresponding to all the currently open files, excluding the\n@code{stdin}, @code{stdout}, and @code{stderr} streams.\n\nThe third form of the @code{fopen} function returns the name of a\ncurrently open file given its file id.\n\nFor example,\n\n@example\nmyfile = fopen (\"splat.dat\", \"r\", \"ieee-le\");\n@end example\n\n@noindent\nopens the file @file{splat.dat} for reading.  If necessary, binary\nnumeric values will be read assuming they are stored in IEEE format with\nthe least significant bit first, and then converted to the native\nrepresentation.\n\nOpening a file that is already open simply opens it again and returns a\nseparate file id.  It is not an error to open a file several times,\nthough writing to the same file through several different file ids may\nproduce unexpected results.\n\nThe possible values @samp{mode} may have are\n\n@table @asis\n@item @samp{r}\nOpen a file for reading.\n\n@item @samp{w}\nOpen a file for writing.  The previous contents are discared.\n\n@item @samp{a}\nOpen or create a file for writing at the end of the file.\n\n@item @samp{r+}\nOpen an existing file for reading and writing.\n\n@item @samp{w+}\nOpen a file for reading or writing.  The previous contents are\ndiscarded.\n\n@item @samp{a+}\nOpen or create a file for reading or writing at the end of the\nfile.\n@end table\n\nThe parameter @var{arch} is a string specifying the default data format\nfor the file.  Valid values for @var{arch} are:\n\n@table @asis\n@samp{native}\nThe format of the current machine (this is the default).\n\n@samp{ieee-le}\nIEEE big endian format.\n\n@samp{ieee-be}\nIEEE little endian format.\n\n@samp{vaxd}\nVAX D floating format.\n\n@samp{vaxg}\nVAX G floating format.\n\n@samp{cray}\nCray floating format.\n@end table\n\n@noindent\nhowever, conversions are currently only supported for @samp{native}\n@samp{ieee-be}, and @samp{ieee-le} formats.\n@end deftypefn") 
 XDEFUN_INTERNAL (freport, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} freport ()\nPrint a list of which files have been opened, and whether they are open\nfor reading, writing, or both.  For example,\n\n@example\n@group\nfreport ()\n\n     @print{}  number  mode  name\n     @print{} \n     @print{}       0     r  stdin\n     @print{}       1     w  stdout\n     @print{}       2     w  stderr\n     @print{}       3     r  myfile\n@end group\n@end example\n@end deftypefn") 
 XDEFUN_INTERNAL (frewind, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} frewind (@var{fid})\nMove the file pointer to the beginning of the file @var{fid}, returning\n1 for success, and 0 if an error was encountered.  It is equivalent to\n@code{fseek (@var{fid}, 0, SEEK_SET)}.\n@end deftypefn") 
 XDEFUN_INTERNAL (fseek, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} fseek (@var{fid}, @var{offset}, @var{origin})\nSet the file pointer to any location within the file @var{fid}.  The\npointer is positioned @var{offset} characters from the @var{origin},\nwhich may be one of the predefined variables @code{SEEK_CUR} (current\nposition), @code{SEEK_SET} (beginning), or @code{SEEK_END} (end of\nfile). If @var{origin} is omitted, @code{SEEK_SET} is assumed.  The\noffset must be zero, or a value returned by @code{ftell} (in which case\n@var{origin} must be @code{SEEK_SET}.\n@end deftypefn") 
 XDEFUN_INTERNAL (ftell, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} ftell (@var{fid})\nReturn the position of the file pointer as the number of characters\nfrom the beginning of the file @var{fid}.\n@end deftypefn") 
 XDEFUN_INTERNAL (fprintf, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} fprintf (@var{fid}, @var{template}, @dots{})\nThis function is just like @code{printf}, except that the output is\nwritten to the stream @var{fid} instead of @code{stdout}.\n@end deftypefn") 
 XDEFUN_INTERNAL (fputs, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} fputs (@var{fid}, @var{string})\nWrite a string to a file with no formatting.\n@end deftypefn") 
 XDEFUN_INTERNAL (sprintf, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} sprintf (@var{template}, @dots{})\nThis is like @code{printf}, except that the output is returned as a\nstring.  Unlike the C library function, which requires you to provide a\nsuitably sized string as an argument, Octave's @code{sprintf} function\nreturns the string, automatically sized to hold all of the items\nconverted.\n@end deftypefn") 
 XDEFUN_INTERNAL (fscanf, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{val}, @var{count}] =} fscanf (@var{fid}, @var{template}, @var{size})\n@deftypefnx {Built-in Function} {[@var{v1}, @var{v2}, @dots{}, @var{count}] = } fscanf (@var{fid}, @var{template}, \"C\")\nIn the first form, read from @var{fid} according to @var{template},\nreturning the result in the matrix @var{val}.\n\nThe optional argument @var{size} specifies the amount of data to read\nand may be one of\n\n@table @code\n@item Inf\nRead as much as possible, returning a column vector.\n\n@item @var{nr}\nRead up to @var{nr} elements, returning a column vector.\n\n@item [@var{nr}, Inf]\nRead as much as possible, returning a matrix with @var{nr} rows.  If the\nnumber of elements read is not an exact multiple of @var{nr}, the last\ncolumn is padded with zeros.\n\n@item [@var{nr}, @var{nc}]\nRead up to @code{@var{nr} * @var{nc}} elements, returning a matrix with\n@var{nr} rows.  If the number of elements read is not an exact multiple\nof @var{nr}, the last column is padded with zeros.\n@end table\n\n@noindent\nIf @var{size} is omitted, a value of @code{Inf} is assumed.\n\nA string is returned if @var{template} specifies only character\nconversions.\n\nThe number of items successfully read is returned in @var{count}.\n\nIn the second form, read from @var{fid} according to @var{template},\nwith each conversion specifier in @var{template} corresponding to a\nsingle scalar return value.  This form is more `C-like', and also\ncompatible with previous versions of Octave.  The number of successful\nconversions is returned in @var{count}\n@end deftypefn") 
 XDEFUN_INTERNAL (sscanf, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{val}, @var{count}] =} sscanf (@var{string}, @var{template}, @var{size})\n@deftypefnx {Built-in Function} {[@var{v1}, @var{v2}, @dots{}, @var{count}] = } sscanf (@var{string}, @var{template}, \"C\")\nThis is like @code{fscanf}, except that the characters are taken from the\nstring @var{string} instead of from a stream.  Reaching the end of the\nstring is treated as an end-of-file condition.\n@end deftypefn") 
 XDEFUN_INTERNAL (scanf, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{val}, @var{count}] =} scanf (@var{template}, @var{size})\n@deftypefnx {Built-in Function} {[@var{v1}, @var{v2}, @dots{}, @var{count}]] = } scanf (@var{template}, \"C\")\nThis is equivalent to calling @code{fscanf} with @var{fid} = @code{stdin}.\n\nIt is currently not useful to call @code{scanf} in interactive\nprograms.\n@end deftypefn") 
 XDEFUN_INTERNAL (fread, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{val}, @var{count}] =} fread (@var{fid}, @var{size}, @var{precision}, @var{skip}, @var{arch})\nRead binary data of type @var{precision} from the specified file ID\n@var{fid}.\n\nThe optional argument @var{size} specifies the amount of data to read\nand may be one of\n\n@table @code\n@item Inf\nRead as much as possible, returning a column vector.\n\n@item @var{nr}\nRead up to @var{nr} elements, returning a column vector.\n\n@item [@var{nr}, Inf]\nRead as much as possible, returning a matrix with @var{nr} rows.  If the\nnumber of elements read is not an exact multiple of @var{nr}, the last\ncolumn is padded with zeros.\n\n@item [@var{nr}, @var{nc}]\nRead up to @code{@var{nr} * @var{nc}} elements, returning a matrix with\n@var{nr} rows.  If the number of elements read is not an exact multiple\nof @var{nr}, the last column is padded with zeros.\n@end table\n\n@noindent\nIf @var{size} is omitted, a value of @code{Inf} is assumed.\n\nThe optional argument @var{precision} is a string specifying the type of\ndata to read and may be one of\n\n@table @code\n@item \"char\"\n@itemx \"char*1\"\n@itemx \"integer*1\"\n@itemx \"int8\"\nSingle character.\n\n@item \"signed char\"\n@itemx \"schar\"\nSigned character.\n\n@item \"unsigned char\"\n@itemx \"uchar\"\nUnsigned character.\n\n@item \"short\"\nShort integer.\n\n@item \"unsigned short\"\n@itemx \"ushort\"\nUnsigned short integer.\n\n@item \"int\"\nInteger.\n\n@item \"unsigned int\"\n@itemx \"uint\"\nUnsigned integer.\n\n@item \"long\"\nLong integer.\n\n@item \"unsigned long\"\n@itemx \"ulong\"\nUnsigned long integer.\n\n@item \"float\"\n@itemx \"float32\"\n@itemx \"real*4\"\nSingle precision float.\n\n@item \"double\"\n@itemx \"float64\"\n@itemx \"real*8\"\nDouble precision float.\n\n@item \"integer*2\"\n@itemx \"int16\"\nTwo byte integer.\n\n@item \"integer*4\"\n@itemx \"int32\"\nFour byte integer.\n@end table\n\n@noindent\nThe default precision is @code{\"uchar\"}.\n\nThe optional argument @var{skip} specifies the number of bytes to skip\nbefore each element is read.  If it is not specified, a value of 0 is\nassumed.\n\nThe optional argument @var{arch} is a string specifying the data format\nfor the file.  Valid values are\n\n@table @code\n@item \"native\"\nThe format of the current machine.\n\n@item \"ieee-le\"\nIEEE big endian.\n\n@item \"ieee-be\"\nIEEE little endian.\n\n@item \"vaxd\"\nVAX D floating format.\n\n@item \"vaxg\"\nVAX G floating format.\n\n@item \"cray\"\nCray floating format.\n@end table\n\n@noindent\nConversions are currently only supported for @code{\"ieee-be\"} and\n@code{\"ieee-le\"} formats.\n\nThe data read from the file is returned in @var{val}, and the number of\nvalues read is returned in @code{count}\n@end deftypefn") 
 XDEFUN_INTERNAL (fwrite, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {@var{count} =} fwrite (@var{fid}, @var{data}, @var{precision}, @var{skip}, @var{arch})\nWrite data in binary form of type @var{precision} to the specified file\nID @var{fid}, returning the number of values successfully written to the\nfile.\n\nThe argument @var{data} is a matrix of values that are to be written to\nthe file.  The values are extracted in column-major order.\n\nThe remaining arguments @var{precision}, @var{skip}, and @var{arch} are\noptional, and are interpreted as described for @code{fread}.\n\nThe behavior of @code{fwrite} is undefined if the values in @var{data}\nare too large to fit in the specified precision.\n@end deftypefn") 
 XDEFUN_INTERNAL (feof, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} feof (@var{fid})\nReturn 1 if an end-of-file condition has been encountered for a given\nfile and 0 otherwise.  Note that it will only return 1 if the end of the\nfile has already been encountered, not if the next read operation will\nresult in an end-of-file condition.\n@end deftypefn") 
 XDEFUN_INTERNAL (ferror, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} ferror (@var{fid})\nReturn 1 if an error condition has been encountered for a given file\nand 0 otherwise.  Note that it will only return 1 if an error has\nalready been encountered, not if the next operation will result in an\nerror condition.\n@end deftypefn") 
 XDEFUN_INTERNAL (popen, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {fid =} popen (@var{command}, @var{mode})\nStart a process and create a pipe.  The name of the command to run is\ngiven by @var{command}.  The file identifier corresponding to the input\nor output stream of the process is returned in @var{fid}.  The argument\n@var{mode} may be\n\n@table @code\n@item \"r\"\nThe pipe will be connected to the standard output of the process, and\nopen for reading.\n\n@item \"w\"\nThe pipe will be connected to the standard input of the process, and\nopen for writing.\n@end table\n\nFor example,\n\n@example\n@group\nfid = popen (\"ls -ltr / | tail -3\", \"r\");\nwhile (isstr (s = fgets (fid)))\n  fputs (stdout, s);\nendwhile\n     @print{} drwxr-xr-x  33 root  root  3072 Feb 15 13:28 etc\n     @print{} drwxr-xr-x   3 root  root  1024 Feb 15 13:28 lib\n     @print{} drwxrwxrwt  15 root  root  2048 Feb 17 14:53 tmp\n@end group\n@end example\n@end deftypefn") 
 XDEFUN_INTERNAL (pclose, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} pclose (@var{fid})\nClose a file identifier that was opened by @code{popen}.  You may also\nuse @code{fclose} for the same purpose.\n@end deftypefn") 
 XDEFUN_INTERNAL (tmpnam, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} tmpnam ()\nReturn a unique temporary file name as a string.\n\nSince the named file is not opened, by @code{tmpnam}, it\nis possible (though relatively unlikely) that it will not be available\nby the time your program attempts to open it.\n@end deftypefn") 
 XDEFALIAS_INTERNAL(octave_tmp_file_name, tmpnam) ;
 XDEFUN_INTERNAL (umask, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} umask (@var{mask})\nSet the permission mask for file creation.  The parameter @var{mask}\n is an integer, interpreted as an octal number.  If successful,\n returns the previous value of the mask (as an integer to be\n interpreted as an octal number); otherwise an error message is printed.\n@end deftypefn") 
   XDEFCONST_INTERNAL("SEEK_SET", -1.0, "-*- texinfo -*-\n@defvr {Built-in Variable} SEEK_SET\n@defvrx {Built-in Variable} SEEK_CUR\n@defvrx {Built-in Variable} SEEK_END\nThese variables may be used as the optional third argument for the\nfunction @code{fseek}.\n\n@table @code\n@item SEEK_SET\nPosition file relative to the beginning.\n\n@item SEEK_CUR\nPosition file relative to the current position.\n\n@item SEEK_END\nused with fseek to position file relative to the end.\n@end table\n@end defvr") ;
   XDEFCONST_INTERNAL("SEEK_CUR", 0.0, "-*- texinfo -*-\n@defvr {Built-in Variable} SEEK_CUR\nSee SEEK_SET.\n@end defvr") ;
   XDEFCONST_INTERNAL("SEEK_END", 1.0, "-*- texinfo -*-\n@defvr {Built-in Variable} SEEK_END\nSee SEEK_SET.\n@end defvr") ;
   XDEFCONST_INTERNAL("stdin", stdin_file, "-*- texinfo -*-\n@defvr {Built-in Variable} stdin\nThe standard input stream (file id 0).  When Octave is used\ninteractively, this is filtered through the command line editing\nfunctions.\n@end defvr") ;
   XDEFCONST_INTERNAL("stdout", stdout_file, "-*- texinfo -*-\n@defvr {Built-in Variable} stdout\nThe standard output stream (file id 1).  Data written to the\nstandard output is normally filtered through the pager.\n@end defvr") ;
   XDEFCONST_INTERNAL("stderr", stderr_file, "-*- texinfo -*-\n@defvr {Built-in Variable} stderr\nThe standard error stream (file id 2).  Even if paging is turned on,\nthe standard error is not sent to the pager.  It is useful for error\nmessages and prompts.\n@end defvr") ;
}

static void
print_filter_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (filter, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {y =} filter (@var{b}, @var{a}, @var{x})\n@deftypefnx {Loadable Function} {[@var{y}, @var{sf}] =} filter (@var{b}, @var{a}, @var{x}, @var{si})\nReturn the solution to the following linear, time-invariant difference\nequation:\n@iftex\n@tex\n$$\n\\sum_{k=0}^N a_{k+1} y_{n-k} = \\sum_{k=0}^M b_{k+1} x_{n-k}, \\qquad\n 1 \\le n \\le P\n$$\n@end tex\n@end iftex\n@ifinfo\n\n@smallexample\n   N                   M\n  SUM a(k+1) y(n-k) = SUM b(k+1) x(n-k)      for 1<=n<=length(x)\n  k=0                 k=0\n@end smallexample\n@end ifinfo\n\n@noindent\nwhere\n@ifinfo\n N=length(a)-1 and M=length(b)-1.\n@end ifinfo\n@iftex\n@tex\n $a \\in \\Re^{N-1}$, $b \\in \\Re^{M-1}$, and $x \\in \\Re^P$.\n@end tex\n@end iftex\nAn equivalent form of this equation is:\n@iftex\n@tex\n$$\ny_n = -\\sum_{k=1}^N c_{k+1} y_{n-k} + \\sum_{k=0}^M d_{k+1} x_{n-k}, \\qquad\n 1 \\le n \\le P\n$$\n@end tex\n@end iftex\n@ifinfo\n\n@smallexample\n            N                   M\n  y(n) = - SUM c(k+1) y(n-k) + SUM d(k+1) x(n-k)  for 1<=n<=length(x)\n           k=1                 k=0\n@end smallexample\n@end ifinfo\n\n@noindent\nwhere\n@ifinfo\n c = a/a(1) and d = b/a(1).\n@end ifinfo\n@iftex\n@tex\n$c = a/a_1$ and $d = b/a_1$.\n@end tex\n@end iftex\n\nIf the fourth argument @var{si} is provided, it is taken as the\ninitial state of the system and the final state is returned as\n@var{sf}.  The state vector is a column vector whose length is\nequal to the length of the longest coefficient vector minus one.\nIf @var{si} is not supplied, the initial state vector is set to all\nzeros.\n\nIn terms of the z-transform, y is the result of passing the discrete-\ntime signal x through a system characterized by the following rational\nsystem function:\n@iftex\n@tex\n$$\nH(z) = {\\displaystyle\\sum_{k=0}^M d_{k+1} z^{-k}\n        \\over 1 + \\displaystyle\\sum_{k+1}^N c_{k+1} z^{-k}}\n$$\n@end tex\n@end iftex\n@ifinfo\n\n@example\n             M\n            SUM d(k+1) z^(-k)\n            k=0\n  H(z) = ----------------------\n               N\n          1 + SUM c(k+1) z(-k)\n              k=1\n@end example\n@end ifinfo\n@end deftypefn") 
}

static void
print_find_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (find, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} find (@var{x})\nReturn a vector of indices of nonzero elements of a matrix.  To obtain a\nsingle index for each matrix element, Octave pretends that the columns\nof a matrix form one long vector (like Fortran arrays are stored).  For\nexample,\n\n@example\n@group\nfind (eye (2))\n     @result{} [ 1; 4 ]\n@end group\n@end example\n\nIf two outputs are requested, @code{find} returns the row and column\nindices of nonzero elements of a matrix.  For example,\n\n@example\n@group\n[i, j] = find (2 * eye (2))\n     @result{} i = [ 1; 2 ]\n     @result{} j = [ 1; 2 ]\n@end group\n@end example\n\nIf three outputs are requested, @code{find} also returns a vector\ncontaining the nonzero values.  For example,\n\n@example\n@group\n[i, j, v] = find (3 * eye (2))\n     @result{} i = [ 1; 2 ]\n     @result{} j = [ 1; 2 ]\n     @result{} v = [ 3; 3 ]\n@end group\n@end example\n@end deftypefn") 
}

static void
print_fsolve_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (fsolve, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{x}, @var{info}] =} fsolve (@var{fcn}, @var{x0})\nGiven @var{fcn}, the name of a function of the form @code{f (@var{x})}\nand an initial starting point @var{x0}, @code{fsolve} solves the set of\nequations such that @code{f(@var{x}) == 0}.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (fsolve_options, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} fsolve_options (@var{opt}, @var{val})\nWhen called with two arguments, this function allows you set options\nparameters for the function @code{fsolve}.  Given one argument,\n@code{fsolve_options} returns the value of the corresponding option.  If\nno arguments are supplied, the names of all the available options and\ntheir current values are displayed.\n@end deftypefn") 
}

static void
print_gammainc_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (gammainc, args,, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} gammainc (@var{x}, @var{a})\nComputes the incomplete gamma function,\n@iftex\n@tex\n$$\n \\gamma (x, a) = {\\displaystyle\\int_0^x e^{-t} t^{a-1} dt \\over \\Gamma (a)}\n$$\n@end tex\n@end iftex\n@ifinfo\n\n@smallexample\n                                x\n                      1        /\ngammainc (x, a) = ---------    | exp (-t) t^(a-1) dt\n                  gamma (a)    /\n                            t=0\n@end smallexample\n@end ifinfo\n\nIf @var{a} is scalar, then @code{gammainc (@var{x}, @var{a})} is returned\nfor each element of @var{x} and vice versa.\n\nIf neither @var{x} nor @var{a} is scalar, the sizes of @var{x} and\n@var{a} must agree, and @var{gammainc} is applied element-by-element.\n@end deftypefn\n@seealso{gamma and lgamma}") 
}

static void
print_getgrent_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (getgrent, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {@var{grp_struct} =} getgrent ()\nReturn an entry from the group database, opening it if necessary.\nOnce the end of the data has been reached, @code{getgrent} returns 0.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (getgrgid, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {@var{grp_struct} =} getgrgid (@var{gid}).\nReturn the first entry from the group database with the group ID\n@var{gid}.  If the group ID does not exist in the database,\n@code{getgrgid} returns 0.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (getgrnam, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {@var{grp_struct} =} getgrnam (@var{name})\nReturn the first entry from the group database with the group name\n@var{name}.  If the group name does not exist in the database,\n@code{getgrname} returns 0.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (setgrent, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} setgrent ()\nReturn the internal pointer to the beginning of the group database.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (endgrent, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} endgrent ()\nClose the group database.\n@end deftypefn") 
}

static void
print_getpwent_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (getpwent, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {@var{pw_struct} = } getpwent ()\nReturn a structure containing an entry from the password database,\nopening it if necessary. Once the end of the data has been reached,\n@code{getpwent} returns 0.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (getpwuid, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {@var{pw_struct} = } getpwuid (@var{uid}).\nReturn a structure containing the first entry from the password database\nwith the user ID @var{uid}.  If the user ID does not exist in the\ndatabase, @code{getpwuid} returns 0.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (getpwnam, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {@var{pw_struct} = } getpwnam (@var{name})\nReturn a structure containing the first entry from the password database\nwith the user name @var{name}.  If the user name does not exist in the\ndatabase, @code{getpwname} returns 0.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (setpwent, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} setpwent ()\nReturn the internal pointer to the beginning of the password database.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (endpwent, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} endpwent ()\nClose the password database.\n@end deftypefn") 
}

static void
print_getrusage_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (getrusage,,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} getrusage ()\nReturn a structure containing a number of statistics about the current\nOctave process.  Not all fields are available on all systems.  If it is\nnot possible to get CPU time statistics, the CPU time slots are set to\nzero.  Other missing data are replaced by NaN.  Here is a list of all\nthe possible fields that can be present in the structure returned by\n@code{getrusage}:\n\n@table @code\n@item idrss\nUnshared data size.\n\n@item inblock\nNumber of block input operations.\n\n@item isrss\nUnshared stack size.\n\n@item ixrss\nShared memory size.\n\n@item majflt\nNumber of major page faults.\n\n@item maxrss\nMaximum data size.\n\n@item minflt\nNumber of minor page faults.\n\n@item msgrcv\nNumber of messages received.\n\n@item msgsnd\nNumber of messages sent.\n\n@item nivcsw\nNumber of involuntary context switches.\n\n@item nsignals\nNumber of signals received.\n\n@item nswap\nNumber of swaps.\n\n@item nvcsw\nNumber of voluntary context switches.\n\n@item oublock\nNumber of block output operations.\n\n@item stime\nA structure containing the system CPU time used.  The structure has the\nelements @code{sec} (seconds) @code{usec} (microseconds).\n\n@item utime\nA structure containing the user CPU time used.  The structure has the\nelements @code{sec} (seconds) @code{usec} (microseconds).\n@end table\n@end deftypefn") 
}

static void
print_givens_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (givens, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {@var{g} =} givens (@var{x}, @var{y})\n@deftypefnx {Loadable Function} {[@var{c}, @var{s}] =} givens (@var{x}, @var{y})\n@iftex\n@tex\nReturn a $2\\times 2$ orthogonal matrix\n$$\n G = \\left[\\matrix{c & s\\cr -s'& c\\cr}\\right]\n$$\nsuch that\n$$\n G \\left[\\matrix{x\\cr y}\\right] = \\left[\\matrix{\\ast\\cr 0}\\right]\n$$\nwith $x$ and $y$ scalars.\n@end tex\n@end iftex\n@ifinfo\nReturn a 2 by 2 orthogonal matrix\n@code{@var{g} = [@var{c} @var{s}; -@var{s}' @var{c}]} such that\n@code{@var{g} [@var{x}; @var{y}] = [*; 0]} with @var{x} and @var{y} scalars.\n@end ifinfo\n\nFor example,\n\n@example\n@group\ngivens (1, 1)\n     @result{}   0.70711   0.70711\n         -0.70711   0.70711\n@end group\n@end example\n@end deftypefn") 
}

static void
print_help_doc_strings (void)
{
 XDEFUN_INTERNAL (help, args,, true, "-*- texinfo -*-\n@deffn {Command} help\nOctave's @code{help} command can be used to print brief usage-style\nmessages, or to display information directly from an on-line version of\nthe printed manual, using the GNU Info browser.  If invoked without any\narguments, @code{help} prints a list of all the available operators,\nfunctions, and built-in variables.  If the first argument is @code{-i},\nthe @code{help} command searches the index of the on-line version of\nthis manual for the given topics.\n\nFor example, the command @kbd{help help} prints a short message\ndescribing the @code{help} command, and @kbd{help -i help} starts the\nGNU Info browser at this node in the on-line version of the manual.\n\nOnce the GNU Info browser is running, help for using it is available\nusing the command @kbd{C-h}.\n@end deffn") 
 XDEFUN_INTERNAL (type, args, nargout, true, "-*- texinfo -*-\n\n@deffn {Command} type options name @dots{}\nDisplay the definition of each @var{name} that refers to a function.\n\nNormally also displays if each @var{name} is user-defined or builtin;\nthe @code{-q} option suppresses this behaviour.\n\nCurrently, Octave can only display functions that can be compiled\ncleanly, because it uses its internal representation of the function to\nrecreate the program text.\n\nComments are not displayed because Octave's parser currently discards\nthem as it converts the text of a function file to its internal\nrepresentation.  This problem may be fixed in a future release.\n@end deffn") 
 XDEFUN_INTERNAL (which, args, nargout, true, "-*- texinfo -*-\n@deffn {Command} which name @dots{}\nDisplay the type of each @var{name}.  If @var{name} is defined from a\nfunction file, the full name of the file is also displayed.\n@end deffn") 
   XDEFVAR_INTERNAL("INFO_FILE", SBV_INFO_FILE, Vinfo_file, false, info_file, "-*- texinfo -*-\n@defvr {Built-in Variable} INFO_FILE\nThe variable @code{INFO_FILE} names the location of the Octave info file.\nThe default value is @code{\"@var{octave-home}/info/octave.info\"}, in\nwhich @var{octave-home} is the directory where all of Octave is installed.\n@end defvr") ;
   XDEFVAR_INTERNAL("INFO_PROGRAM", SBV_INFO_PROGRAM, Vinfo_prog, false, info_prog, "-*- texinfo -*-\n@defvr {Built-in Variable} INFO_PROGRAM\nThe variable @code{INFO_PROGRAM} names the info program to run.  Its\ndefault initial value is\n@code{\"@var{octave-home}/libexec/octave/@var{version}/exec/@var{arch}/info\"}\nin which @var{octave-home} is the directory where all of Octave is\ninstalled, @var{version} is the Octave version number, and @var{arch}\nis the system type (for example, @code{i686-pc-linux-gnu}).  The\ndefault initial value may be overridden by the environment variable\n@code{OCTAVE_INFO_PROGRAM}, or the command line argument\n@code{--info-program NAME}, or by setting the value of\n@code{INFO_PROGRAM} in a startup script\n@end defvr") ;
   XDEFVAR_INTERNAL("MAKEINFO_PROGRAM", SBV_MAKEINFO_PROGRAM, Vmakeinfo_prog, false, makeinfo_prog, "-*- texinfo -*-\n@defvr {Built-in Variable} MAKEINFO_PROGRAM\nThe variable @code{MAKEINFO_PROGRAM} names the makeinfo program that\nOctave runs to format help text that contains Texinfo markup commands.\nIts default initial value is @code{\"makeinfo\"}.\n@end defvr") ;
   XDEFVAR_INTERNAL("suppress_verbose_help_message", SBV_suppress_verbose_help_message, 0.0, false, suppress_verbose_help_message, "-*- texinfo -*-\n@defvr {Built-in Variable} suppress_verbose_help_message\nIf the value of @code{suppress_verbose_help_message} is nonzero, Octave\nwill not add additional help information to the end of the output from\nthe @code{help} command and usage messages for built-in commands.\n@end defvr") ;
}

static void
print_hess_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (hess, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {@var{h} =} hess (@var{a})\n@deftypefnx {Loadable Function} {[@var{p}, @var{h}] =} hess (@var{a})\n@cindex Hessenberg decomposition\nCompute the Hessenberg decomposition of the matrix @var{a}.\n\nThe Hessenberg decomposition is usually used as the first step in an\neigenvalue computation, but has other applications as well (see Golub,\nNash, and Van Loan, IEEE Transactions on Automatic Control, 1979.  The\nHessenberg decomposition is\n@iftex\n@tex\n$$\nA = PHP^T\n$$\nwhere $P$ is a square unitary matrix ($P^HP = I$), and $H$\nis upper Hessenberg ($H_{i,j} = 0, \\forall i \\ge j+1$).\n@end tex\n@end iftex\n@ifinfo\n@code{p * h * p' = a} where @code{p} is a square unitary matrix\n(@code{p' * p = I}, using complex-conjugate transposition) and @code{h}\nis upper Hessenberg (@code{i >= j+1 => h (i, j) = 0}).\n@end ifinfo\n@end deftypefn") 
}

static void
print_ifft_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (ifft, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} ifft (@var{a}, @var{n})\nCompute the inverse FFT of @var{a} using subroutines from @sc{Fftpack}.  If\n@var{a} is a matrix, @code{fft} computes the inverse FFT for each column\nof @var{a}.\n\nIf called with two arguments, @var{n} is expected to be an integer\nspecifying the number of elements of @var{a} to use.  If @var{a} is a\nmatrix, @var{n} specifies the number of rows of @var{a} to use.  If\n@var{n} is larger than the size of @var{a}, @var{a} is resized and\npadded with zeros.\n@end deftypefn") 
}

static void
print_ifft2_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (ifft2, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} ifft2 (@var{a}, @var{n}, @var{m})\nCompute the two dimensional inverse FFT of @var{a}.\n\nThe optional arguments @var{n} and @var{m} may be used specify the\nnumber of rows and columns of @var{a} to use.  If either of these is\nlarger than the size of @var{a}, @var{a} is resized and padded with\nzeros.\n@end deftypefn") 
}

static void
print_input_doc_strings (void)
{
 XDEFUN_INTERNAL (input, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} input (@var{prompt})\n@deftypefnx {Built-in Function} {} input (@var{prompt}, \"s\")\nPrint a prompt and wait for user input.  For example,\n\n@example\ninput (\"Pick a number, any number! \")\n@end example\n\n@noindent\nprints the prompt\n\n@example\nPick a number, any number!\n@end example\n\n@noindent\nand waits for the user to enter a value.  The string entered by the user\nis evaluated as an expression, so it may be a literal constant, a\nvariable name, or any other valid expression.\n\nCurrently, @code{input} only returns one value, regardless of the number\nof values produced by the evaluation of the expression.\n\nIf you are only interested in getting a literal string value, you can\ncall @code{input} with the character string @code{\"s\"} as the second\nargument.  This tells Octave to return the string entered by the user\ndirectly, without evaluating it first.\n\nBecause there may be output waiting to be displayed by the pager, it is\na good idea to always call @code{fflush (stdout)} before calling\n@code{input}.  This will ensure that all pending output is written to\nthe screen before your prompt.  @xref{Input and Output}.\n@end deftypefn") 
 XDEFUN_INTERNAL (keyboard, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} keyboard (@var{prompt})\nThis function is normally used for simple debugging.  When the\n@code{keyboard} function is executed, Octave prints a prompt and waits\nfor user input.  The input strings are then evaluated and the results\nare printed.  This makes it possible to examine the values of variables\nwithin a function, and to assign new values to variables.  No value is\nreturned from the @code{keyboard} function, and it continues to prompt\nfor input until the user types @samp{quit}, or @samp{exit}.\n\nIf @code{keyboard} is invoked without any arguments, a default prompt of\n@samp{debug> } is used.\n@end deftypefn") 
 XDEFUN_INTERNAL (echo, args,, true, "-*- texinfo -*-\n@deffn {Command} echo options\nControl whether commands are displayed as they are executed.  Valid\noptions are:\n\n@table @code\n@item on\nEnable echoing of commands as they are executed in script files.\n\n@item off\nDisable echoing of commands as they are executed in script files.\n\n@item on all\nEnable echoing of commands as they are executed in script files and\nfunctions.\n\n@item off all\nDisable echoing of commands as they are executed in script files and\nfunctions.\n@end table\n\n@noindent\nIf invoked without any arguments, @code{echo} toggles the current echo\nstate.\n@end deffn") 
 XDEFUN_INTERNAL (completion_matches, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} completion_matches (@var{hint})\nGenerate possible completions given @var{hint}.\n\nThis function is provided for the benefit of programs like Emacs which\nmight be controlling Octave and handling user input.  The current\ncommand number is not incremented when this function is called.  This is\na feature, not a bug.\n@end deftypefn") 
 XDEFUN_INTERNAL (read_readline_init_file, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} read_readline_init_file (@var{file})\nRead the readline library initialiazation file @var{file}.  If\n@var{file} is omitted, read the default initialization file (normally\n@file{~/.inputrc}.\n@end deftypefn") 
 XDEFUN_INTERNAL (input_event_hook, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{ofcn}, @var{odata}] =} input_event_hook (@var{fcn}, @var{data})\nGiven the name of a function as a string and any Octave value object,\ninstall @var{fcn} as a function to call periodically, when Octave is\nwaiting for input.  The function should have the form\n@example\n@var{fcn} (@var{data})\n@end example\n\nIf @var{data} is omitted, Octave calls the function without any\narguments.  If both @var{fcn} and @var{data} are omitted, Octave\nclears the hook.  In all cases, the name of the previous hook function\nand the user data are returned.\n@end deftypefn") 
   XDEFVAR_INTERNAL("PS1", SBV_PS1, "\\s:\\#> ", false, ps1, "-*- texinfo -*-\n@defvr {Built-in Variable} PS1\nThe primary prompt string.  When executing interactively, Octave\ndisplays the primary prompt @code{PS1} when it is ready to read a\ncommand.\n\nThe default value of @code{PS1} is @code{\"\\s:\\#> \"}.  To change it, use a\ncommand like\n\n@example\noctave:13> PS1 = \"\\\\u@@\\\\H> \"\n@end example\n\n@noindent\nwhich will result in the prompt @samp{boris@@kremvax> } for the user\n@samp{boris} logged in on the host @samp{kremvax.kgb.su}.  Note that two\nbackslashes are required to enter a backslash into a string.\n@xref{Strings}.\n@end defvr") ;
   XDEFVAR_INTERNAL("PS2", SBV_PS2, "> ", false, ps2, "-*- texinfo -*-\n@defvr {Built-in Variable} PS2\nThe secondary prompt string, which is printed when Octave is\nexpecting additional input to complete a command.  For example, when\ndefining a function over several lines, Octave will print the value of\n@code{PS1} at the beginning of each line after the first.  The default\nvalue of @code{PS2} is @code{\"> \"}.\n@end defvr") ;
   XDEFVAR_INTERNAL("PS4", SBV_PS4, "+ ", false, ps4, "-*- texinfo -*-\n@defvr {Built-in Variable} PS4\nIf Octave is invoked with the @code{--echo-input} option, the value of\n@code{PS4} is printed before each line of input that is echoed.  The\ndefault value of @code{PS4} is @code{\"+ \"}.  @xref{Invoking Octave}, for\na description of @code{--echo-input}.\n@end defvr") ;
   XDEFVAR_INTERNAL("completion_append_char", SBV_completion_append_char, " ", false, completion_append_char, "-*- texinfo -*-\n@defvr {Built-in Variable} completion_append_char\nThe value of @code{completion_append_char} is used as the character to\nappend to successful command-line completion attempts.  The default\nvalue is @code{\" \"} (a single space).\n@end defvr") ;
   XDEFVAR_INTERNAL("echo_executing_commands", SBV_echo_executing_commands, static_cast<double> (ECHO_OFF), false, echo_executing_commands, "-*- texinfo -*-\n@defvr {Built-in Variable} echo_executing_commands\nThis variable may also be used to control the echo state.  It may be\nthe sum of the following values:\n\n@table @asis\n@item 1\nEcho commands read from script files.\n\n@item 2\nEcho commands from functions.\n\n@item 4\nEcho commands read from command line.\n@end table\n\nMore than one state can be active at once.  For example, a value of 3 is\nequivalent to the command @kbd{echo on all}.\n\nThe value of @code{echo_executing_commands} is set by the @kbd{echo}\ncommand and the command line option @code{--echo-input}.\n@end defvr") ;
}

static void
print_inv_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (inv, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{x}, @var{rcond}] = } inv (@var{a})\n@deftypefnx {Loadable Function} {[@var{x}, @var{rcond}] = } inverse (@var{a})\nCompute the inverse of the square matrix @var{a}.  Return an estimate\nof the reciprocal condition number if requested, otherwise warn of an\nill-conditioned matrix if the reciprocal condition number is small.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (inverse, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} inverse (@var{a})\nSee inv.\n@end deftypefn") 
}

static void
print_kron_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (kron, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Function File} {} kron (@var{a}, @var{b})\nForm the kronecker product of two matrices, defined block by block as\n\n@example\nx = [a(i, j) b]\n@end example\n\nFor example,\n\n@example\n@group\nkron (1:4, ones (3, 1))\n      @result{}  1  2  3  4\n          1  2  3  4\n          1  2  3  4\n@end group\n@end example\n@end deftypefn") 
}

static void
print_lex_doc_strings (void)
{
   XDEFVAR_INTERNAL("warn_separator_insert", SBV_warn_separator_insert, 0.0, false, warn_separator_insert, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_separator_insert\nPrint warning if commas or semicolons might be inserted\nautomatically in literal matrices.\n@end defvr") ;
   XDEFVAR_INTERNAL("warn_single_quote_string", SBV_warn_single_quote_string, 0.0, false, warn_single_quote_string, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_single_quote_string\nPrint warning if a signle quote character is used to introduce a\nstring constant.\n@end defvr") ;
   XDEFVAR_INTERNAL("whitespace_in_literal_matrix", SBV_whitespace_in_literal_matrix, "", false, whitespace_in_literal_matrix, "-*- texinfo -*-\n@defvr {Built-in Variable} whitespace_in_literal_matrix\nControl auto-insertion of commas and semicolons in literal matrices.\n@end defvr") ;
}

static void
print_load_save_doc_strings (void)
{
 XDEFUN_INTERNAL (load, args, nargout, true, "-*- texinfo -*-\n@deffn {Command} load options file v1 v2 @dots{}\nLoad the named variables from the file @var{file}.  As with @code{save},\nyou may specify a list of variables and @code{load} will only extract\nthose variables with names that match.  For example, to restore the\nvariables saved in the file @file{data}, use the command\n\n@example\nload data\n@end example\n\nOctave will refuse to overwrite existing variables unless you use the\noption @samp{-force}.\n\nIf a variable that is not marked as global is loaded from a file when a\nglobal symbol with the same name already exists, it is loaded in the\nglobal symbol table.  Also, if a variable is marked as global in a file\nand a local symbol exists, the local symbol is moved to the global\nsymbol table and given the value from the file.  Since it seems that\nboth of these cases are likely to be the result of some sort of error,\nthey will generate warnings.\n\nIf invoked with a single output argument, Octave returns data instead\nof inserting variables in the symbol table.  If the data file contains\nonly numbers (TAB- or space-delimited columns), a matrix of values is\nreturned.  Otherwise, @code{load} returns a structure with members\n corresponding to the names of the variables in the file.\n\nThe @code{load} command can read data stored in Octave's text and\nbinary formats, and @sc{Matlab}'s binary format.  It will automatically\ndetect the type of file and do conversion from different floating point\nformats (currently only IEEE big and little endian, though other formats\nmay added in the future).\n\nValid options for @code{load} are listed in the following table.\n\n@table @code\n@item -force\nForce variables currently in memory to be overwritten by variables with\nthe same name found in the file.\n\n@item -ascii\nForce Octave to assume the file is in Octave's text format.\n\n@item -binary\nForce Octave to assume the file is in Octave's binary format.\n\n@item -mat-binary\nForce Octave to assume the file is in @sc{Matlab}'s binary format.\n\n@item -mat4-binary\nForce Octave to assume the file is in the binary format written by\n@sc{Matlab} version 4.\n\n@item -hdf5\nForce Octave to assume the file is in HDF5 format.\n(HDF5 is a free, portable binary format developed by the National\nCenter for Supercomputing Applications at the University of Illinois.)\nNote that Octave can read HDF5 files not created by itself, but may\nskip some datasets in formats that it cannot support.  In particular,\nit will skip datasets of data types that it does not recognize, with\ndimensionality > 2, or with names that aren't valid Octave identifiers\nSee, however, the @samp{-import} option to ameliorate this somewhat.\n" "\nHDF5 load and save are not available, as this Octave executable was\nnot linked with the HDF5 library." "\n@item -import\nMake a stronger attempt to import foreign datasets.  Currently, this means\nthat for HDF5 files, invalid characters in names are converted to @samp{_},\nand datasets with dimensionality > 2 are imported as lists of matrices (or\nlists of lists of matrices, or ...).\n\n@end table\n@end deffn") 
 XDEFUN_INTERNAL (save, args,, true, "-*- texinfo -*-\n@deffn {Command} save options file v1 v2 @dots{}\nSave the named variables @var{v1}, @var{v2}, @dots{} in the file\n@var{file}.  The special filename @samp{-} can be used to write the\noutput to your terminal.  If no variable names are listed, Octave saves\nall the variables in the current scope.  Valid options for the\n@code{save} command are listed in the following table.  Options that\nmodify the output format override the format specified by the built-in\nvariable @code{default_save_format}.\n\n@table @code\n@item -ascii\nSave the data in Octave's text data format.\n\n@item -binary\nSave the data in Octave's binary data format.\n\n@item -float-binary\nSave the data in Octave's binary data format but only using single\nprecision.  You should use this format only if you know that all the\nvalues to be saved can be represented in single precision.\n\n@item -mat-binary\nSave the data in @sc{Matlab}'s binary data format.\n\n@item -mat4-binary\nSave the data in the binary format written by @sc{Matlab} version 4.\n\n@item -hdf5\nSave the data in HDF5 format.\n(HDF5 is a free, portable binary format developed by the National\nCenter for Supercomputing Applications at the University of Illinois.)\n" "\nHDF5 load and save are not available, as this Octave executable was\nnot linked with the HDF5 library." "\n@item -float-hdf5\nSave the data in HDF5 format but only using single precision.\nYou should use this format only if you know that all the\nvalues to be saved can be represented in single precision.\n\n@item -save-builtins\nForce Octave to save the values of built-in variables too.  By default,\nOctave does not save built-in variables.\n@end table\n\nThe list of variables to save may include wildcard patterns containing\nthe following special characters:\n@table @code\n@item ?\nMatch any single character.\n\n@item *\nMatch zero or more characters.\n\n@item [ @var{list} ]\nMatch the list of characters specified by @var{list}.  If the first\ncharacter is @code{!} or @code{^}, match all characters except those\nspecified by @var{list}.  For example, the pattern @samp{[a-zA-Z]} will\nmatch all lower and upper case alphabetic characters. \n@end table\n\nExcept when using the @sc{Matlab} binary data file format, saving global\nvariables also saves the global status of the variable, so that if it is\nrestored at a later time using @samp{load}, it will be restored as a\nglobal variable.\n\nThe command\n\n@example\nsave -binary data a b*\n@end example\n\n@noindent\nsaves the variable @samp{a} and all variables beginning with @samp{b} to\nthe file @file{data} in Octave's binary format.\n@end deffn") 
   XDEFVAR_INTERNAL("crash_dumps_octave_core", SBV_crash_dumps_octave_core, 1.0, false, crash_dumps_octave_core, "-*- texinfo -*-\n@defvr {Built-in Variable} crash_dumps_octave_core\nIf this variable is set to a nonzero value, Octave tries to save all\ncurrent variables the the file \"octave-core\" if it crashes or receives a\nhangup, terminate or similar signal.  The default value is 1.\n@end defvr") ;
   XDEFVAR_INTERNAL("default_save_format", SBV_default_save_format, "ascii", false, default_save_format, "-*- texinfo -*-\n@defvr {Built-in Variable} default_save_format\nThis variable specifies the default format for the @code{save} command.\nIt should have one of the following values: @code{\"ascii\"},\n@code{\"binary\"}, @code{float-binary}, or @code{\"mat-binary\"}.  The\ninitial default save format is Octave's text format.\n@end defvr") ;
   XDEFVAR_INTERNAL("save_header_format_string", SBV_save_header_format_string, default_save_header_format (), false, save_header_format_string, "-*- texinfo -*-\n@defvr {Built-in Variable} save_header_format_string\nThis variable specifies the the format string for the comment line\nthat is written at the beginning of text-format data files saved by\nOctave.  The format string is passed to @code{strftime} and should\nbegin with the character @samp{#} and contain no newline characters.\nIf the value of @code{save_header_format_string} is the empty string,\nthe header comment is omitted from text-format data files.  The\ndefault value is\n\n@example\n\"# Created by Octave VERSION, %a %b %d %H:%M:%S %Y %Z <USER@@HOST>\"\n@end example\n@seealso{strftime}\n@end defvr") ;
   XDEFVAR_INTERNAL("save_precision", SBV_save_precision, 15.0, false, save_precision, "-*- texinfo -*-\n@defvr {Built-in Variable} save_precision\nThis variable specifies the number of digits to keep when saving data in\ntext format.  The default value is 17.\n@end defvr") ;
}

static void
print_log_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (logm, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} logm (@var{a})\nCompute the matrix logarithm of the square matrix @var{a}.  Note that\nthis is currently implemented in terms of an eigenvalue expansion and\nneeds to be improved to be more robust.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (sqrtm, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} sqrtm (@var{a})\nCompute the matrix square root of the square matrix @var{a}.  Note that\nthis is currently implemented in terms of an eigenvalue expansion and\nneeds to be improved to be more robust.\n@end deftypefn") 
}

static void
print_lpsolve_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (lp_solve,,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} lp_solve ()\nNot implemented yet...\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (lp_solve_options,,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} lp_solve_options ()\nNot implemented yet...\n@end deftypefn") 
}

static void
print_lsode_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (lsode, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} lsode (@var{fcn}, @var{x0}, @var{t}, @var{t_crit})\nReturn a matrix of @var{x} as a function of @var{t}, given the initial\nstate of the system @var{x0}.  Each row in the result matrix corresponds\nto one of the elements in the vector @var{t}.  The first element of\n@var{t} corresponds to the initial state @var{x0}, so that the first row\nof the output is @var{x0}.\n\nThe first argument, @var{fcn}, is a string that names the function to\ncall to compute the vector of right hand sides for the set of equations.\nIt must have the form\n\n@example\n@var{xdot} = f (@var{x}, @var{t})\n@end example\n\n@noindent\nwhere @var{xdot} and @var{x} are vectors and @var{t} is a scalar.\n\nThe fourth argument is optional, and may be used to specify a set of\ntimes that the ODE solver should not integrate past.  It is useful for\navoiding difficulties with singularities and points where there is a\ndiscontinuity in the derivative.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (lsode_options, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} lsode_options (@var{opt}, @var{val})\nWhen called with two arguments, this function allows you set options\nparameters for the function @code{lsode}.  Given one argument,\n@code{lsode_options} returns the value of the corresponding option.  If\nno arguments are supplied, the names of all the available options and\ntheir current values are displayed.\n@end deftypefn") 
}

static void
print_lu_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (lu, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{l}, @var{u}, @var{p}] =} lu (@var{a})\n@cindex LU decomposition\nCompute the LU decomposition of @var{a}, using subroutines from\n@sc{Lapack}.  The result is returned in a permuted form, according to\nthe optional return value @var{p}.  For example, given the matrix\n@code{a = [1, 2; 3, 4]},\n\n@example\n[l, u, p] = lu (a)\n@end example\n\n@noindent\nreturns\n\n@example\nl =\n\n  1.00000  0.00000\n  0.33333  1.00000\n\nu =\n\n  3.00000  4.00000\n  0.00000  0.66667\n\np =\n\n  0  1\n  1  0\n@end example\n@end deftypefn") 
}

static void
print_mappers_doc_strings (void)
{
   XDEFUN_MAPPER_INTERNAL(abs, 0, 0, 0, std::fabs, abs, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} abs (@var{z})\nCompute the magnitude of @var{z}, defined as\n@iftex\n@tex\n$|z| = \\sqrt{x^2 + y^2}$.\n@end tex\n@end iftex\n@ifinfo\n|@var{z}| = @code{sqrt (x^2 + y^2)}.\n@end ifinfo\n\nFor example,\n\n@example\n@group\nabs (3 + 4i)\n     @result{} 5\n@end group\n@end example\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(acos, 0, 0, 0, std::acos, 0, acos, -1.0, 1.0, 1, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} acos (@var{x})\nCompute the inverse cosine of each element of @var{x}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(acosh, 0, 0, 0, acosh, 0, acosh, 1.0, 1.7976931348623157e+308, 1, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} acosh (@var{x})\nCompute the inverse hyperbolic cosine of each element of @var{x}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(angle, 0, 0, 0, arg, arg, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} angle (@var{z})\nSee arg.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(arg, 0, 0, 0, arg, arg, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} arg (@var{z})\n@deftypefnx {Mapping Function} {} angle (@var{z})\nCompute the argument of @var{z}, defined as\n@iftex\n@tex\n$\\theta = \\tan^{-1}(y/x)$.\n@end tex\n@end iftex\n@ifinfo\n@var{theta} = @code{atan (@var{y}/@var{x})}.\n@end ifinfo\n\n@noindent\nin radians. \n\nFor example,\n\n@example\n@group\narg (3 + 4i)\n     @result{} 0.92730\n@end group\n@end example\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(asin, 0, 0, 0, std::asin, 0, asin, -1.0, 1.0, 1, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} asin (@var{x})\nCompute the inverse sine of each element of @var{x}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(asinh, 0, 0, 0, asinh, 0, asinh, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} asinh (@var{x})\nOmpute the inverse hyperbolic sine of each element of @var{x}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(atan, 0, 0, 0, std::atan, 0, atan, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} atan (@var{x})\nCompute the inverse tangent of each element of @var{x}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(atanh, 0, 0, 0, atanh, 0, atanh, -1.0, 1.0, 1, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} atanh (@var{x})\nCompute the inverse hyperbolic tanget of each element of @var{x}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(ceil, 0, 0, 0, std::ceil, 0, ceil, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} ceil (@var{x})\nReturn the smallest integer not less than @var{x}.  If @var{x} is\ncomplex, return @code{ceil (real (@var{x})) + ceil (imag (@var{x})) * I}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(conj, 0, 0, 0, xconj, 0, xconj, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} conj (@var{z})\nReturn the complex conjugate of @var{z}, defined as\n@iftex\n@tex\n$\\bar{z} = x - iy$.\n@end tex\n@end iftex\n@ifinfo\n@code{conj (@var{z})} = @var{x} - @var{i}@var{y}.\n@end ifinfo\n@end deftypefn\n@seealso{real and imag}") ;
   XDEFUN_MAPPER_INTERNAL(cos, 0, 0, 0, std::cos, 0, cos, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} cos (@var{x})\nCompute the cosine of each element of @var{x}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(cosh, 0, 0, 0, std::cosh, 0, cosh, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} cosh (@var{x})\nCompute the hyperbolic cosine of each element of @var{x}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(erf, 0, 0, 0, xerf, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} erf (@var{z})\nComputes the error function,\n@iftex\n@tex\n$$\n {\\rm erf} (z) = {2 \\over \\sqrt{\\pi}}\\int_0^z e^{-t^2} dt\n$$\n@end tex\n@end iftex\n@ifinfo\n\n@smallexample\n                         z\n                        /\nerf (z) = (2/sqrt (pi)) | e^(-t^2) dt\n                        /\n                     t=0\n@end smallexample\n@end ifinfo\n@end deftypefn\n@seealso{erfc and erfinv}") ;
   XDEFUN_MAPPER_INTERNAL(erfc, 0, 0, 0, xerfc, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} erfc (@var{z})\nComputes the complementary error function,\n@iftex\n@tex\n$1 - {\\rm erf} (z)$.\n@end tex\n@end iftex\n@ifinfo\n@code{1 - erf (@var{z})}.\n@end ifinfo\n@end deftypefn\n\n@seealso{erf and erfinv}") ;
   XDEFUN_MAPPER_INTERNAL(exp, 0, 0, 0, std::exp, 0, exp, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} exp (@var{x})\nCompute the exponential of @var{x}.  To compute the matrix exponential,\nsee @ref{Linear Algebra}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(finite, 0, xfinite, xfinite, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} finite (@var{x})\nReturn 1 for elements of @var{x} that are finite values and zero\notherwise. For example,\n\n@example\n@group\nfinite ([13, Inf, NaN])\n     @result{} [ 1, 0, 0 ]\n@end group\n@end example\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(fix, 0, 0, 0, fix, 0, fix, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} fix (@var{x})\nTruncate @var{x} toward zero.  If @var{x} is complex, return\n@code{fix (real (@var{x})) + fix (imag (@var{x})) * I}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(floor, 0, 0, 0, std::floor, 0, floor, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} floor (@var{x})\nReturn the largest integer not greater than @var{x}.  If @var{x} is\ncomplex, return @code{floor (real (@var{x})) + floor (imag (@var{x})) * I}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(gamma, 0, 0, 0, xgamma, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} gamma (@var{z})\nComputes the Gamma function,\n@iftex\n@tex\n$$\n \\Gamma (z) = \\int_0^\\infty t^{z-1} e^{-t} dt.\n$$\n@end tex\n@end iftex\n@ifinfo\n\n@example\n            infinity\n            /\ngamma (z) = | t^(z-1) exp (-t) dt.\n            /\n         t=0\n@end example\n@end ifinfo\n@end deftypefn\n\n@seealso{gammai and lgamma}") ;
   XDEFUN_MAPPER_INTERNAL(imag, 0, 0, 0, imag, ximag, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} imag (@var{z})\nReturn the imaginary part of @var{z} as a real number.\n@end deftypefn\n\n@seealso{real and conj}") ;
   XDEFUN_MAPPER_INTERNAL(isalnum, xisalnum, 0, 0, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} isalnum (@var{s})\nReturn 1 for characters that are letters or digits (@code{isalpha\n(@var{a})} or @code{isdigit (@var{a})} is true).\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(isalpha, xisalpha, 0, 0, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} isalpha (@var{s})\nReturn true for characters that are letters (@code{isupper (@var{a})}\nor @code{islower (@var{})} is true).\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(isascii, xisascii, 0, 0, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} isascii (@var{s})\nReturn 1 for characters that are ASCII (in the range 0 to 127 decimal).\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(iscntrl, xiscntrl, 0, 0, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} iscntrl (@var{s})\nReturn 1 for control characters.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(isdigit, xisdigit, 0, 0, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} isdigit (@var{s})\nReturn 1 for characters that are decimal digits.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(isinf, 0, xisinf, xisinf, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} isinf (@var{x})\nReturn 1 for elements of @var{x} that are infinite and zero\notherwise. For example,\n\n@example\n@group\nisinf ([13, Inf, NaN])\n     @result{} [ 0, 1, 0 ]\n@end group\n@end example\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(isgraph, xisgraph, 0, 0, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} isgraph (@var{s})\nReturn 1 for printable characters (but not the space character).\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(islower, xislower, 0, 0, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} islower (@var{s})\nReturn 1 for characters that are lower case letters.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(isnan, 0, xisnan, xisnan, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} isnan (@var{x})\nReturn 1 for elements of @var{x} that are NaN values and zero\notherwise. For example,\n\n@example\n@group\nisnan ([13, Inf, NaN])\n     @result{} [ 0, 0, 1 ]\n@end group\n@end example\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(isprint, xisprint, 0, 0, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} isprint (@var{s})\nReturn 1 for printable characters (including the space character).\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(ispunct, xispunct, 0, 0, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} ispunct (@var{s})\nReturn 1 for punctuation characters.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(isspace, xisspace, 0, 0, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} isspace (@var{s})\nReturn 1 for whitespace characters (space, formfeed, newline,\ncarriage return, tab, and vertical tab).\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(isupper, xisupper, 0, 0, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} isupper (@var{s})\nReturn 1 for upper case letters.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(isxdigit, xisxdigit, 0, 0, 0, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} isxdigit (@var{s})\nReturn 1 for characters that are hexadecimal digits.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(lgamma, 0, 0, 0, xlgamma, 0, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} lgamma (@var{a}, @var{x})\n@deftypefnx {Mapping Function} {} gammaln (@var{a}, @var{x})\nReturn the natural logarithm of the gamma function.\n@end deftypefn\n@seealso{gamma and gammai}") ;
   XDEFUN_MAPPER_INTERNAL(log, 0, 0, 0, std::log, 0, log, 0.0, 1.7976931348623157e+308, 1, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} log (@var{x})\nCompute the natural logarithm for each element of @var{x}.  To compute the\nmatrix logarithm, see @ref{Linear Algebra}.\n@end deftypefn\n@seealso{log2, log10, logspace, and exp}") ;
   XDEFUN_MAPPER_INTERNAL(log10, 0, 0, 0, std::log10, 0, log10, 0.0, 1.7976931348623157e+308, 1, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} log10 (@var{x})\nCompute the base-10 logarithm for each element of @var{x}.\n@end deftypefn\n@seealso{log, log2, logspace, and exp}") ;
   XDEFUN_MAPPER_INTERNAL(real, 0, 0, 0, real, xreal, 0, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} real (@var{z})\nReturn the real part of @var{z}.\n@end deftypefn\n@seealso{imag and conj}") ;
   XDEFUN_MAPPER_INTERNAL(round, 0, 0, 0, round, 0, round, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} round (@var{x})\nReturn the integer nearest to @var{x}.  If @var{x} is complex, return\n@code{round (real (@var{x})) + round (imag (@var{x})) * I}.\n@end deftypefn\n@seealso{rem}") ;
   XDEFUN_MAPPER_INTERNAL(sign, 0, 0, 0, signum, 0, signum, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} sign (@var{x})\nCompute the @dfn{signum} function, which is defined as\n@iftex\n@tex\n$$\n{\\rm sign} (@var{x}) = \\cases{1,&$x>0$;\\cr 0,&$x=0$;\\cr -1,&$x<0$.\\cr}\n$$\n@end tex\n@end iftex\n@ifinfo\n\n@example\n           -1, x < 0;\nsign (x) =  0, x = 0;\n            1, x > 0.\n@end example\n@end ifinfo\n\nFor complex arguments, @code{sign} returns @code{x ./ abs (@var{x})}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(sin, 0, 0, 0, std::sin, 0, sin, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} sin (@var{x})\nCompute the sin of each element of @var{x}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(sinh, 0, 0, 0, std::sinh, 0, sinh, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} sinh (@var{x})\nCompute the inverse hyperbolic sin of each element of @var{x}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(sqrt, 0, 0, 0, std::sqrt, 0, sqrt, 0.0, 1.7976931348623157e+308, 1, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} sqrt (@var{x})\nCompute the square root of @var{x}.  If @var{x} is negative, a complex\nresult is returned.  To compute the matrix square root, see\n@ref{Linear Algebra}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(tan, 0, 0, 0, std::tan, 0, tan, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} tan (@var{z})\nCompute tanget of each element of @var{x}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(tanh, 0, 0, 0, std::tanh, 0, tanh, 0.0, 0.0, 0, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} tanh (@var{x})\nCompute hyperbolic tangent of each element of @var{x}.\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(toascii, xtoascii, 0, 0, 0, 0, 0, 0.0, 0.0, 1, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} toascii (@var{s})\nReturn ASCII representation of @var{s} in a matrix.  For example,\n\n@example\n@group\ntoascii (\"ASCII\")\n     @result{} [ 65, 83, 67, 73, 73 ]\n@end group\n\n@end example\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(tolower, xtolower, 0, 0, 0, 0, 0, 0.0, 0.0, 2, "-*- texinfo -*-\n@deftypefn {Mapping Function} {} tolower (@var{s})\nReturn a copy of the string @var{s}, with each upper-case character\nreplaced by the corresponding lower-case one; nonalphabetic characters\nare left unchanged.  For example,\n\n@example\ntolower (\"MiXeD cAsE 123\")\n     @result{} \"mixed case 123\"\n@end example\n@end deftypefn") ;
   XDEFUN_MAPPER_INTERNAL(toupper, xtoupper, 0, 0, 0, 0, 0, 0.0, 0.0, 2, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} toupper (@var{s})\nReturn a copy of the string @var{s}, with each  lower-case character\nreplaced by the corresponding upper-case one; nonalphabetic characters\nare left unchanged.  For example,\n\n@example\n@group\ntoupper (\"MiXeD cAsE 123\")\n     @result{} \"MIXED CASE 123\"\n@end group\n@end example\n@end deftypefn") ;
   XDEFALIAS_INTERNAL(gammaln, lgamma) ;
   XDEFALIAS_INTERNAL(isfinite, finite) ;
}

static void
print_minmax_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (min, args, nargout, 0, "-*- texinfo -*-\nFor a vector argument, return the minimum value.  For a matrix\nargument, return the minimum value from each column, as a row\nvector.  Thus,\n\n@example\nmin (min (@var{x}))\n@end example\n\n@noindent\nreturns the smallest element of @var{x}.\n\nFor complex arguments, the magnitude of the elements are used for\ncomparison.\n\nIf called with two output arguments, also returns the index of the\nminimum value(s). Thus,\n@example\n[x, ix] = min ([1, 3, 0, 2, 5])\n@end example\n\n@noindent\nreturns @var{x} = 0 and @var{ix} = 3.") 
 XDEFUN_DLD_INTERNAL (max, args, nargout, 0, "-*- texinfo -*-\nFor a vector argument, return the maximum value.  For a matrix\nargument, return the maximum value from each column, as a row\nvector.  Thus,\n\n@example\nmax (max (@var{x}))\n@end example\n\n@noindent\nreturns the largest element of @var{x}.\n\nFor complex arguments, the magnitude of the elements are used for\ncomparison.\n\nIf called with two output arguments, also returns the index of the\nmaximum value(s). Thus,\n@example\n[x, ix] = max([1, 3, 5, 2, 5])\n@end example\n\n@noindent\nreturns @var{x} = 5 and @var{ix} = 3.") 
}

static void
print_oct_hist_doc_strings (void)
{
 XDEFUN_INTERNAL (edit_history, args,, true, "-*- texinfo -*-\n@deffn {Command} edit_history options\nIf invoked with no arguments, @code{edit_history} allows you to edit the\nhistory list using the editor named by the variable @code{EDITOR}.  The\ncommands to be edited are first copied to a temporary file.  When you\nexit the editor, Octave executes the commands that remain in the file.\nIt is often more convenient to use @code{edit_history} to define functions \nrather than attempting to enter them directly on the command line.\nBy default, the block of commands is executed as soon as you exit the\neditor.  To avoid executing any commands, simply delete all the lines\nfrom the buffer before exiting the editor.\n\nThe @code{edit_history} command takes two optional arguments specifying\nthe history numbers of first and last commands to edit.  For example,\nthe command\n\n@example\nedit_history 13\n@end example\n\n@noindent\nextracts all the commands from the 13th through the last in the history\nlist.  The command\n\n@example\nedit_history 13 169\n@end example\n\n@noindent\nonly extracts commands 13 through 169.  Specifying a larger number for\nthe first command than the last command reverses the list of commands\nbefore placing them in the buffer to be edited.  If both arguments are\nomitted, the previous command in the history list is used.\n@end deffn") 
 XDEFUN_INTERNAL (history, args,, true, "-*- texinfo -*-\n@deffn {Command} history options\nIf invoked with no arguments, @code{history} displays a list of commands\nthat you have executed.  Valid options are:\n\n@table @code\n@item -w @var{file}\nWrite the current history to the file @var{file}.  If the name is\nomitted, use the default history file (normally @file{~/.octave_hist}).\n\n@item -r @var{file}\nRead the file @var{file}, replacing the current history list with its\ncontents.  If the name is omitted, use the default history file\n(normally @file{~/.octave_hist}).\n\n@item @var{n}\nOnly display the most recent @var{n} lines of history.\n\n@item -q\nDon't number the displayed lines of history.  This is useful for cutting\nand pasting commands if you are using the X Window System.\n@end table\n\nFor example, to display the five most recent commands that you have\ntyped without displaying line numbers, use the command\n@kbd{history -q 5}.\n@end deffn") 
 XDEFUN_INTERNAL (run_history, args,, true, "-*- texinfo -*-\n@deffn {Command} run_history [first] [last]\nSimilar to @code{edit_history}, except that the editor is not invoked,\nand the commands are simply executed as they appear in the history list.\n@end deffn") 
   XDEFVAR_INTERNAL("history_file", SBV_history_file, default_history_file (), false, history_file, "-*- texinfo -*-\n@defvr {Built-in Variable} history_file\nThis variable specifies the name of the file used to store command\nhistory.  The default value is @code{\"~/.octave_hist\"}, but may be\noverridden by the environment variable @code{OCTAVE_HISTFILE}.\n@end defvr") ;
   XDEFVAR_INTERNAL("history_size", SBV_history_size, tmp_hist_size, false, history_size, "-*- texinfo -*-\n@defvr {Built-in Variable} history_size\nThis variable specifies how many entries to store in the history file.\nThe default value is @code{1024}, but may be overridden by the\nenvironment variable @code{OCTAVE_HISTSIZE}.\n@end defvr") ;
   XDEFVAR_INTERNAL("saving_history", SBV_saving_history, 1.0, false, saving_history, "-*- texinfo -*-\n@defvr {Built-in Variable} saving_history\nIf the value of @code{saving_history} is nonzero, command entered\non the command line are saved in the file specified by the variable\n@code{history_file}.\n@end defvr") ;
}

static void
print_oct_procbuf_doc_strings (void)
{
   XDEFVAR_INTERNAL("__kluge_procbuf_delay__", SBV___kluge_procbuf_delay__, static_cast<double> (Vkluge_procbuf_delay), false, kluge_procbuf_delay, "-*- texinfo -*-\n@defvr __kluge_procbuf_delay__\nNumber of microseconds to delay in the parent after forking.\n@end defvr") ;
}

static void
print_ov_cell_doc_strings (void)
{
 XDEFUN_INTERNAL (iscell, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} iscell (@var{x})\nReturn true if @var{x} is a cell array object.  Otherwise, return\nfalse.\n@end deftypefn") 
 XDEFUN_INTERNAL (cell, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} cell (@var{x})\n@deftypefnx {Built-in Function} {} cell (@var{n}, @var{m})\nCreate a new cell array object.  If invoked with a single scalar\nargument, @code{cell} returns a square cell array with the dimension\nspecified.  If you supply two scalar arguments, @code{cell} takes\nthem to be the number of rows and columns.  If given a vector with two\nelements, @code{cell} uses the values of the elements as the number of\nrows and columns, respectively.\n@end deftypefn") 
}

static void
print_ov_list_doc_strings (void)
{
 XDEFUN_INTERNAL (list, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} list (@var{a1}, @var{a2}, @dots{})\nCreate a new list with elements given by the arguments @var{a1},\n@var{a2}, @dots{}.\n@end deftypefn") 
 XDEFUN_INTERNAL (nth, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} nth (@var{list}, @var{n})\nReturn the @var{n}-th element of @var{list}.\n@end deftypefn") 
 XDEFUN_INTERNAL (append, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} append (@var{list}, @var{a1}, @var{a2}, @dots{})\nReturn a new list created by appending @var{a1}, @var{a1}, @dots{}, to\n@var{list}.  If any of the arguments to be appended is a list, its\nelements are appended individually.  For example,\n\n@example\nx = list (1, 2);\ny = list (3, 4);\nappend (x, y);\n@end example\n\n@noindent\nresults in the list containing the four elements @samp{(1 2 3 4)}, not\na list containing the three elements @samp{(1 2 (3 4))}.\n@end deftypefn") 
 XDEFUN_INTERNAL (reverse, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} reverse (@var{list})\nReturn a new list created by reversing the elements of @var{list}.\n@end deftypefn") 
 XDEFUN_INTERNAL (splice, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} splice (@var{list_1}, @var{offset}, @var{length}, @var{list_2})\nReplace @var{length} elements of @var{list_1} beginning at\n@var{offset} with the contents of @var{list_2} (if any).  If\n@var{length} is omitted, all elements from @var{offset} to the end of\n@var{list_1} are replaced.  As a special case, if @var{offset} is one\ngreater than the length of @var{list_1} and @var{length} is 0, splice\nis equivalent to @code{append (@var{list_1}, @var{list_2})}.\n@end deftypefn") 
}

static void
print_ov_typeinfo_doc_strings (void)
{
 XDEFUN_INTERNAL (typeinfo, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} typeinfo (@var{expr})\n\nReturn the type of the expression @var{expr}, as a string.  If\n@var{EXPR}  is omitted, return an array of strings containing all the\ncurrently installed data types.\n@end deftypefn") 
}

static void
print_ov_usr_fcn_doc_strings (void)
{
 XDEFUNX_INTERNAL ("va_arg", Fva_arg, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} va_arg ()\nReturn the value of the next available argument and move the internal\npointer to the next argument.  It is an error to call @code{va_arg}\nwhen ther eare no more arguments available, or in a function that\nhas not been declared to take a variable number of parameters.\n@end deftypefn") 
 XDEFUN_INTERNAL (va_start, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} va_start ()\nPosition an internal pointer to the first unnamed argument in\nfunctions that have been declared to accept a variable number of\narguments.  It is an error to call @code{va_start} in a function\nthat has not been declared to take a variable number of parameters.\n@end deftypefn") 
 XDEFUN_INTERNAL (vr_val, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} vr_val (@var{x})\nEach time this function is called, it places the value of its argument\nat the end of the list of values to return from the current\nfunction.  Once @code{vr_val} has been called, there is no way to go\nback to the beginning of the list and rewrite any of the return\nvalues.  This function may only be called within functions that have\nbeen declared to return an unspecified number of output arguments.\n@end deftypefn") 
   XDEFVAR_INTERNAL("default_return_value", SBV_default_return_value, Matrix (), false, 0, "-*- texinfo -*-\n@defvr {Built-in Variable} default_return_value\nThe value given to otherwise uninitialized return values if\n@code{define_all_return_values} is nonzero.  The default value is\n@code{[]}.\n@end defvr") ;
   XDEFVAR_INTERNAL("define_all_return_values", SBV_define_all_return_values, 0.0, false, define_all_return_values, "-*- texinfo -*-\n@defvr {Built-in Variable} define_all_return_values\nIf the value of @code{define_all_return_values} is nonzero, Octave\nwill substitute the value specified by @code{default_return_value} for\nany return values that remain undefined when a function returns.  The\ndefault value is 0.\n@end defvr") ;
   XDEFVAR_INTERNAL("max_recursion_depth", SBV_max_recursion_depth, 256.0, false, max_recursion_depth, "-*- texinfo -*-\n@defvr {Built-in Variable} max_recursion_depth\nLimit the number of times a function may be called recursively.\nIf the limit is exceeded, an error message is printed and control\nreturns to the top level.\n\nThe default value is 256.\n@end defvr") ;
   XDEFVAR_INTERNAL("return_last_computed_value", SBV_return_last_computed_value, 0.0, false, return_last_computed_value, "-*- texinfo -*-\n@defvr {Built-in Variable} return_last_computed_value\nIf the value of @code{return_last_computed_value} is true, and a\nfunction is defined without explicitly specifying a return value, the\nfunction will return the value of the last expression.  Otherwise, no\nvalue will be returned.  The default value is 0.\n\nFor example, the function\n\n@example\nfunction f ()\n  2 + 2;\nendfunction\n@end example\n\n@noindent\nwill either return nothing, if the value of\n@code{return_last_computed_value} is 0, or 4, if the value of\n@code{return_last_computed_value} is nonzero.\n@end defvr") ;
}

static void
print_ov_doc_strings (void)
{
   XDEFVAR_INTERNAL("do_fortran_indexing", SBV_do_fortran_indexing, 0.0, false, do_fortran_indexing, "-*- texinfo -*-\n@defvr {Built-in Variable} do_fortran_indexing\nIf the value of @code{do_fortran_indexing} is nonzero, Octave allows \nyou to select elements of a two-dimensional matrix using a single index\nby treating the matrix as a single vector created from the columns of\nthe matrix.  The default value is 0. \n@end defvr") ;
   XDEFVAR_INTERNAL("implicit_str_to_num_ok", SBV_implicit_str_to_num_ok, 0.0, false, implicit_str_to_num_ok, "-*- texinfo -*-\n@defvr {Built-in Variable} implicit_str_to_num_ok\nIf the value of @code{implicit_str_to_num_ok} is nonzero, implicit\nconversions of strings to their numeric ASCII equivalents are allowed.\nOtherwise, an error message is printed and control is returned to the\ntop level.  The default value is 0.\n@end defvr") ;
   XDEFVAR_INTERNAL("ok_to_lose_imaginary_part", SBV_ok_to_lose_imaginary_part, "warn", false, ok_to_lose_imaginary_part, "-*- texinfo -*-\n@defvr {Built-in Variable} ok_to_lose_imaginary_part\nIf the value of @code{ok_to_lose_imaginary_part} is nonzero, implicit\nconversions of complex numbers to real numbers are allowed (for example,\nby fsolve).  If the value is @code{\"warn\"}, the conversion is allowed,\nbut a warning is printed.  Otherwise, an error message is printed and\ncontrol is returned to the top level.  The default value is\n@code{\"warn\"}.\n@end defvr") ;
   XDEFVAR_INTERNAL("prefer_column_vectors", SBV_prefer_column_vectors, 1.0, false, prefer_column_vectors, "-*- texinfo -*-\n@defvr {Built-in Variable} prefer_column_vectors\nIf @code{prefer_column_vectors} is nonzero, operations like\n\n@example\nfor i = 1:10\n  a (i) = i;\nendfor\n@end example\n\n@noindent\n(for @code{a} previously  undefined) produce column vectors.  Otherwise, row\nvectors are preferred.  The default value is 1.\n\nIf a variable is already defined to be a vector (a matrix with a single\nrow or column), the original orientation is respected, regardless of the\nvalue of @code{prefer_column_vectors}.\n@end defvr") ;
   XDEFVAR_INTERNAL("print_answer_id_name", SBV_print_answer_id_name, 1.0, false, print_answer_id_name, "-*- texinfo -*-\n@defvr {Built-in Variable} print_answer_id_name\nIf the value of @code{print_answer_id_name} is nonzero, variable\nnames are printed along with the result.  Otherwise, only the result\nvalues are printed.  The default value is 1.\n@end defvr") ;
   XDEFVAR_INTERNAL("propagate_empty_matrices", SBV_propagate_empty_matrices, 1.0, false, propagate_empty_matrices, "-*- texinfo -*-\n@defvr {Built-in Variable} propagate_empty_matrices\nIf the value of @code{propagate_empty_matrices} is nonzero,\nfunctions like @code{inverse} and @code{svd} will return an empty matrix\nif they are given one as an argument.  The default value is 1.\n@end defvr") ;
   XDEFVAR_INTERNAL("resize_on_range_error", SBV_resize_on_range_error, 1.0, false, resize_on_range_error, "-*- texinfo -*-\n@defvr {Built-in Variable} resize_on_range_error\nIf the value of @code{resize_on_range_error} is nonzero, expressions\nlike\n\n@example\nfor i = 1:10\n  a (i) = sqrt (i);\nendfor\n@end example\n\n@noindent\n(for @code{a} previously undefined) result in the variable @code{a}\nbeing resized to be just large enough to hold the new value.  New\nelements that have not been given a value are set to zero.  If the value\nof @code{resize_on_range_error} is 0, an error message is printed and\ncontrol is returned to the top level.  The default value is 1.\n@end defvr") ;
   XDEFVAR_INTERNAL("struct_levels_to_print", SBV_struct_levels_to_print, 2.0, false, struct_levels_to_print, "-*- texinfo -*-\n@defvr {Built-in Variable} struct_levels_to_print\nYou can tell Octave how many structure levels to display by setting the\nbuilt-in variable @code{struct_levels_to_print}.  The default value is 2.\n@end defvr") ;
   XDEFVAR_INTERNAL("warn_divide_by_zero", SBV_warn_divide_by_zero, 1.0, false, warn_divide_by_zero, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_divide_by_zero\nIf the value of @code{warn_divide_by_zero} is nonzero, a warning\nis issued when Octave encounters a division by zero.  If the value is\n0, the warning is omitted.  The default value is 1.\n@end defvr") ;
}

static void
print_pager_doc_strings (void)
{
 XDEFUN_INTERNAL (diary, args,, true, "-*- texinfo -*-\n@deffn {Command} diary options\nCreate a list of all commands @emph{and} the output they produce, mixed\ntogether just as you see them on your terminal.  Valid options are:\n\n@table @code\n@item on\nStart recording your session in a file called @file{diary} in your\ncurrent working directory.\n\n@item off\nStop recording your session in the diary file.\n\n@item @var{file}\nRecord your session in the file named @var{file}.\n@end table\n\nWithout any arguments, @code{diary} toggles the current diary state.\n@end deffn") 
 XDEFUN_INTERNAL (more, args,, true, "-*- texinfo -*-\n@deffn {Command} more\n@deffnx {Command} more on\n@deffnx {Command} more off\nTurn output pagination on or off.  Without an argument, @code{more}\ntoggles the current state.\n@end deffn") 
   XDEFVAR_INTERNAL("PAGER", SBV_PAGER, default_pager (), false, pager_binary, "-*- texinfo -*-\n@defvr {Built-in Variable} PAGER\nThe default value is normally @code{\"less\"}, @code{\"more\"}, or\n@code{\"pg\"}, depending on what programs are installed on your system.\n@xref{Installation}.\n\nWhen running interactively, Octave sends any output intended for your\nterminal that is more than one screen long to the program named by the\nvalue of the variable @code{PAGER}.\n@end defvr") ;
   XDEFVAR_INTERNAL("page_output_immediately", SBV_page_output_immediately, 0.0, false, page_output_immediately, "-*- texinfo -*-\n@defvr {Built-in Variable} page_output_immediately\nIf the value of @code{page_output_immediately} is nonzero, Octave sends\noutput to the pager as soon as it is available.  Otherwise, Octave\nbuffers its output and waits until just before the prompt is printed to\nflush it to the pager.  The default value is 0.\n@end defvr") ;
   XDEFVAR_INTERNAL("page_screen_output", SBV_page_screen_output, 1.0, false, page_screen_output, "-*- texinfo -*-\n@defvr {Built-in Variable} page_screen_output\nIf the value of @code{page_screen_output} is nonzero, all output\nintended for the screen that is longer than one page is sent through a\npager.  This allows you to view one screenful at a time.  Some pagers\n(such as @code{less}---see @ref{Installation}) are also capable of moving\nbackward on the output.  The default value is 1.\n@end defvr") ;
}

static void
print_parse_doc_strings (void)
{
 XDEFUN_INTERNAL (source, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} source (@var{file})\nParse and execute the contents of @var{file}.  This is equivalent to\nexecuting commands from a script file, but without requiring the file to\nbe named @file{@var{file}.m}.\n@end deftypefn") 
 XDEFUN_INTERNAL (feval, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} feval (@var{name}, @dots{})\nEvaluate the function named @var{name}.  Any arguments after the first\nare passed on to the named function.  For example,\n\n@example\nfeval (\"acos\", -1)\n     @result{} 3.1416\n@end example\n\n@noindent\ncalls the function @code{acos} with the argument @samp{-1}.\n\nThe function @code{feval} is necessary in order to be able to write\nfunctions that call user-supplied functions, because Octave does not\nhave a way to declare a pointer to a function (like C) or to declare a\nspecial kind of variable that can be used to hold the name of a function\n(like @code{EXTERNAL} in Fortran).  Instead, you must refer to functions\nby name, and use @code{feval} to call them.\n@end deftypefn") 
 XDEFUN_INTERNAL (eval, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} eval (@var{try}, @var{catch})\nParse the string @var{try} and evaluate it as if it were an Octave\nprogram, returning the last value computed.  If that fails, evaluate\nthe string @var{catch}.  The string @var{try} is evaluated in the\ncurrent context, so any results remain available after @code{eval}\nreturns.  For example,\n\n@example\n@group\neval (\"a = 13\")\n     @print{} a = 13\n     @result{} 13\n@end group\n@end example\n\nIn this case, the value of the evaluated expression is printed and it is\nalso returned returned from @code{eval}.  Just as with any other\nexpression, you can turn printing off by ending the expression in a\nsemicolon.  For example,\n\n@example\neval (\"a = 13;\")\n     @result{} 13\n@end example\n\nIn this example, the variable @code{a} has been given the value 13, but\nthe value of the expression is not printed.  You can also turn off\nautomatic printing for all expressions executed by @code{eval} using the\nvariable @code{default_eval_print_flag}.\n@end deftypefn") 
   XDEFVAR_INTERNAL("default_eval_print_flag", SBV_default_eval_print_flag, 1.0, false, default_eval_print_flag, "-*- texinfo -*-\n@defvr {Built-in Variable} default_eval_print_flag\nIf the value of this variable is nonzero, Octave prints the results of\ncommands executed by @code{eval} that do not end with semicolons.  If it\nis zero, automatic printing is suppressed.  The default value is 1.\n@end defvr") ;
   XDEFVAR_INTERNAL("warn_assign_as_truth_value", SBV_warn_assign_as_truth_value, 1.0, false, warn_assign_as_truth_value, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_assign_as_truth_value\nIf the value of @code{warn_assign_as_truth_value} is nonzero, a\nwarning is issued for statements like\n\n@example\nif (s = t)\n  ...\n@end example\n\n@noindent\nsince such statements are not common, and it is likely that the intent\nwas to write\n\n@example\nif (s == t)\n  ...\n@end example\n\n@noindent\ninstead.\n\nThere are times when it is useful to write code that contains\nassignments within the condition of a @code{while} or @code{if}\nstatement.  For example, statements like\n\n@example\nwhile (c = getc())\n  ...\n@end example\n\n@noindent\nare common in C programming.\n\nIt is possible to avoid all warnings about such statements by setting\n@code{warn_assign_as_truth_value} to 0, but that may also\nlet real errors like\n\n@example\nif (x = 1)  # intended to test (x == 1)!\n  ...\n@end example\n\n@noindent\nslip by.\n\nIn such cases, it is possible suppress errors for specific statements by\nwriting them with an extra set of parentheses.  For example, writing the\nprevious example as\n\n@example\nwhile ((c = getc()))\n  ...\n@end example\n\n@noindent\nwill prevent the warning from being printed for this statement, while\nallowing Octave to warn about other assignments used in conditional\ncontexts.\n\nThe default value of @code{warn_assign_as_truth_value} is 1.\n@end defvr") ;
   XDEFVAR_INTERNAL("warn_function_name_clash", SBV_warn_function_name_clash, 1.0, false, warn_function_name_clash, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_function_name_clash\nIf the value of @code{warn_function_name_clash} is nonzero, a warning is\nissued when Octave finds that the name of a function defined in a\nfunction file differs from the name of the file.  (If the names\ndisagree, the name declared inside the file is ignored.)  If the value\nis 0, the warning is omitted.  The default value is 1.\n@end defvr") ;
   XDEFVAR_INTERNAL("warn_future_time_stamp", SBV_warn_future_time_stamp, 1.0, false, warn_future_time_stamp, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_future_time_stamp\nIf the value of this variable is nonzero, Octave will print a warning\nif it finds a function file with a time stamp that is in the future.\n@end defvr") ;
   XDEFVAR_INTERNAL("warn_missing_semicolon", SBV_warn_missing_semicolon, 0.0, false, warn_missing_semicolon, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_missing_semicolon\nIf the value of this variable is nonzero, Octave will warn when\nstatements in function definitions don't end in semicolons.  The default\nvalue is 0.\n@end defvr") ;
   XDEFVAR_INTERNAL("warn_variable_switch_label", SBV_warn_variable_switch_label, 0.0, false, warn_variable_switch_label, "-*- texinfo -*-\n@defvr {Built-in Variable} warn_variable_switch_label\nIf the value of this variable is nonzero, Octave will print a warning if\na switch label is not a constant or constant expression\n@end defvr") ;
}

static void
print_pinv_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (pinv, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} pinv (@var{x}, @var{tol})\nReturn the pseudoinverse of @var{x}.  Singular values less than\n@var{tol} are ignored. \n\nIf the second argument is omitted, it is assumed that\n\n@example\ntol = max (size (@var{x})) * sigma_max (@var{x}) * eps,\n@end example\n\n@noindent\nwhere @code{sigma_max (@var{x})} is the maximal singular value of @var{x}.\n@end deftypefn") 
}

static void
print_pr_output_doc_strings (void)
{
 XDEFUN_INTERNAL (disp, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} disp (@var{x})\nDisplay the value of @var{x}.  For example,\n\n@example\ndisp (\"The value of pi is:\"), disp (pi)\n\n     @print{} the value of pi is:\n     @print{} 3.1416\n@end example\n\n@noindent\nNote that the output from @code{disp} always ends with a newline.\n\nIf an output value is requested, @code{disp} prints nothing and\nreturns the formatted output in a string.\n@end deftypefn\n@seealso{fdisp}") 
 XDEFUN_INTERNAL (fdisp, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} fdisp (@var{fid}, @var{x})\nDisplay the value of @var{x} on the stream @var{fid}.  For example,\n\n@example\ndisp (stdout, \"The value of pi is:\"), disp (stdout, pi)\n\n     @print{} the value of pi is:\n     @print{} 3.1416\n@end example\n\n@noindent\nNote that the output from @code{disp} always ends with a newline.\n\nIf an output value is requested, @code{disp} prints nothing and\nreturns the formatted output in a string.\n@end deftypefn\n@seealso{disp}") 
 XDEFUN_INTERNAL (format, args,, true, "-*- texinfo -*-\n@deffn {Command} format options\nControl the format of the output produced by @code{disp} and Octave's\nnormal echoing mechanism.  Valid options are listed in the following\ntable.\n\n@table @code\n@item short\nOctave will try to print numbers with at\nleast 3 significant figures within a field that is a maximum of 8\ncharacters wide.\n\nIf Octave is unable to format a matrix so that columns line up on the\ndecimal point and all the numbers fit within the maximum field width,\nit switches to an @samp{e} format.\n\n@item long\nOctave will try to print numbers with at least 15 significant figures\nwithin a field that is a maximum of 24 characters wide.\n\nAs will the @samp{short} format, Octave will switch to an @samp{e}\nformat if it is unable to format a matrix so that columns line up on the\ndecimal point and all the numbers fit within the maximum field width.\n\n@item long e\n@itemx short e\nThe same as @samp{format long} or @samp{format short} but always display\noutput with an @samp{e} format.  For example, with the @samp{short e}\nformat, pi is displayed as @code{3.14e+00}.\n\n@item long E\n@itemx short E\nThe same as @samp{format long e} or @samp{format short e} but always\ndisplay output with an uppercase @samp{E} format.  For example, with\nthe @samp{long E} format, pi is displayed as\n@code{3.14159265358979E+00}.\n\n@item free\n@itemx none\nPrint output in free format, without trying to line up columns of\nmatrices on the decimal point.  This also causes complex numbers to be\nformatted like this @samp{(0.604194, 0.607088)} instead of like this\n@samp{0.60419 + 0.60709i}.\n\n@item bank\nPrint in a fixed format with two places to the right of the decimal\npoint.\n\n@item +\nPrint a @samp{+} symbol for nonzero matrix elements and a space for zero\nmatrix elements.  This format can be very useful for examining the\nstructure of a large matrix.\n\n@item hex\nPrint the hexadecimal representation numbers as they are stored in\nmemory.  For example, on a workstation which stores 8 byte real values\nin IEEE format with the least significant byte first, the value of\n@code{pi} when printed in @code{hex} format is @code{400921fb54442d18}.\nThis format only works for numeric values.\n\n@item bit\nPrint the bit representation of numbers as stored in memory.\nFor example, the value of @code{pi} is\n\n@example\n@group\n01000000000010010010000111111011\n01010100010001000010110100011000\n@end group\n@end example\n\n(shown here in two 32 bit sections for typesetting purposes) when\nprinted in bit format on a workstation which stores 8 byte real values\nin IEEE format with the least significant byte first.  This format only\nworks for numeric types.\n@end table\n\nBy default, Octave will try to print numbers with at least 5 significant\nfigures within a field that is a maximum of 10 characters wide.\n\nIf Octave is unable to format a matrix so that columns line up on the\ndecimal point and all the numbers fit within the maximum field width,\nit switches to an @samp{e} format.\n\nIf @code{format} is invoked without any options, the default format\nstate is restored.\n@end deffn") 
   XDEFVAR_INTERNAL("fixed_point_format", SBV_fixed_point_format, 0.0, false, fixed_point_format, "-*- texinfo -*-\n@defvr {Built-in Variable} fixed_point_format\nIf the value of this variable is nonzero, Octave will scale all values\nin a matrix so that the largest may be written with one leading digit.\nThe scaling factor is printed on the first line of output.  For example,\n\n@example\n@group\noctave:1> logspace (1, 7, 5)'\nans =\n\n  1.0e+07  *\n\n  0.00000\n  0.00003\n  0.00100\n  0.03162\n  1.00000\n@end group\n@end example\n\n@noindent\nNotice that first value appears to be zero when it is actually 1.  For\nthis reason, you should be careful when setting\n@code{fixed_point_format} to a nonzero value.\n\nThe default value of @code{fixed_point_format} is 0.\n@end defvr") ;
   XDEFVAR_INTERNAL("output_max_field_width", SBV_output_max_field_width, 10.0, false, output_max_field_width, "-*- texinfo -*-\n@defvr {Built-in Variable} output_max_field_width\nThis variable specifies the maximum width of a numeric output field.\nThe default value is 10.\n@end defvr") ;
   XDEFVAR_INTERNAL("output_precision", SBV_output_precision, 5.0, false, output_precision, "-*- texinfo -*-\n@defvr {Built-in Variable} output_precision\nThis variable specifies the minimum number of significant figures to\ndisplay for numeric output.  The default value is 5.\n@end defvr") ;
   XDEFVAR_INTERNAL("print_empty_dimensions", SBV_print_empty_dimensions, 1.0, false, print_empty_dimensions, "-*- texinfo -*-\n@defvr {Built-in Variable} print_empty_dimensions\nIf the value of @code{print_empty_dimensions} is nonzero, the\ndimensions of empty matrices are printed along with the empty matrix\nsymbol, @samp{[]}.  For example, the expression\n\n@example\nzeros (3, 0)\n@end example\n\n@noindent\nwill print\n\n@example\nans = [](3x0)\n@end example\n@end defvr") ;
   XDEFVAR_INTERNAL("split_long_rows", SBV_split_long_rows, 1.0, false, split_long_rows, "-*- texinfo -*-\n@defvr {Built-in Variable} split_long_rows\nFor large matrices, Octave may not be able to display all the columns of\na given row on one line of your screen.  This can result in missing\ninformation or output that is nearly impossible to decipher, depending\non whether your terminal truncates or wraps long lines.\n\nIf the value of @code{split_long_rows} is nonzero, Octave will display\nthe matrix in a series of smaller pieces, each of which can fit within\nthe limits of your terminal width.  Each set of rows is labeled so that\nyou can easily see which columns are currently being displayed.\nFor example:\n\n@smallexample\n@group\noctave:13> rand (2,10)\nans =\n\n Columns 1 through 6:\n\n  0.75883  0.93290  0.40064  0.43818  0.94958  0.16467\n  0.75697  0.51942  0.40031  0.61784  0.92309  0.40201\n\n Columns 7 through 10:\n\n  0.90174  0.11854  0.72313  0.73326\n  0.44672  0.94303  0.56564  0.82150\n@end group\n@end smallexample\n\n@noindent\nThe default value of @code{split_long_rows} is nonzero.\n@end defvr") ;
}

static void
print_pt_assign_doc_strings (void)
{
   XDEFVAR_INTERNAL("print_rhs_assign_val", SBV_print_rhs_assign_val, 0.0, false, print_rhs_assign_val, "-*- texinfo -*-\n@defvr print_rhs_assign_val\nIf the value of this variable is non-zero, Octave will print the value\nof the right hand side of assignment expressions instead of the value\nof the left hand side (after the assignment).\n@end defvr") ;
}

static void
print_pt_decl_doc_strings (void)
{
   XDEFVAR_INTERNAL("default_global_variable_value", SBV_default_global_variable_value,, false, 0, "-*- texinfo -*-\n@defvr {Built-in Variable} default_global_variable_value\nThe default for value for otherwise uninitialized global variables.\nOnly used if the variable initialize_global_variables is nonzero.\nIf @code{initialize_global_variables} is nonzero, the value of\n@code{default_glbaol_variable_value} is used as the initial value of\nglobal variables that are not explicitly initialized.  for example,\n\n@example\n@group\ninitialize_global_variables = 1;\ndefault_global_variable_value = 13;\nglobal foo;\nfoo\n     @result{} 13\n@end group\n@end example\n\nthe variable @code{default_global_variable_value} is initially undefined.\n@end defvr") ;
   XDEFVAR_INTERNAL("initialize_global_variables", SBV_initialize_global_variables, 0.0, false, initialize_global_variables, "-*- texinfo -*-\n@defvr initialize_global_variables\nIf the value of this variable is nonzero, global variables are given\nthe default initial value specified by the built-in variable\n@code{default_global_variable_value}.\n@end defvr") ;
}

static void
print_pt_mat_doc_strings (void)
{
   XDEFVAR_INTERNAL("empty_list_elements_ok", SBV_empty_list_elements_ok, "warn", false, empty_list_elements_ok, "-*- texinfo -*-\n@defvr {Built-in Variable} empty_list_elements_ok\nThis variable controls whether Octave ignores empty matrices in a matrix\nlist.\n\nFor example, if the value of @code{empty_list_elements_ok} is\nnonzero, Octave will ignore the empty matrices in the expression\n\n@example\na = [1, [], 3, [], 5]\n@end example\n\n@noindent\nand the variable @code{a} will be assigned the value @code{[ 1, 3, 5 ]}.\n\nThe default value is @code{\"warn\"}.\n@end defvr") ;
   XDEFVAR_INTERNAL("implicit_num_to_str_ok", SBV_implicit_num_to_str_ok, 0.0, false, implicit_num_to_str_ok, "-*- texinfo -*-\n@defvr {Built-in Variable} implicit_num_to_str_ok\nIf the value of @code{implicit_num_to_str_ok} is nonzero, implicit\nconversions of numbers to their ASCII character equivalents are\nallowed when strings are constructed using a mixture of strings and\nnumbers in matrix notation.  Otherwise, an error message is printed and\ncontrol is returned to the top level. The default value is 0.  For\nexample,\n\n@example\n@group\n[ \"f\", 111, 111 ]\n     @result{} \"foo\"\n@end group\n@end example\n@end defvr") ;
   XDEFVAR_INTERNAL("string_fill_char", SBV_string_fill_char, " ", false, string_fill_char, "-*- texinfo -*-\n@defvr {Built-in Variable} string_fill_char\nThe value of this variable is used to pad all strings in a string matrix\nto the same length.  It should be a single character.  The default value\nis @code{\" \"} (a single space).  For example,\n\n@example\n@group\nstring_fill_char = \"X\";\n[ \"these\"; \"are\"; \"strings\" ]\n     @result{} \"theseXX\"\n        \"areXXXX\"\n        \"strings\"\n@end group\n@end example\n@end defvr") ;
}

static void
print_pt_plot_doc_strings (void)
{
 XDEFUN_INTERNAL (clearplot,,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} clearplot\n@deftypefnx {Built-in Function} {} clg\nClear the plot window and any titles or axis labels.  The name\n@code{clg} is aliased to @code{clearplot} for compatibility with\n@sc{Matlab}.\n\nThe commands @kbd{gplot clear}, @kbd{gsplot clear}, and @kbd{replot\nclear} are equivalent to @code{clearplot}.  (Previously, commands like\n@kbd{gplot clear} would evaluate @code{clear} as an ordinary expression\nand clear all the visible variables.)\n@end deftypefn") 
 XDEFALIAS_INTERNAL(clg, clearplot) ;
 XDEFUN_INTERNAL (closeplot,,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} closeplot\nClose stream to the @code{gnuplot} subprocess.  If you are using X11,\nthis will close the plot window.\n@end deftypefn") 
 XDEFUN_INTERNAL (hold, args,, true, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} hold @var{args}\nTell Octave to `hold' the current data on the plot when executing\nsubsequent plotting commands.  This allows you to execute a series of\nplot commands and have all the lines end up on the same figure.  The\ndefault is for each new plot command to clear the plot device first.\nFor example, the command\n\n@example\nhold on\n@end example\n\n@noindent\nturns the hold state on.  An argument of @code{off} turns the hold state\noff, and @code{hold} with no arguments toggles the current hold state.\n@end deftypefn") 
 XDEFUN_INTERNAL (ishold,,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} ishold\nReturn 1 if the next line will be added to the current plot, or 0 if\nthe plot device will be cleared before drawing the next line.\n@end deftypefn") 
 XDEFUN_INTERNAL (purge_tmp_files,,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} purge_tmp_files\nDelete the temporary files created by the plotting commands.\n\nOctave creates temporary data files for @code{gnuplot} and then sends\ncommands to @code{gnuplot} through a pipe.  Octave will delete the\ntemporary files on exit, but if you are doing a lot of plotting you may\nwant to clean up in the middle of a session.\n\nA future version of Octave will eliminate the need to use temporary\nfiles to hold the plot data.\n@end deftypefn") 
 XDEFUN_INTERNAL (graw, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} graw (@var{string})\nSend @var{string} directly to gnuplot subprocess.\n@end deftypefn") 
 XDEFUN_INTERNAL (gset, args,, true, "-*- texinfo -*-\n@deffn {Command} gset options\nSet plotting options for gnuplot\n@end deffn") 
 XDEFUN_INTERNAL (set, args, nargout, true, "-*- texinfo -*-\nThis command is has been replaced by @code{gset}.") 
 XDEFUN_INTERNAL (gshow, args,, true, "-*- texinfo -*-\n@deffn {Command} gshow options\nShow plotting options.\n@end deffn") 
 XDEFUN_INTERNAL (show, args, nargout, true, "-*- texinfo -*-\nThis command is has been replaced by @code{gshow}.") 
   XDEFVAR_INTERNAL("automatic_replot", SBV_automatic_replot, 0.0, false, automatic_replot, "-*- texinfo -*-\n@defvr {Built-in Variable} automatic_replot\nYou can tell Octave to redisplay the plot each time anything about it\nchanges by setting the value of the builtin variable\n@code{automatic_replot} to a nonzero value.  Since this is fairly\ninefficient, the default value is 0.\n@end defvr") ;
   XDEFVAR_INTERNAL("gnuplot_binary", SBV_gnuplot_binary, "gnuplot", false, gnuplot_binary, "-*- texinfo -*-\n@defvr {Built-in Variable} gnuplot_binary\nThe name of the program invoked by the plot command.  The default value\nis @code{\"gnuplot\"}.  @xref{Installation}.\n@end defvr") ;
   XDEFVAR_INTERNAL("gnuplot_command_plot", SBV_gnuplot_command_plot, "pl", false, gnuplot_command_plot, "-*- texinfo -*-\n@defvr {Built-in Variable} gnuplot_command_plot\n@end defvr") ;
   XDEFVAR_INTERNAL("gnuplot_command_replot", SBV_gnuplot_command_replot, "rep", false, gnuplot_command_replot, "-*- texinfo -*-\n@defvr {Built-in Variable} gnuplot_command_replot\n@end defvr") ;
   XDEFVAR_INTERNAL("gnuplot_command_splot", SBV_gnuplot_command_splot, "sp", false, gnuplot_command_splot, "-*- texinfo -*-\n@defvr {Built-in Variable} gnuplot_command_splot\n@end defvr") ;
   XDEFVAR_INTERNAL("gnuplot_command_using", SBV_gnuplot_command_using, "u", false, gnuplot_command_using, "-*- texinfo -*-\n@defvr {Built-in Variable} gnuplot_command_using\n@end defvr") ;
   XDEFVAR_INTERNAL("gnuplot_command_with", SBV_gnuplot_command_with, "w", false, gnuplot_command_with, "-*- texinfo -*-\n@defvr {Built-in Variable} gnuplot_command_with\n@end defvr") ;
   XDEFVAR_INTERNAL("gnuplot_command_axes", SBV_gnuplot_command_axes, "ax", false, gnuplot_command_axes, "-*- texinfo -*-\n@defvr {Built-in Variable} gnuplot_command_axes\n@end defvr") ;
   XDEFVAR_INTERNAL("gnuplot_command_title", SBV_gnuplot_command_title, "t", false, gnuplot_command_title, "-*- texinfo -*-\n@defvr {Built-in Variable} gnuplot_command_title\n@end defvr") ;
   XDEFVAR_INTERNAL("gnuplot_command_end", SBV_gnuplot_command_end, "\n", false, gnuplot_command_end, "-*- texinfo -*-\n@defvr {Built-in Variable} gnuplot_command_end\n@end defvr") ;
   XDEFVAR_INTERNAL("gnuplot_has_frames", SBV_gnuplot_has_frames, with_frames, false, gnuplot_has_frames, "-*- texinfo -*-\n@defvr {Built-in Variable} gnuplot_has_frames\nIf the value of this variable is nonzero, Octave assumes that your copy\nof gnuplot has support for multiple frames that is included in recent\n3.6beta releases.  It's initial value is determined by configure, but it\ncan be changed in your startup script or at the command line in case\nconfigure got it wrong, or if you upgrade your gnuplot installation.\n@end defvr") ;
   XDEFVAR_INTERNAL("gnuplot_has_multiplot", SBV_gnuplot_has_multiplot, with_multiplot, false, gnuplot_has_multiplot, "-*- texinfo -*-\n@defvr {Built-in Variable} gnuplot_has_multiplot\nIf the value of this variable is nonzero, Octave assumes that your copy\nof gnuplot has the multiplot support that is included in recent\n3.6beta releases.  It's initial value is determined by configure, but it\ncan be changed in your startup script or at the command line in case\nconfigure got it wrong, or if you upgrade your gnuplot installation.\n@end defvr") ;
}

static void
print_pt_stmt_doc_strings (void)
{
   XDEFVAR_INTERNAL("silent_functions", SBV_silent_functions, 0.0, false, silent_functions, "-*- texinfo -*-\n@defvr {Built-in Variable} silent_functions\nIf the value of @code{silent_functions} is nonzero, internal output\nfrom a function is suppressed.  Otherwise, the results of expressions\nwithin a function body that are not terminated with a semicolon will\nhave their values printed.  The default value is 0.\n\nFor example, if the function\n\n@example\nfunction f ()\n  2 + 2\nendfunction\n@end example\n\n@noindent\nis executed, Octave will either print @samp{ans = 4} or nothing\ndepending on the value of @code{silent_functions}.\n@end defvr") ;
}

static void
print_qr_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (qr, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{q}, @var{r}, @var{p}] =} qr (@var{a})\n@cindex QR factorization\nCompute the QR factorization of @var{a}, using standard @sc{Lapack}\nsubroutines.  For example, given the matrix @code{a = [1, 2; 3, 4]},\n\n@example\n[q, r] = qr (a)\n@end example\n\n@noindent\nreturns\n\n@example\nq =\n\n  -0.31623  -0.94868\n  -0.94868   0.31623\n\nr =\n\n  -3.16228  -4.42719\n   0.00000  -0.63246\n@end example\n\nThe @code{qr} factorization has applications in the solution of least\nsquares problems\n@iftex\n@tex\n$$\n\\min_x \\left\\Vert A x - b \\right\\Vert_2\n$$\n@end tex\n@end iftex\n@ifinfo\n\n@example\n@code{min norm(A x - b)}\n@end example\n\n@end ifinfo\nfor overdetermined systems of equations (i.e.,\n@iftex\n@tex\n$A$\n@end tex\n@end iftex\n@ifinfo\n@code{a}\n@end ifinfo\n is a tall, thin matrix).  The QR factorization is\n@iftex\n@tex\n$QR = A$ where $Q$ is an orthogonal matrix and $R$ is upper triangular.\n@end tex\n@end iftex\n@ifinfo\n@code{q * r = a} where @code{q} is an orthogonal matrix and @code{r} is\nupper triangular.\n@end ifinfo\n\nThe permuted QR factorization @code{[@var{q}, @var{r}, @var{p}] =\nqr (@var{a})} forms the QR factorization such that the diagonal\nentries of @code{r} are decreasing in magnitude order.  For example,\ngiven the matrix @code{a = [1, 2; 3, 4]},\n\n@example\n[q, r, p] = qr(a)\n@end example\n\n@noindent\nreturns\n\n@example\nq = \n\n  -0.44721  -0.89443\n  -0.89443   0.44721\n\nr =\n\n  -4.47214  -3.13050\n   0.00000   0.44721\n\np =\n\n   0  1\n   1  0\n@end example\n\nThe permuted @code{qr} factorization @code{[q, r, p] = qr (a)}\nfactorization allows the construction of an orthogonal basis of\n@code{span (a)}.\n@end deftypefn") 
}

static void
print_quad_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (quad, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{v}, @var{ier}, @var{nfun}, @var{err}] =} quad (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})\nIntegrate a nonlinear function of one variable using Quadpack.\nThe first argument is the name of the  function to call to compute the\nvalue of the integrand.  It must have the form\n\n@example\ny = f (x)\n@end example\n\n@noindent\nwhere @var{y} and @var{x} are scalars.\n\nThe second and third arguments are limits of integration.  Either or\nboth may be infinite.\n\nThe optional argument @var{tol} is a vector that specifies the desired\naccuracy of the result.  The first element of the vector is the desired\nabsolute tolerance, and the second element is the desired relative\ntolerance.  To choose a relative test only, set the absolute\ntolerance to zero.  To choose an absolute test only, set the relative\ntolerance to zero. \n\nThe optional argument @var{sing} is a vector of values at which the\nintegrand is known to be singular.\n\nThe result of the integration is returned in @var{v} and @var{ier}\ncontains an integer error code (0 indicates a successful integration).\nThe value of @var{nfun} indicates how many function evaluations were\nrequired, and @var{err} contains an estimate of the error in the\nsolution.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (quad_options, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} quad_options (@var{opt}, @var{val})\nWhen called with two arguments, this function allows you set options\nparameters for the function @code{quad}.  Given one argument,\n@code{quad_options} returns the value of the corresponding option.  If\nno arguments are supplied, the names of all the available options and\ntheir current values are displayed.\n@end deftypefn") 
}

static void
print_qz_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (qz, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {@var{lambda} =} qz (@var{a}, @var{b})\nGeneralized eigenvalue problem @math{A x = s B x},\n@var{QZ} decomposition.  Three ways to call:\n@enumerate\n@item @code{lambda = qz(A,B)}\n\nComputes the generalized eigenvalues @var{lambda} of @math{(A - sB)}.\n\n@item @code{[AA, BB, Q, Z, V, W, lambda] = qz (A, B)}\n\nComputes qz decomposition, generalized eigenvectors, and \n        generalized eigenvalues of @math{(A - sB)}\n@example\n@group\n        A V = B V diag(lambda)\n        W' A = diag(lambda) W' B\n        AA = Q'*A*Z, BB = Q'*B*Z  with Q, Z orthogonal (unitary)= I\n@end group\n@end example\n\n@item @code{[AA,BB,Z@{,lambda@}] = qz(A,B,opt)}\n\nAs in form [2], but allows ordering of generalized eigenpairs\n        for (e.g.) solution of discrete time algebraic Riccati equations.\n        Form 3 is not available for complex matrices and does not compute\n        the generalized eigenvectors V, W, nor the orthogonal matrix Q.\n@table @var\n@item opt\n for ordering eigenvalues of the GEP pencil.  The leading  block\n             of the revised pencil contains all eigenvalues that satisfy:\n@table @code\n@item \"N\"\n = unordered (default) \n\n@item \"S\"\n= small: leading block has all |lambda| <=1 \n\n@item \"B\"\n = big: leading block has all |lambda >= 1 \n\n@item \"-\"\n = negative real part: leading  block has all eigenvalues\n                  in the open left half-plant\n\n@item \"+\"\n = nonnegative real part:  leading block has all eigenvalues\n                  in the closed right half-plane\n@end  table\n@end table\n@end enumerate\n\nNote: qz performs permutation balancing, but not scaling (see balance).\n      Order of output arguments was selected for compatibility with MATLAB\n\nSee also: balance, dare, eig, schur\n@end deftypefn") 
}

static void
print_rand_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (rand, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} rand (@var{x})\n@deftypefnx {Loadable Function} {} rand (@var{n}, @var{m})\n@deftypefnx {Loadable Function} {} rand (@code{\"seed\"}, @var{x})\nReturn a matrix with random elements uniformly distributed on the\ninterval (0, 1).  The arguments are handled the same as the arguments\nfor @code{eye}.  In\naddition, you can set the seed for the random number generator using the\nform\n\n@example\nrand (\"seed\", @var{x})\n@end example\n\n@noindent\nwhere @var{x} is a scalar value.  If called as\n\n@example\nrand (\"seed\")\n@end example\n\n@noindent\n@code{rand} returns the current value of the seed.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (randn, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} randn (@var{x})\n@deftypefnx {Loadable Function} {} randn (@var{n}, @var{m})\n@deftypefnx {Loadable Function} {} randn (@code{\"seed\"}, @var{x})\nReturn a matrix with normally distributed random elements.  The\narguments are handled the same as the arguments for @code{eye}.  In\naddition, you can set the seed for the random number generator using the\nform\n\n@example\nrandn (\"seed\", @var{x})\n@end example\n\n@noindent\nwhere @var{x} is a scalar value.  If called as\n\n@example\nrandn (\"seed\")\n@end example\n\n@noindent\n@code{randn} returns the current value of the seed.\n@end deftypefn") 
}

static void
print_schur_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (schur, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {@var{s} =} schur (@var{a})\n@deftypefnx {Loadable Function} {[@var{u}, @var{s}] =} schur (@var{a}, @var{opt})\n@cindex Schur decomposition\nThe Schur decomposition is used to compute eigenvalues of a\nsquare matrix, and has applications in the solution of algebraic\nRiccati equations in control (see @code{are} and @code{dare}).\n@code{schur} always returns\n@iftex\n@tex\n$S = U^T A U$\n@end tex\n@end iftex\n@ifinfo\n@code{s = u' * a * u}\n@end ifinfo\nwhere\n@iftex\n@tex\n$U$\n@end tex\n@end iftex\n@ifinfo\n@code{u}\n@end ifinfo\n is a unitary matrix\n@iftex\n@tex\n($U^T U$ is identity)\n@end tex\n@end iftex\n@ifinfo\n(@code{u'* u} is identity)\n@end ifinfo\nand\n@iftex\n@tex\n$S$\n@end tex\n@end iftex\n@ifinfo\n@code{s}\n@end ifinfo\nis upper triangular.  The eigenvalues of\n@iftex\n@tex\n$A$ (and $S$)\n@end tex\n@end iftex\n@ifinfo\n@code{a} (and @code{s})\n@end ifinfo\nare the diagonal elements of\n@iftex\n@tex\n$S$\n@end tex\n@end iftex\n@ifinfo\n@code{s}\n@end ifinfo\nIf the matrix\n@iftex\n@tex\n$A$\n@end tex\n@end iftex\n@ifinfo\n@code{a}\n@end ifinfo\nis real, then the real Schur decomposition is computed, in which the\nmatrix\n@iftex\n@tex\n$U$\n@end tex\n@end iftex\n@ifinfo\n@code{u}\n@end ifinfo\nis orthogonal and\n@iftex\n@tex\n$S$\n@end tex\n@end iftex\n@ifinfo\n@code{s}\n@end ifinfo\nis block upper triangular\nwith blocks of size at most\n@iftex\n@tex\n$2\\times 2$\n@end tex\n@end iftex\n@ifinfo\n@code{2 x 2}\n@end ifinfo\nalong the diagonal.  The diagonal elements of\n@iftex\n@tex\n$S$\n@end tex\n@end iftex\n@ifinfo\n@code{s}\n@end ifinfo\n(or the eigenvalues of the\n@iftex\n@tex\n$2\\times 2$\n@end tex\n@end iftex\n@ifinfo\n@code{2 x 2}\n@end ifinfo\nblocks, when\nappropriate) are the eigenvalues of\n@iftex\n@tex\n$A$\n@end tex\n@end iftex\n@ifinfo\n@code{a}\n@end ifinfo\nand\n@iftex\n@tex\n$S$.\n@end tex\n@end iftex\n@ifinfo\n@code{s}.\n@end ifinfo\n\nThe eigenvalues are optionally ordered along the diagonal according to\nthe value of @code{opt}.  @code{opt = \"a\"} indicates that all\neigenvalues with negative real parts should be moved to the leading\nblock of\n@iftex\n@tex\n$S$\n@end tex\n@end iftex\n@ifinfo\n@code{s}\n@end ifinfo\n(used in @code{are}), @code{opt = \"d\"} indicates that all eigenvalues\nwith magnitude less than one should be moved to the leading block of\n@iftex\n@tex\n$S$\n@end tex\n@end iftex\n@ifinfo\n@code{s}\n@end ifinfo\n(used in @code{dare}), and @code{opt = \"u\"}, the default, indicates that\nno ordering of eigenvalues should occur.  The leading\n@iftex\n@tex\n$k$\n@end tex\n@end iftex\n@ifinfo\n@code{k}\n@end ifinfo\ncolumns of\n@iftex\n@tex\n$U$\n@end tex\n@end iftex\n@ifinfo\n@code{u}\n@end ifinfo\nalways span the\n@iftex\n@tex\n$A$-invariant\n@end tex\n@end iftex\n@ifinfo\n@code{a}-invariant\n@end ifinfo\nsubspace corresponding to the\n@iftex\n@tex\n$k$\n@end tex\n@end iftex\n@ifinfo\n@code{k}\n@end ifinfo\nleading eigenvalues of\n@iftex\n@tex\n$S$.\n@end tex\n@end iftex\n@ifinfo\n@code{s}.\n@end ifinfo\n@end deftypefn") 
}

static void
print_sort_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (sort, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x})\nReturn a copy of @var{x} with the elements elements arranged in\nincreasing order.  For matrices, @code{sort} orders the elements in each\ncolumn.\n\nFor example,\n\n@example\n@group\nsort ([1, 2; 2, 3; 3, 1])\n     @result{}  1  1\n         2  2\n         3  3\n@end group\n@end example\n\nThe @code{sort} function may also be used to produce a matrix\ncontaining the original row indices of the elements in the sorted\nmatrix.  For example,\n\n@example\n@group\n[s, i] = sort ([1, 2; 2, 3; 3, 1])\n     @result{} s = 1  1\n            2  2\n            3  3\n     @result{} i = 1  3\n            2  1\n            3  2\n@end group\n@end example\n@end deftypefn") 
}

static void
print_strfns_doc_strings (void)
{
 XDEFUN_INTERNAL (isstr, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} isstr (@var{a})\nReturn 1 if @var{a} is a string.  Otherwise, return 0.\n@end deftypefn") 
 XDEFUN_INTERNAL (setstr, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} setstr (@var{x})\nConvert a matrix to a string.  Each element of the matrix is converted\nto the corresponding ASCII \ncharacter.  For example,\n\n@example\n@group\nsetstr ([97, 98, 99])\n     @result{} \"abc\"\n@end group\n@end example\n@end deftypefn") 
}

static void
print_svd_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (svd, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {@var{s} =} svd (@var{a})\n@deftypefnx {Loadable Function} {[@var{u}, @var{s}, @var{v}] =} svd (@var{a})\n@cindex singular value decomposition\nCompute the singular value decomposition of @var{a}\n@iftex\n@tex\n$$\n A = U\\Sigma V^H\n$$\n@end tex\n@end iftex\n@ifinfo\n\n@example\na = u * sigma * v'\n@end example\n@end ifinfo\n\nThe function @code{svd} normally returns the vector of singular values.\nIf asked for three return values, it computes\n@iftex\n@tex\n$U$, $S$, and $V$.\n@end tex\n@end iftex\n@ifinfo\nU, S, and V.\n@end ifinfo\nFor example,\n\n@example\nsvd (hilb (3))\n@end example\n\n@noindent\nreturns\n\n@example\nans =\n\n  1.4083189\n  0.1223271\n  0.0026873\n@end example\n\n@noindent\nand\n\n@example\n[u, s, v] = svd (hilb (3))\n@end example\n\n@noindent\nreturns\n\n@example\nu =\n\n  -0.82704   0.54745   0.12766\n  -0.45986  -0.52829  -0.71375\n  -0.32330  -0.64901   0.68867\n\ns =\n\n  1.40832  0.00000  0.00000\n  0.00000  0.12233  0.00000\n  0.00000  0.00000  0.00269\n\nv =\n\n  -0.82704   0.54745   0.12766\n  -0.45986  -0.52829  -0.71375\n  -0.32330  -0.64901   0.68867\n@end example\n\nIf given a second argument, @code{svd} returns an economy-sized\ndecomposition, eliminating the unnecessary rows or columns of @var{u} or\n@var{v}.\n@end deftypefn") 
}

static void
print_syl_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (syl, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {@var{x} =} syl (@var{a}, @var{b}, @var{c})\nSolve the Sylvester equation\n@iftex\n@tex\n$$\n A X + X B + C = 0\n$$\n@end tex\n@end iftex\n@ifinfo\n\n@example\nA X + X B + C = 0\n@end example\n@end ifinfo\nusing standard @sc{Lapack} subroutines.  For example,\n\n@example\n@group\nsyl ([1, 2; 3, 4], [5, 6; 7, 8], [9, 10; 11, 12])\n     @result{} [ -0.50000, -0.66667; -0.66667, -0.50000 ]\n@end group\n@end example\n@end deftypefn") 
}

static void
print_symtab_doc_strings (void)
{
   XDEFVAR_INTERNAL("variables_can_hide_functions", SBV_variables_can_hide_functions, 1.0, false, variables_can_hide_functions, "-*- texinfo -*-\n@defvr variables_can_hide_functions\nIf the value of this variable is nonzero, assignments to variables may\nhide previously defined functions of the same name.  A negative value\nwill cause Octave to print a warning, but allow the operation.\n@end defvr") ;
}

static void
print_syscalls_doc_strings (void)
{
 XDEFUN_INTERNAL (dup2, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{fid}, @var{msg}] =} dup2 (@var{old}, @var{new})\nDuplicate a file descriptor.\n\nIf successful, @var{fid} is greater than zero and contains the new file\nID.  Otherwise, @var{fid} is negative and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (exec, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} exec (@var{file}, @var{args})\nReplace current process with a new process.  Calling @code{exec} without\nfirst calling @code{fork} will terminate your current Octave process and\nreplace it with the program named by @var{file}.  For example,\n\n@example\nexec (\"ls\" \"-l\")\n@end example\n\n@noindent\nwill run @code{ls} and return you to your shell prompt.\n\nIf successful, @code{exec} does not return.  If @code{exec} does return,\n@var{err} will be nonzero, and @var{msg} will contain a system-dependent\nerror message.\n@end deftypefn") 
 XDEFUN_INTERNAL (fcntl, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} fcntl (@var{fid}, @var{request}, @var{arg})\nChange the properties of the open file @var{fid}.  The following values\nmay be passed as @var{request}:\n\n@vtable @code\n@item F_DUPFD\nReturn a duplicate file descriptor.\n\n@item F_GETFD\nReturn the file descriptor flags for @var{fid}.\n\n@item F_SETFD\nSet the file descriptor flags for @var{fid}.\n\n@item F_GETFL\nReturn the file status flags for @var{fid}.  The following codes may be\nreturned (some of the flags may be undefined on some systems).\n\n@vtable @code\n@item O_RDONLY\nOpen for reading only.\n\n@item O_WRONLY\nOpen for writing only.\n\n@item O_RDWR\nOpen for reading and writing.\n\n@item O_APPEND\nAppend on each write.\n\n@item O_NONBLOCK\nNonblocking mode.\n\n@item O_SYNC\nWait for writes to complete.\n\n@item O_ASYNC\nAsynchronous I/O.\n@end vtable\n\n@item F_SETFL\nSet the file status flags for @var{fid} to the value specified by\n@var{arg}.  The only flags that can be changed are @code{O_APPEND} and\n@code{O_NONBLOCK}.\n@end vtable\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (fork, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{pid}, @var{msg}] =} fork ()\nCreate a copy of the current process.\n\nFork can return one of the following values:\n\n@table @asis\n@item > 0\nYou are in the parent process.  The value returned from @code{fork} is\nthe process id of the child process.  You should probably arrange to\nwait for any child processes to exit.\n\n@item 0\nYou are in the child process.  You can call @code{exec} to start another\nprocess.  If that fails, you should probably call @code{exit}.\n\n@item < 0\nThe call to @code{fork} failed for some reason.  You must take evasive\naction.  A system dependent error message will be waiting in @var{msg}.\n@end table\n@end deftypefn") 
 XDEFUN_INTERNAL (getpgrp, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {pgid =} getpgrp ()\nReturn the process group id of the current process.\n@end deftypefn") 
 XDEFUN_INTERNAL (getpid, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {pid =} getpid ()\nReturn the process id of the current process.\n@end deftypefn") 
 XDEFUN_INTERNAL (getppid, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {pid =} getppid ()\nReturn the process id of the parent process.\n@end deftypefn") 
 XDEFUN_INTERNAL (getegid, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {egid =} getegid ()\nReturn the effective group id of the current process.\n@end deftypefn") 
 XDEFUN_INTERNAL (getgid, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {gid =} getgid ()\nReturn the real group id of the current process.\n@end deftypefn") 
 XDEFUN_INTERNAL (geteuid, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {euid =} geteuid ()\nReturn the effective user id of the current process.\n@end deftypefn") 
 XDEFUN_INTERNAL (getuid, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {uid =} getuid ()\nReturn the real user id of the current process.\n@end deftypefn") 
 XDEFUN_INTERNAL (lstat, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{info}, @var{err}, @var{msg}] =} lstat (@var{file})\nSee stat.\n@end deftypefn") 
 XDEFUN_INTERNAL (mkfifo, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} mkfifo (@var{name})\nCreate a @var{fifo} special file named @var{name} with file mode @var{mode}\n\\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (pipe, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{file_ids}, @var{err}, @var{msg}] =} pipe ()\nCreate a pipe and return the vector @var{file_ids}, which corresponding\nto the reading and writing ends of the pipe.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (stat, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{info}, @var{err}, @var{msg}] =} stat (@var{file})\n@deftypefnx {Built-in Function} {[@var{info}, @var{err}, @var{msg}] =} lstat (@var{file})\nReturn a structure @var{s} containing the following information about\n@var{file}.\n\n@table @code\n@item dev\nID of device containing a directory entry for this file.\n\n@item ino\nFile number of the file.\n\n@item modestr\nFile mode, as a string of ten letters or dashes as would be returned by\n@kbd{ls -l}.\n\n@item nlink\nNumber of links.\n\n@item uid\nUser ID of file's owner.\n\n@item gid\nGroup ID of file's group.\n\n@item rdev\nID of device for block or character special files.\n\n@item size\nSize in bytes.\n\n@item atime\nTime of last access in the same form as time values returned from\n@code{time}.  @xref{Timing Utilities}.\n\n@item mtime\nTime of last modification in the same form as time values returned from\n@code{time}.  @xref{Timing Utilities}.\n\n@item ctime\nTime of last file status change in the same form as time values\nreturned from @code{time}.  @xref{Timing Utilities}.\n\n@item blksize\nSize of blocks in the file.\n\n@item blocks\nNumber of blocks allocated for file.\n@end table\n\nIf the call is successful @var{err} is 0 and @var{msg} is an empty\nstring.  If the file does not exist, or some other error occurs, @var{s}\nis an empty matrix, @var{err} is @minus{}1, and @var{msg} contains the\ncorresponding system error message.\n\nIf @var{file} is a symbolic link, @code{stat} will return information\nabout the actual file the is referenced by the link.  Use @code{lstat}\nif you want information about the symbolic link itself.\n\nFor example,\n\n@example\n@group\n[s, err, msg] = stat (\"/vmlinuz\")\n      @result{} s =\n        @{\n          atime = 855399756\n          rdev = 0\n          ctime = 847219094\n          uid = 0\n          size = 389218\n          blksize = 4096\n          mtime = 847219094\n          gid = 6\n          nlink = 1\n          blocks = 768\n          modestr = -rw-r--r--\n          ino = 9316\n          dev = 2049\n        @}\n     @result{} err = 0\n     @result{} msg = \n@end group\n@end example\n@end deftypefn") 
 XDEFUN_INTERNAL (unlink, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} unlink (@var{file})\nDelete the file named @var{file}.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (waitpid, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{pid}, @var{msg}] =} waitpid (@var{pid}, @var{options})\nWait for process @var{pid} to terminate.  The @var{pid} argument can be:\n\n@table @asis\n@item @minus{}1\nWait for any child process.\n\n@item 0\nWait for any child process whose process group ID is equal to that of\nthe Octave interpreter process.\n\n@item > 0\nWait for termination of the child process with ID @var{pid}.\n@end table\n\nThe @var{options} argument can be:\n\n@table @asis\n@item 0\nWait until signal is received or a child process exits (this is the\ndefault if the @var{options} argument is missing).\n\n@item 1\nDo not hang if status is not immediately available.\n\n@item 2\nReport the status of any child processes that are stopped, and whose\nstatus has not yet been reported since they stopped.\n\n@item 3\nImplies both 1 and 2.\n@end table\n\nIf the returned value of @var{pid} is greater than 0, it is the process\nID of the child process that exited.  If an error occurs, @var{pid} will\nbe less than zero and @var{msg} will contain a system-dependent error\nmessage.\n@end deftypefn") 
   XDEFCONST_INTERNAL("F_DUPFD", static_cast<double> (0), "-*- texinfo -*-\n@defvr {Built-in Variable} F_DUPFD\n@end defvr") ;
   XDEFCONST_INTERNAL("F_GETFD", static_cast<double> (1), "-*- texinfo -*-\n@defvr {Built-in Variable} F_GETFD\n@end defvr") ;
   XDEFCONST_INTERNAL("F_GETFL", static_cast<double> (3), "-*- texinfo -*-\n@defvr {Built-in Variable} F_GETFL\n@end defvr") ;
   XDEFCONST_INTERNAL("F_SETFD", static_cast<double> (2), "-*- texinfo -*-\n@defvr {Built-in Variable} F_SETFD\n@end defvr") ;
   XDEFCONST_INTERNAL("F_SETFL", static_cast<double> (4), "-*- texinfo -*-\n@defvr {Built-in Variable} F_SETFL\n@end defvr") ;
   XDEFCONST_INTERNAL("O_APPEND", static_cast<double> (02000), "-*- texinfo -*-\n@defvr {Built-in Variable} O_APPEND\n@end defvr") ;
   XDEFCONST_INTERNAL("O_ASYNC", static_cast<double> (020000), "-*- texinfo -*-\n@defvr {Built-in Variable} O_ASYNC\n@end defvr") ;
   XDEFCONST_INTERNAL("O_CREAT", static_cast<double> (0100), "-*- texinfo -*-\n@defvr {Built-in Variable} O_CREAT\n@end defvr") ;
   XDEFCONST_INTERNAL("O_EXCL", static_cast<double> (0200), "-*- texinfo -*-\n@defvr {Built-in Variable} O_EXCL\n@end defvr") ;
   XDEFCONST_INTERNAL("O_NONBLOCK", static_cast<double> (04000), "-*- texinfo -*-\n@defvr {Built-in Variable} O_NONBLOCK\n@end defvr") ;
   XDEFCONST_INTERNAL("O_RDONLY", static_cast<double> (00), "-*- texinfo -*-\n@defvr {Built-in Variable} O_RDONLY\n@end defvr") ;
   XDEFCONST_INTERNAL("O_RDWR", static_cast<double> (02), "-*- texinfo -*-\n@defvr {Built-in Variable} O_RDWR\n@end defvr") ;
   XDEFCONST_INTERNAL("O_SYNC", static_cast<double> (010000), "-*- texinfo -*-\n@defvr {Built-in Variable} O_SYNC\n@end defvr") ;
   XDEFCONST_INTERNAL("O_TRUNC", static_cast<double> (01000), "-*- texinfo -*-\n@defvr {Built-in Variable} O_TRUNC\n@end defvr") ;
   XDEFCONST_INTERNAL("O_WRONLY", static_cast<double> (01), "-*- texinfo -*-\n@defvr {Built-in Variable} O_WRONLY\n@end defvr") ;
}

static void
print_sysdep_doc_strings (void)
{
 XDEFUN_INTERNAL (clc,,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} clc ()\n@deftypefnx {Built-in Function} {} home ()\nClear the terminal screen and move the cursor to the upper left corner.\n@end deftypefn") 
 XDEFALIAS_INTERNAL(home, clc) ;
 XDEFUN_INTERNAL (getenv, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} getenv (@var{var})\nReturn the value of the environment variable @var{var}.  For example,\n\n@example\ngetenv (\"PATH\")\n@end example\n\n@noindent\nreturns a string containing the value of your path.\n@end deftypefn") 
 XDEFUN_INTERNAL (putenv, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} putenv (@var{var}, @var{value})\nSet the value of the environment variable @var{var} to @var{value}.\n@end deftypefn") 
 XDEFUN_INTERNAL (kbhit, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} kbhit ()\nRead a single keystroke from the keyboard. If called with one\nargument, don't wait for a keypress.  For example,\n\n@example\nx = kbhit ();\n@end example\n\n@noindent\nwill set @var{x} to the next character typed at the keyboard as soon as\nit is typed.\n\n@example\nx = kbhit (1);\n@end example\n\n@noindent\nidentical to the above example, but don't wait for a keypress,\nreturning the empty string if no key is available.\n@end deftypefn") 
 XDEFUN_INTERNAL (pause, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} pause (@var{seconds})\nSuspend the execution of the program.  If invoked without any arguments,\nOctave waits until you type a character.  With a numeric argument, it\npauses for the given number of seconds.  For example, the following\nstatement prints a message and then waits 5 seconds before clearing the\nscreen.\n\n@example\n@group\nfprintf (stderr, \"wait please...\n\");\npause (5);\nclc;\n@end group\n@end example\n@end deftypefn") 
 XDEFUN_INTERNAL (sleep, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} sleep (@var{seconds})\nSuspend the execution of the program for the given number of seconds.\n@end deftypefn") 
 XDEFUN_INTERNAL (usleep, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} usleep (@var{microseconds})\nSuspend the execution of the program for the given number of\nmicroseconds.  On systems where it is not possible to sleep for periods\nof time less than one second, @code{usleep} will pause the execution for\n@code{round (@var{microseconds} / 1e6)} seconds.\n@end deftypefn") 
 XDEFUN_INTERNAL (isieee,,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} isieee ()\nReturn 1 if your computer claims to conform to the IEEE standard for\nfloating point calculations.\n@end deftypefn") 
 XDEFUN_INTERNAL (tilde_expand, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} tilde_expand (@var{string})\nPerforms tilde expansion on @var{string}.  If @var{string} begins with a\ntilde character, (@samp{~}), all of the characters preceding the first\nslash (or all characters, if there is no slash) are treated as a\npossible user name, and the tilde and the following characters up to the\nslash are replaced by the home directory of the named user.  If the\ntilde is followed immediately by a slash, the tilde is replaced by the\nhome directory of the user running Octave.  For example,\n\n@example\n@group\ntilde_expand (\"~joeuser/bin\")\n     @result{} \"/home/joeuser/bin\"\ntilde_expand (\"~/bin\")\n     @result{} \"/home/jwe/bin\"\n@end group\n@end example\n@end deftypefn") 
}

static void
print_time_doc_strings (void)
{
 XDEFUN_DLD_INTERNAL (time, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} time ()\nReturn the current time as the number of seconds since the epoch.  The\nepoch is referenced to 00:00:00 CUT (Coordinated Universal Time) 1 Jan\n1970.  For example, on Monday February 17, 1997 at 07:15:06 CUT, the\nvalue returned by @code{time} was 856163706.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (gmtime, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} gmtime (@var{t})\nGiven a value returned from time (or any nonnegative integer),\nreturn a time structure corresponding to CUT.  For example,\n\n@example\n@group\ngmtime (time ())\n     @result{} @{\n           usec = 0\n           year = 97\n           mon = 1\n           mday = 17\n           sec = 6\n           zone = CST\n           min = 15\n           wday = 1\n           hour = 7\n           isdst = 0\n           yday = 47\n         @}\n@end group\n@end example\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (localtime, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} localtime (@var{t})\nGiven a value returned from time (or any nonnegative integer),\nreturn a time structure corresponding to the local time zone.\n\n@example\n@group\nlocaltime (time ())\n     @result{} @{\n           usec = 0\n           year = 97\n           mon = 1\n           mday = 17\n           sec = 6\n           zone = CST\n           min = 15\n           wday = 1\n           hour = 1\n           isdst = 0\n           yday = 47\n         @}\n@end group\n@end example\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (mktime, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} mktime (@var{tm_struct})\nConvert a time structure corresponding to the local time to the number\nof seconds since the epoch.  For example,\n\n@example\n@group\nmktime (localtime (time ())\n     @result{} 856163706\n@end group\n@end example\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (strftime, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {} strftime (@var{tm_struct})\nFormat a time structure in a flexible way using @samp{%} substitutions\nsimilar to those in @code{printf}.  Except where noted, substituted\nfields have a fixed size; numeric fields are padded if necessary.\nPadding is with zeros by default; for fields that display a single\nnumber, padding can be changed or inhibited by following the @samp{%}\nwith one of the modifiers described below.  Unknown field specifiers are\ncopied as normal characters.  All other characters are copied to the\noutput without change.  For example,\n\n@example\n@group\nstrftime (\"%r (%Z) %A %e %B %Y\", localtime (time ())\n     @result{} \"01:15:06 AM (CST) Monday 17 February 1997\"\n@end group\n@end example\n\nOctave's @code{strftime} function supports a superset of the ANSI C\nfield specifiers.\n\n@noindent\nLiteral character fields:\n\n@table @code\n@item %\n% character.\n\n@item n\nNewline character.\n\n@item t\nTab character.\n@end table\n\n@noindent\nNumeric modifiers (a nonstandard extension):\n\n@table @code\n@item - (dash)\nDo not pad the field.\n\n@item _ (underscore)\nPad the field with spaces.\n@end table\n\n@noindent\nTime fields:\n\n@table @code\n@item %H\nHour (00-23).\n\n@item %I\nHour (01-12).\n\n@item %k\nHour (0-23).\n\n@item %l\nHour (1-12).\n\n@item %M\nMinute (00-59).\n\n@item %p\nLocale's AM or PM.\n\n@item %r\nTime, 12-hour (hh:mm:ss [AP]M).\n\n@item %R\nTime, 24-hour (hh:mm).\n\n@item %s\nTime in seconds since 00:00:00, Jan 1, 1970 (a nonstandard extension).\n\n@item %S\nSecond (00-61).\n\n@item %T\nTime, 24-hour (hh:mm:ss).\n\n@item %X\nLocale's time representation (%H:%M:%S).\n\n@item %Z\nTime zone (EDT), or nothing if no time zone is determinable.\n@end table\n\n@noindent\nDate fields:\n\n@table @code\n@item %a\nLocale's abbreviated weekday name (Sun-Sat).\n\n@item %A\nLocale's full weekday name, variable length (Sunday-Saturday).\n\n@item %b\nLocale's abbreviated month name (Jan-Dec).\n\n@item %B\nLocale's full month name, variable length (January-December).\n\n@item %c\nLocale's date and time (Sat Nov 04 12:02:33 EST 1989).\n\n@item %C\nCentury (00-99).\n\n@item %d\nDay of month (01-31).\n\n@item %e\nDay of month ( 1-31).\n\n@item %D\nDate (mm/dd/yy).\n\n@item %h\nSame as %b.\n\n@item %j\nDay of year (001-366).\n\n@item %m\nMonth (01-12).\n\n@item %U\nWeek number of year with Sunday as first day of week (00-53).\n\n@item %w\nDay of week (0-6).\n\n@item %W\nWeek number of year with Monday as first day of week (00-53).\n\n@item %x\nLocale's date representation (mm/dd/yy).\n\n@item %y\nLast two digits of year (00-99).\n\n@item %Y\nYear (1970-).\n@end table\n@end deftypefn\n") 
 XDEFUN_DLD_INTERNAL (strptime, args,, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{tm_struct}, @var{nchars}] =} stpftime (@var{str}, @var{fmt})\nConvert the string @var{str} to a time structure under the control of\nthe format @var{fmt}.\n@end deftypefn") 
}

static void
print_toplev_doc_strings (void)
{
 XDEFUN_INTERNAL (casesen, args,, true, "-*- texinfo -*-\n@deffn {Command} casesen arg\nProvided for compatibility with Matlab, but does nothing.\n@end deffn") 
 XDEFUN_INTERNAL (computer, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} computer ()\nPrint or return a string of the form @var{cpu}-@var{vendor}-@var{os}\nthat identifies the kind of computer Octave is running on.  If invoked\nwith an output argument, the value is returned instead of printed.  For\nexample,\n\n@example\n@group\ncomputer ()\n     @print{} i586-pc-linux-gnu\n\nx = computer ()\n     @result{} x = \"i586-pc-linux-gnu\"\n@end group\n@end example\n@end deftypefn") 
 XDEFUN_INTERNAL (quit, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} exit (@var{status})\n@deftypefnx {Built-in Function} {} quit (@var{status})\nExit the current Octave session.  If the optional integer value\n@var{status} is supplied, pass that value to the operating system as the\nOctave's exit status.\n@end deftypefn") 
 XDEFALIAS_INTERNAL(exit, quit) ;
 XDEFUN_INTERNAL (warranty,,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} warranty ()\nDescribe the conditions for copying and distributing Octave.\n@end deftypefn") 
 XDEFUN_INTERNAL (system, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} system (@var{string}, @var{return_output}, @var{type})\nExecute a shell command specified by @var{string}.  The second\nargument is optional.  If @var{type} is @code{\"async\"}, the process\nis started in the background and the process id of the child process\nis returned immediately.  Otherwise, the process is started, and\nOctave waits until it exits.  If @var{type} argument is omitted, a\nvalue of @code{\"sync\"} is assumed.\n\nIf two input arguments are given (the actual value of\n@var{return_output} is irrelevant) and the subprocess is started\nsynchronously, or if @var{system} is called with one input argument and\none or more output arguments, the output from the command is returned.\nOtherwise, if the subprocess is executed synchronously, it's output is\nsent to the standard output.  To send the output of a command executed\nwith @var{system} through the pager, use a command like\n\n@example\ndisp (system (cmd, 1));\n@end example\n\n@noindent\nor\n\n@example\nprintf (\"%s\n\", system (cmd, 1));\n@end example\n\nThe @code{system} function can return two values.  The first is any\noutput from the command that was written to the standard output stream,\nand the second is the output status of the command.  For example,\n\n@example\n[output, status] = system (\"echo foo; exit 2\");\n@end example\n\n@noindent\nwill set the variable @code{output} to the string @samp{foo}, and the\nvariable @code{status} to the integer @samp{2}.\n@end deftypefn") 
 XDEFALIAS_INTERNAL(shell_cmd, system) ;
 XDEFUN_INTERNAL (atexit, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} atexit (@var{fcn})\nRegister a function to be called when Octave exits.  For example,\n\n@example\n@group\nfunction print_fortune ()\n  printf (\"\\n%s\\n\", system (\"fortune\"));\n  fflush (stdout);\nendfunction\natexit (\"print_fortune\");\n@end group\n@end example\n\n@noindent\nwill print a message when Octave exits.\n@end deftypefn") 
 XDEFUN_INTERNAL (octave_config_info, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} octave_config_info (@var{option})\nReturn a structure containing configuration and installation\ninformation for Octave.\n\nif @var{option} is a string, return the configuration information for the\nspecified option.\n\n@end deftypefn") 
   XDEFCONST_INTERNAL(argv,, "-*- texinfo -*-\n@defvr {Built-in Variable} argv\nThe command line arguments passed to Octave are available in this\nvariable.  For example, if you invoked Octave using the command\n\n@example\noctave --no-line-editing --silent\n@end example\n\n@noindent\n@code{argv} would be a list of strings with the elements\n@code{--no-line-editing} and @code{--silent}.\n\nIf you write an executable Octave script, @code{argv} will contain the\nlist of arguments passed to the script.  @xref{Executable Octave Programs},\nfor an example of how to create an executable Octave script.\n@end defvr") ;
   XDEFCONST_INTERNAL(program_invocation_name, octave_env::get_program_invocation_name (), "-*- texinfo -*-\n@defvr {Built-in Variable} program_invocation_name\n@defvrx {Built-in Variable} program_name\nWhen Octave starts, the value of the built-in variable\n@code{program_invocation_name} is automatically set to the name that was\ntyped at the shell prompt to run Octave, and the value of\n@code{program_name} is automatically set to the final component of\n@code{program_invocation_name}.  For example, if you typed\n@samp{@value{OCTAVEHOME}/bin/octave} to start Octave,\n@code{program_invocation_name} would have the value\n@code{\"@value{OCTAVEHOME}/bin/octave\"}, and @code{program_name} would\nhave the value @code{\"octave\"}.\n\nIf executing a script from the command line (e.g., @code{octave foo.m})\nor using an executable Octave script, the program name is set to the\nname of the script.  @xref{Executable Octave Programs}, for an example of\nhow to create an executable Octave script.\n@end defvr") ;
   XDEFCONST_INTERNAL(program_name, octave_env::get_program_name (), "-*- texinfo -*-\n@defvr {Built-in Variable} program_invocation_name\n@defvrx {Built-in Variable} program_name\nWhen Octave starts, the value of the built-in variable\n@code{program_invocation_name} is automatically set to the name that was\ntyped at the shell prompt to run Octave, and the value of\n@code{program_name} is automatically set to the final component of\n@code{program_invocation_name}.  For example, if you typed\n@samp{@value{OCTAVEHOME}/bin/octave} to start Octave,\n@code{program_invocation_name} would have the value\n@code{\"@value{OCTAVEHOME}/bin/octave\"}, and @code{program_name} would\nhave the value @code{\"octave\"}.\n\nIf executing a script from the command line (e.g., @code{octave foo.m})\nor using an executable Octave script, the program name is set to the\nname of the script.  @xref{Executable Octave Programs}, for an example of\nhow to create an executable Octave script.\n@end defvr") ;
}

static void
print_utils_doc_strings (void)
{
 XDEFUN_INTERNAL (file_in_loadpath, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} file_in_loadpath (@var{name})\n\nLook up @var{name} in Octave's @code{LOADPATH}.\n@end deftypefn\n@seealso{file_in_path}") 
 XDEFUN_INTERNAL (file_in_path, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} file_in_path (@var{path}, @var{file})\nReturn the absolute name name of @var{file} if it can be found in\n@var{path}.  The value of @var{path} should be a colon-separated list of\ndirectories in the format described for the built-in variable\n@code{LOADPATH}.\n\nIf the file cannot be found in the path, an empty matrix is returned.\nFor example,\n\n@example\nfile_in_path (LOADPATH, \"nargchk.m\")\n     @result{} \"@value{OCTAVEHOME}/share/octave/2.0/m/general/nargchk.m\"\n@end example\n@end deftypefn") 
 XDEFUN_INTERNAL (do_string_escapes, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} do_string_escapes (@var{string})\nConvert special characters in @var{string} to their escaped forms.\n@end deftypefn") 
 XDEFUN_INTERNAL (undo_string_escapes, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} undo_string_escapes (@var{s})\nConverts special characters in strings back to their escaped forms.  For\nexample, the expression\n\n@example\nbell = \"\\a\";\n@end example\n\n@noindent\nassigns the value of the alert character (control-g, ASCII code 7) to\nthe string variable @code{bell}.  If this string is printed, the\nsystem will ring the terminal bell (if it is possible).  This is\nnormally the desired outcome.  However, sometimes it is useful to be\nable to print the original representation of the string, with the\nspecial characters replaced by their escape sequences.  For example,\n\n@example\noctave:13> undo_string_escapes (bell)\nans = \\a\n@end example\n\n@noindent\nreplaces the unprintable alert character with its printable\nrepresentation.\n@end deftypefn") 
 XDEFUN_INTERNAL (ERRNO, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {@var{system_error_number}} errno ()\nReturn the current value of the system-dependent variable errno.\n@end deftypefn") 
   XDEFVAR_INTERNAL("treat_neg_dim_as_zero", SBV_treat_neg_dim_as_zero, 0.0, false, treat_neg_dim_as_zero, "-*- texinfo -*-\n@defvr {Built-in Variable} treat_neg_dim_as_zero\nIf the value of @code{treat_neg_dim_as_zero} is nonzero, expressions\nlike\n\n@example\neye (-1)\n@end example\n\n@noindent\nproduce an empty matrix (i.e., row and column dimensions are zero).\nOtherwise, an error message is printed and control is returned to the\ntop level.  The default value is 0.\n@end defvr") ;
}

static void
print_variables_doc_strings (void)
{
 XDEFUN_INTERNAL (is_global, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} is_global (@var{name})\nReturn 1 if @var{name} is globally visible.  Otherwise, return 0.  For\nexample,\n\n@example\n@group\nglobal x\nis_global (\"x\")\n     @result{} 1\n@end group\n@end example\n@end deftypefn") 
 XDEFUN_INTERNAL (exist, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} exist (@var{name})\nReturn 1 if the name exists as a variable, 2 if the name (after\nappending @samp{.m}) is a function file in the path, 3 if the name is a\n@samp{.oct} file in the path, 5 if the name is a built-in function, or\n6 is the name is a built-in constant.  Otherwise, return 0.\n\nThis function also returns 2 if a regular file called @var{name}\nexists in Octave's @code{LOADPATH}.  If you want information about\nother types of files, you should use some combination of the functions\n@code{file_in_path} and @code{stat} instead.\n@end deftypefn") 
 XDEFUN_INTERNAL (document, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} document (@var{symbol}, @var{text})\nSet the documentation string for @var{symbol} to @var{text}.\n@end deftypefn") 
 XDEFUN_INTERNAL (who, args,, true, "-*- texinfo -*-\n@deffn {Command} who options pattern @dots{}\n@deffnx {Command} whos options pattern @dots{}\nList currently defined symbols matching the given patterns.  The\nfollowing are valid options.  They may be shortened to one character but\nmay not be combined.\n\n@table @code\n@item -all\nList all currently defined symbols.\n\n@item -builtins\nList built-in variables and functions.  This includes all currently\ncompiled function files, but does not include all function files that\nare in the @code{LOADPATH}.\n\n@item -functions\nList user-defined functions.\n\n@item -long\nPrint a long listing including the type and dimensions of any symbols.\nThe symbols in the first column of output indicate whether it is\npossible to redefine the symbol, and whether it is possible for it to be\ncleared.\n\n@item -variables\nList user-defined variables.\n@end table\n\nValid patterns are the same as described for the @code{clear} command\nabove.  If no patterns are supplied, all symbols from the given category\nare listed.  By default, only user defined functions and variables\nvisible in the local scope are displayed.\n\nThe command @kbd{whos} is equivalent to @kbd{who -long}.\n@end deffn") 
 XDEFUN_INTERNAL (whos, args,, true, "-*- texinfo -*-\n@deffn {Command} whos options pattern @dots{}\nSee who.\n@end deffn") 
 XDEFUN_INTERNAL (clear, args,, true, "-*- texinfo -*-\n@deffn {Command} clear [-x] pattern @dots{}\nDelete the names matching the given patterns from the symbol table.  The\npattern may contain the following special characters:\n@table @code\n@item ?\nMatch any single character.\n\n@item *\nMatch zero or more characters.\n\n@item [ @var{list} ]\nMatch the list of characters specified by @var{list}.  If the first\ncharacter is @code{!} or @code{^}, match all characters except those\nspecified by @var{list}.  For example, the pattern @samp{[a-zA-Z]} will\nmatch all lower and upper case alphabetic characters.\n@end table\n\nFor example, the command\n\n@example\nclear foo b*r\n@end example\n\n@noindent\nclears the name @code{foo} and all names that begin with the letter\n@code{b} and end with the letter @code{r}.\n\nIf @code{clear} is called without any arguments, all user-defined\nvariables (local and global) are cleared from the symbol table.  If\n@code{clear} is called with at least one argument, only the visible\nnames matching the arguments are cleared.  For example, suppose you have\ndefined a function @code{foo}, and then hidden it by performing the\nassignment @code{foo = 2}.  Executing the command @kbd{clear foo} once\nwill clear the variable definition and restore the definition of\n@code{foo} as a function.  Executing @kbd{clear foo} a second time will\nclear the function definition.\n\nWith -x, clear the variables that don't match the patterns.\n\nThis command may not be used within a function body.\n@end deffn") 
 XDEFUN_INTERNAL (__dump_symtab_info__, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} __dump_symtab_info__ ()\nPrint raw symbol table statistices.\n@end deftypefn") 
 XDEFUN_INTERNAL (__dump_symbol_info__, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} __dump_symbol_info__ (@var{name})\nPrint symbol table information for the symbol @var{name}.\n@end deftypefn") 
   XDEFVAR_INTERNAL("ans", SBV_ans,, false, 0, "-*- texinfo -*-\n@defvr {Built-in Variable} ans\nThis variable holds the most recently computed result that was not\nexplicitly assigned to a variable.  For example, after the expression\n\n@example\n3^2 + 4^2\n@end example\n\n@noindent\nis evaluated, the value of @code{ans} is 25.\n@end defvr") ;
   XDEFVAR_INTERNAL("ignore_function_time_stamp", SBV_ignore_function_time_stamp, "system", false, ignore_function_time_stamp, "-*- texinfo -*-\n@defvr {Built-in Variable} ignore_function_time_stamp\nThis variable can be used to prevent Octave from making the system call\n@code{stat} each time it looks up functions defined in function files.\nIf @code{ignore_function_time_stamp} to @code{\"system\"}, Octave will not\nautomatically recompile function files in subdirectories of\n@file{@var{octave-home}/lib/@var{version}} if they have changed since\nthey were last compiled, but will recompile other function files in the\n@code{LOADPATH} if they change.  If set to @code{\"all\"}, Octave will not\nrecompile any function files unless their definitions are removed with\n@code{clear}.  For any other value of @code{ignore_function_time_stamp},\nOctave will always check to see if functions defined in function files\nneed to recompiled.  The default value of @code{ignore_function_time_stamp} is\n@code{\"system\"}.\n@end defvr") ;
}


int
main (void)
{
  print_balance_doc_strings ();
  print_besselj_doc_strings ();
  print_betainc_doc_strings ();
  print_chol_doc_strings ();
  print_colloc_doc_strings ();
  print_daspk_doc_strings ();
  print_dassl_doc_strings ();
  print_data_doc_strings ();
  print_debug_doc_strings ();
  print_defaults_doc_strings ();
  print_defun_doc_strings ();
  print_det_doc_strings ();
  print_dirfns_doc_strings ();
  print_dynamic_ld_doc_strings ();
  print_eig_doc_strings ();
  print_error_doc_strings ();
  print_expm_doc_strings ();
  print_fft_doc_strings ();
  print_fft2_doc_strings ();
  print_file_io_doc_strings ();
  print_filter_doc_strings ();
  print_find_doc_strings ();
  print_fsolve_doc_strings ();
  print_gammainc_doc_strings ();
  print_getgrent_doc_strings ();
  print_getpwent_doc_strings ();
  print_getrusage_doc_strings ();
  print_givens_doc_strings ();
  print_help_doc_strings ();
  print_hess_doc_strings ();
  print_ifft_doc_strings ();
  print_ifft2_doc_strings ();
  print_input_doc_strings ();
  print_inv_doc_strings ();
  print_kron_doc_strings ();
  print_lex_doc_strings ();
  print_load_save_doc_strings ();
  print_log_doc_strings ();
  print_lpsolve_doc_strings ();
  print_lsode_doc_strings ();
  print_lu_doc_strings ();
  print_mappers_doc_strings ();
  print_minmax_doc_strings ();
  print_oct_hist_doc_strings ();
  print_oct_procbuf_doc_strings ();
  print_ov_cell_doc_strings ();
  print_ov_list_doc_strings ();
  print_ov_typeinfo_doc_strings ();
  print_ov_usr_fcn_doc_strings ();
  print_ov_doc_strings ();
  print_pager_doc_strings ();
  print_parse_doc_strings ();
  print_pinv_doc_strings ();
  print_pr_output_doc_strings ();
  print_pt_assign_doc_strings ();
  print_pt_decl_doc_strings ();
  print_pt_mat_doc_strings ();
  print_pt_plot_doc_strings ();
  print_pt_stmt_doc_strings ();
  print_qr_doc_strings ();
  print_quad_doc_strings ();
  print_qz_doc_strings ();
  print_rand_doc_strings ();
  print_schur_doc_strings ();
  print_sort_doc_strings ();
  print_strfns_doc_strings ();
  print_svd_doc_strings ();
  print_syl_doc_strings ();
  print_symtab_doc_strings ();
  print_syscalls_doc_strings ();
  print_sysdep_doc_strings ();
  print_time_doc_strings ();
  print_toplev_doc_strings ();
  print_utils_doc_strings ();
  print_variables_doc_strings ();

  return 0;
}
