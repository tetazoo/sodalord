 XDEFUN_INTERNAL (dup2, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{fid}, @var{msg}] =} dup2 (@var{old}, @var{new})\nDuplicate a file descriptor.\n\nIf successful, @var{fid} is greater than zero and contains the new file\nID.  Otherwise, @var{fid} is negative and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (exec, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} exec (@var{file}, @var{args})\nReplace current process with a new process.  Calling @code{exec} without\nfirst calling @code{fork} will terminate your current Octave process and\nreplace it with the program named by @var{file}.  For example,\n\n@example\nexec (\"ls\" \"-l\")\n@end example\n\n@noindent\nwill run @code{ls} and return you to your shell prompt.\n\nIf successful, @code{exec} does not return.  If @code{exec} does return,\n@var{err} will be nonzero, and @var{msg} will contain a system-dependent\nerror message.\n@end deftypefn") 
 XDEFUN_INTERNAL (fcntl, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} fcntl (@var{fid}, @var{request}, @var{arg})\nChange the properties of the open file @var{fid}.  The following values\nmay be passed as @var{request}:\n\n@vtable @code\n@item F_DUPFD\nReturn a duplicate file descriptor.\n\n@item F_GETFD\nReturn the file descriptor flags for @var{fid}.\n\n@item F_SETFD\nSet the file descriptor flags for @var{fid}.\n\n@item F_GETFL\nReturn the file status flags for @var{fid}.  The following codes may be\nreturned (some of the flags may be undefined on some systems).\n\n@vtable @code\n@item O_RDONLY\nOpen for reading only.\n\n@item O_WRONLY\nOpen for writing only.\n\n@item O_RDWR\nOpen for reading and writing.\n\n@item O_APPEND\nAppend on each write.\n\n@item O_NONBLOCK\nNonblocking mode.\n\n@item O_SYNC\nWait for writes to complete.\n\n@item O_ASYNC\nAsynchronous I/O.\n@end vtable\n\n@item F_SETFL\nSet the file status flags for @var{fid} to the value specified by\n@var{arg}.  The only flags that can be changed are @code{O_APPEND} and\n@code{O_NONBLOCK}.\n@end vtable\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (fork, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{pid}, @var{msg}] =} fork ()\nCreate a copy of the current process.\n\nFork can return one of the following values:\n\n@table @asis\n@item > 0\nYou are in the parent process.  The value returned from @code{fork} is\nthe process id of the child process.  You should probably arrange to\nwait for any child processes to exit.\n\n@item 0\nYou are in the child process.  You can call @code{exec} to start another\nprocess.  If that fails, you should probably call @code{exit}.\n\n@item < 0\nThe call to @code{fork} failed for some reason.  You must take evasive\naction.  A system dependent error message will be waiting in @var{msg}.\n@end table\n@end deftypefn") 
 XDEFUN_INTERNAL (getpgrp, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {pgid =} getpgrp ()\nReturn the process group id of the current process.\n@end deftypefn") 
 XDEFUN_INTERNAL (getpid, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {pid =} getpid ()\nReturn the process id of the current process.\n@end deftypefn") 
 XDEFUN_INTERNAL (getppid, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {pid =} getppid ()\nReturn the process id of the parent process.\n@end deftypefn") 
 XDEFUN_INTERNAL (getegid, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {egid =} getegid ()\nReturn the effective group id of the current process.\n@end deftypefn") 
 XDEFUN_INTERNAL (getgid, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {gid =} getgid ()\nReturn the real group id of the current process.\n@end deftypefn") 
 XDEFUN_INTERNAL (geteuid, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {euid =} geteuid ()\nReturn the effective user id of the current process.\n@end deftypefn") 
 XDEFUN_INTERNAL (getuid, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {uid =} getuid ()\nReturn the real user id of the current process.\n@end deftypefn") 
 XDEFUN_INTERNAL (lstat, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{info}, @var{err}, @var{msg}] =} lstat (@var{file})\nSee stat.\n@end deftypefn") 
 XDEFUN_INTERNAL (mkfifo, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} mkfifo (@var{name})\nCreate a @var{fifo} special file named @var{name} with file mode @var{mode}\n\\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (pipe, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{file_ids}, @var{err}, @var{msg}] =} pipe ()\nCreate a pipe and return the vector @var{file_ids}, which corresponding\nto the reading and writing ends of the pipe.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (stat, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{info}, @var{err}, @var{msg}] =} stat (@var{file})\n@deftypefnx {Built-in Function} {[@var{info}, @var{err}, @var{msg}] =} lstat (@var{file})\nReturn a structure @var{s} containing the following information about\n@var{file}.\n\n@table @code\n@item dev\nID of device containing a directory entry for this file.\n\n@item ino\nFile number of the file.\n\n@item modestr\nFile mode, as a string of ten letters or dashes as would be returned by\n@kbd{ls -l}.\n\n@item nlink\nNumber of links.\n\n@item uid\nUser ID of file's owner.\n\n@item gid\nGroup ID of file's group.\n\n@item rdev\nID of device for block or character special files.\n\n@item size\nSize in bytes.\n\n@item atime\nTime of last access in the same form as time values returned from\n@code{time}.  @xref{Timing Utilities}.\n\n@item mtime\nTime of last modification in the same form as time values returned from\n@code{time}.  @xref{Timing Utilities}.\n\n@item ctime\nTime of last file status change in the same form as time values\nreturned from @code{time}.  @xref{Timing Utilities}.\n\n@item blksize\nSize of blocks in the file.\n\n@item blocks\nNumber of blocks allocated for file.\n@end table\n\nIf the call is successful @var{err} is 0 and @var{msg} is an empty\nstring.  If the file does not exist, or some other error occurs, @var{s}\nis an empty matrix, @var{err} is @minus{}1, and @var{msg} contains the\ncorresponding system error message.\n\nIf @var{file} is a symbolic link, @code{stat} will return information\nabout the actual file the is referenced by the link.  Use @code{lstat}\nif you want information about the symbolic link itself.\n\nFor example,\n\n@example\n@group\n[s, err, msg] = stat (\"/vmlinuz\")\n      @result{} s =\n        @{\n          atime = 855399756\n          rdev = 0\n          ctime = 847219094\n          uid = 0\n          size = 389218\n          blksize = 4096\n          mtime = 847219094\n          gid = 6\n          nlink = 1\n          blocks = 768\n          modestr = -rw-r--r--\n          ino = 9316\n          dev = 2049\n        @}\n     @result{} err = 0\n     @result{} msg = \n@end group\n@end example\n@end deftypefn") 
 XDEFUN_INTERNAL (unlink, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} unlink (@var{file})\nDelete the file named @var{file}.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (waitpid, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{pid}, @var{msg}] =} waitpid (@var{pid}, @var{options})\nWait for process @var{pid} to terminate.  The @var{pid} argument can be:\n\n@table @asis\n@item @minus{}1\nWait for any child process.\n\n@item 0\nWait for any child process whose process group ID is equal to that of\nthe Octave interpreter process.\n\n@item > 0\nWait for termination of the child process with ID @var{pid}.\n@end table\n\nThe @var{options} argument can be:\n\n@table @asis\n@item 0\nWait until signal is received or a child process exits (this is the\ndefault if the @var{options} argument is missing).\n\n@item 1\nDo not hang if status is not immediately available.\n\n@item 2\nReport the status of any child processes that are stopped, and whose\nstatus has not yet been reported since they stopped.\n\n@item 3\nImplies both 1 and 2.\n@end table\n\nIf the returned value of @var{pid} is greater than 0, it is the process\nID of the child process that exited.  If an error occurs, @var{pid} will\nbe less than zero and @var{msg} will contain a system-dependent error\nmessage.\n@end deftypefn") 
   XDEFCONST_INTERNAL("F_DUPFD", static_cast<double> (0), "-*- texinfo -*-\n@defvr {Built-in Variable} F_DUPFD\n@end defvr") ;
   XDEFCONST_INTERNAL("F_GETFD", static_cast<double> (1), "-*- texinfo -*-\n@defvr {Built-in Variable} F_GETFD\n@end defvr") ;
   XDEFCONST_INTERNAL("F_GETFL", static_cast<double> (3), "-*- texinfo -*-\n@defvr {Built-in Variable} F_GETFL\n@end defvr") ;
   XDEFCONST_INTERNAL("F_SETFD", static_cast<double> (2), "-*- texinfo -*-\n@defvr {Built-in Variable} F_SETFD\n@end defvr") ;
   XDEFCONST_INTERNAL("F_SETFL", static_cast<double> (4), "-*- texinfo -*-\n@defvr {Built-in Variable} F_SETFL\n@end defvr") ;
   XDEFCONST_INTERNAL("O_APPEND", static_cast<double> (02000), "-*- texinfo -*-\n@defvr {Built-in Variable} O_APPEND\n@end defvr") ;
   XDEFCONST_INTERNAL("O_ASYNC", static_cast<double> (020000), "-*- texinfo -*-\n@defvr {Built-in Variable} O_ASYNC\n@end defvr") ;
   XDEFCONST_INTERNAL("O_CREAT", static_cast<double> (0100), "-*- texinfo -*-\n@defvr {Built-in Variable} O_CREAT\n@end defvr") ;
   XDEFCONST_INTERNAL("O_EXCL", static_cast<double> (0200), "-*- texinfo -*-\n@defvr {Built-in Variable} O_EXCL\n@end defvr") ;
   XDEFCONST_INTERNAL("O_NONBLOCK", static_cast<double> (04000), "-*- texinfo -*-\n@defvr {Built-in Variable} O_NONBLOCK\n@end defvr") ;
   XDEFCONST_INTERNAL("O_RDONLY", static_cast<double> (00), "-*- texinfo -*-\n@defvr {Built-in Variable} O_RDONLY\n@end defvr") ;
   XDEFCONST_INTERNAL("O_RDWR", static_cast<double> (02), "-*- texinfo -*-\n@defvr {Built-in Variable} O_RDWR\n@end defvr") ;
   XDEFCONST_INTERNAL("O_SYNC", static_cast<double> (010000), "-*- texinfo -*-\n@defvr {Built-in Variable} O_SYNC\n@end defvr") ;
   XDEFCONST_INTERNAL("O_TRUNC", static_cast<double> (01000), "-*- texinfo -*-\n@defvr {Built-in Variable} O_TRUNC\n@end defvr") ;
   XDEFCONST_INTERNAL("O_WRONLY", static_cast<double> (01), "-*- texinfo -*-\n@defvr {Built-in Variable} O_WRONLY\n@end defvr") ;
