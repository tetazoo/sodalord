 XDEFUN_INTERNAL (cd, args,, true, "-*- texinfo -*-\n@deffn {Command} cd dir\n@deffnx {Command} chdir dir\nChange the current working directory to @var{dir}.  If @var{dir} is\nomitted, the current directory is changed to the users home\ndirectory.  For example,\n\n@example\ncd ~/octave\n@end example\n\n@noindent\nChanges the current working directory to @file{~/octave}.  If the\ndirectory does not exist, an error message is printed and the working\ndirectory is not changed.\n@end deffn") 
 XDEFALIAS_INTERNAL(chdir, cd) ;
 XDEFUN_INTERNAL (ls, args,, true, "-*- texinfo -*-\n@deffn {Command} ls options\n@deffnx {Command} dir options\nList directory contents.  For example,\n\n@example\nls -l\n     @print{} total 12\n     @print{} -rw-r--r--   1 jwe  users  4488 Aug 19 04:02 foo.m\n     @print{} -rw-r--r--   1 jwe  users  1315 Aug 17 23:14 bar.m\n@end example\n\nThe @code{dir} and @code{ls} commands are implemented by calling your\nsystem's directory listing command, so the available options may vary\nfrom system to system.\n@end deffn") 
 XDEFALIAS_INTERNAL(dir, ls) ;
 XDEFUN_INTERNAL (pwd,, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} pwd ()\nReturn the current working directory.\n@end deftypefn") 
 XDEFUN_INTERNAL (readdir, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{files}, @var{err}, @var{msg}] =} readdir (@var{dir})\nReturn names of the files in the directory @var{dir} as an array of\nstrings.  If an error occurs, return an empty matrix in @var{files}.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (mkdir, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} mkdir (@var{dir})\\nCreate a directory named @var{dir}.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (rmdir, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} rmdir (@var{dir})\nRemove the directory named @var{dir}.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (link, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} link (@var{old}, @var{new})\nCreate a new link (also known as a hard link) to an existing file.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (symlink, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} symlink (@var{old}, @var{new})\nCreate a symbolic link @var{new} which contains the string @var{old}.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (readlink, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{result}, @var{err}, @var{msg}] =} symlink (@var{symlink})\nRead the value of the symbolic link @var{symlink}.\n\nIf successful, @var{result} contains the contents of the symbolic link\n@var{symlink}, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (rename, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} rename (@var{old}, @var{new})\nChange the name of file @var{old} to @var{new}.\n\nIf successful, @var{err} is 0 and @var{msg} is an empty string.\nOtherwise, @var{err} is nonzero and @var{msg} contains a\nsystem-dependent error message.\n@end deftypefn") 
 XDEFUN_INTERNAL (glob, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} glob (@var{pattern})\nGiven an array of strings in @var{pattern}, return the list of file\nnames that match any of them, or an empty string if no patterns match.\nTilde expansion is performed on each of the patterns before looking for\nmatching file names.  For example,\n\n@example\n@group\nglob (\"/vm*\")\n     @result{} \"/vmlinuz\"\n@end group\n@end example\n\nNote that multiple values are returned in a string matrix with the fill\ncharacter set to ASCII NUL.\n@end deftypefn") 
 XDEFUN_INTERNAL (fnmatch, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} fnmatch (@var{pattern}, @var{string})\nReturn 1 or zero for each element of @var{string} that matches any of\nthe elements of the string array @var{pattern}, using the rules of\nfilename pattern matching.  For example,\n\n@example\n@group\nfnmatch (\"a*b\", [\"ab\"; \"axyzb\"; \"xyzab\"])\n     @result{} [ 1; 1; 0 ]\n@end group\n@end example\n@end deftypefn") 
