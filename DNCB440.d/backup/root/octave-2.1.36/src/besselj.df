 XDEFUN_DLD_INTERNAL (besselj, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{j}, @var{ierr}] =} besselj (@var{alpha}, @var{x}, @var{opt})\n@deftypefnx {Loadable Function} {[@var{y}, @var{ierr}] =} bessely (@var{alpha}, @var{x}, @var{opt})\n@deftypefnx {Loadable Function} {[@var{i}, @var{ierr}] =} besseli (@var{alpha}, @var{x}, @var{opt})\n@deftypefnx {Loadable Function} {[@var{k}, @var{ierr}] =} besselk (@var{alpha}, @var{x}, @var{opt})\n@deftypefnx {Loadable Function} {[@var{h}, @var{ierr}] =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})\nCompute Bessel or Hankel functions of various kinds:\n\n@table @code\n@item besselj\nBessel functions of the first kind.\n@item bessely\nBessel functions of the second kind.\n@item besseli\nModified Bessel functions of the first kind.\n@item besselk\nModified Bessel functions of the second kind.\n@item besselh\nCompute Hankel functions of the first (@var{k} = 1) or second (@var{k}\n = 2) kind.\n@end table\n\nIf the argument @var{opt} is supplied, the result is scaled by the\n@code{exp (-I*@var{x})} for @var{k} = 1 or @code{exp (I*@var{x})} for\n @var{k} = 2.\n\nIf @var{alpha} is a scalar, the result is the same size as @var{x}.\nIf @var{x} is a scalar, the result is the same size as @var{alpha}.\nIf @var{alpha} is a row vector and @var{x} is a column vector, the\nresult is a matrix with @code{length (@var{x})} rows and\n@code{length (@var{alpha})} columns.  Otherwise, @var{alpha} and\n@var{x} must conform and the result will be the same size.\n\nThe value of @var{alpha} must be real.  The value of @var{x} may be\ncomplex.\n\nIf requested, @var{ierr} contains the following status information\nand is the same size as the result.\n\n@enumerate 0\n@item\nNormal return.\n@item\nInput error, return @code{NaN}.\n@item\nOverflow, return @code{Inf}.\n@item\nLoss of significance by argument reduction results in less than\nhalf of machine accuracy.\n@item\nComplete loss of significance by argument reduction, return @code{NaN}.\n@item\nError---no computation, algorithm termination condition not met,\nreturn @code{NaN}.\n@end enumerate\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (bessely, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{y}, @var{ierr}] =} bessely (@var{alpha}, @var{x}, @var{opt})\nSee besselj.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (besseli, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{i}, @var{ierr}] =} besseli (@var{alpha}, @var{x}, @var{opt})\nSee besselj.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (besselk, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{k}, @var{ierr}] =} besselk (@var{alpha}, @var{x}, @var{opt})\nSee besselj.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (besselh, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{h}, @var{ierr}] =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})\nSee besselj.\n@end deftypefn") 
 XDEFUN_DLD_INTERNAL (airy, args, nargout, 0, "-*- texinfo -*-\n@deftypefn {Loadable Function} {[@var{a}, @var{ierr}] =} airy (@var{k}, @var{z}, @var{opt})\nCompute Airy functions of the first and second kind, and their\nderivatives.\n\n@example\n  K   Function   Scale factor (if a third argument is supplied)\n ---  --------   ----------------------------------------------\n  0   Ai (Z)     exp ((2/3) * Z * sqrt (Z))\n  1   dAi(Z)/dZ  exp ((2/3) * Z * sqrt (Z))\n  2   Bi (Z)     exp (-abs (real ((2/3) * Z *sqrt (Z))))\n  3   dBi(Z)/dZ  exp (-abs (real ((2/3) * Z *sqrt (Z))))\n@end example\n\nThe function call @code{airy (@var{z})} is equivalent to\n@code{airy (0, @var{z})}.\n\nThe result is the same size as @var{z}.\n\nIf requested, @var{ierr} contains the following status information and\nis the same size as the result.\n\n@enumerate 0\n@item\nNormal return.\n@item\nInput error, return @code{NaN}.\n@item\nOverflow, return @code{Inf}.\n@item\nLoss of significance by argument reduction results in less than half\n of machine accuracy.\n@item\nComplete loss of significance by argument reduction, return @code{NaN}.\n@item\nError---no computation, algorithm termination condition not met,\nreturn @code{NaN}\n@end enumerate\n@end deftypefn") 
