 XDEFUN_INTERNAL (disp, args, nargout, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} disp (@var{x})\nDisplay the value of @var{x}.  For example,\n\n@example\ndisp (\"The value of pi is:\"), disp (pi)\n\n     @print{} the value of pi is:\n     @print{} 3.1416\n@end example\n\n@noindent\nNote that the output from @code{disp} always ends with a newline.\n\nIf an output value is requested, @code{disp} prints nothing and\nreturns the formatted output in a string.\n@end deftypefn\n@seealso{fdisp}") 
 XDEFUN_INTERNAL (fdisp, args,, false, "-*- texinfo -*-\n@deftypefn {Built-in Function} {} fdisp (@var{fid}, @var{x})\nDisplay the value of @var{x} on the stream @var{fid}.  For example,\n\n@example\ndisp (stdout, \"The value of pi is:\"), disp (stdout, pi)\n\n     @print{} the value of pi is:\n     @print{} 3.1416\n@end example\n\n@noindent\nNote that the output from @code{disp} always ends with a newline.\n\nIf an output value is requested, @code{disp} prints nothing and\nreturns the formatted output in a string.\n@end deftypefn\n@seealso{disp}") 
 XDEFUN_INTERNAL (format, args,, true, "-*- texinfo -*-\n@deffn {Command} format options\nControl the format of the output produced by @code{disp} and Octave's\nnormal echoing mechanism.  Valid options are listed in the following\ntable.\n\n@table @code\n@item short\nOctave will try to print numbers with at\nleast 3 significant figures within a field that is a maximum of 8\ncharacters wide.\n\nIf Octave is unable to format a matrix so that columns line up on the\ndecimal point and all the numbers fit within the maximum field width,\nit switches to an @samp{e} format.\n\n@item long\nOctave will try to print numbers with at least 15 significant figures\nwithin a field that is a maximum of 24 characters wide.\n\nAs will the @samp{short} format, Octave will switch to an @samp{e}\nformat if it is unable to format a matrix so that columns line up on the\ndecimal point and all the numbers fit within the maximum field width.\n\n@item long e\n@itemx short e\nThe same as @samp{format long} or @samp{format short} but always display\noutput with an @samp{e} format.  For example, with the @samp{short e}\nformat, pi is displayed as @code{3.14e+00}.\n\n@item long E\n@itemx short E\nThe same as @samp{format long e} or @samp{format short e} but always\ndisplay output with an uppercase @samp{E} format.  For example, with\nthe @samp{long E} format, pi is displayed as\n@code{3.14159265358979E+00}.\n\n@item free\n@itemx none\nPrint output in free format, without trying to line up columns of\nmatrices on the decimal point.  This also causes complex numbers to be\nformatted like this @samp{(0.604194, 0.607088)} instead of like this\n@samp{0.60419 + 0.60709i}.\n\n@item bank\nPrint in a fixed format with two places to the right of the decimal\npoint.\n\n@item +\nPrint a @samp{+} symbol for nonzero matrix elements and a space for zero\nmatrix elements.  This format can be very useful for examining the\nstructure of a large matrix.\n\n@item hex\nPrint the hexadecimal representation numbers as they are stored in\nmemory.  For example, on a workstation which stores 8 byte real values\nin IEEE format with the least significant byte first, the value of\n@code{pi} when printed in @code{hex} format is @code{400921fb54442d18}.\nThis format only works for numeric values.\n\n@item bit\nPrint the bit representation of numbers as stored in memory.\nFor example, the value of @code{pi} is\n\n@example\n@group\n01000000000010010010000111111011\n01010100010001000010110100011000\n@end group\n@end example\n\n(shown here in two 32 bit sections for typesetting purposes) when\nprinted in bit format on a workstation which stores 8 byte real values\nin IEEE format with the least significant byte first.  This format only\nworks for numeric types.\n@end table\n\nBy default, Octave will try to print numbers with at least 5 significant\nfigures within a field that is a maximum of 10 characters wide.\n\nIf Octave is unable to format a matrix so that columns line up on the\ndecimal point and all the numbers fit within the maximum field width,\nit switches to an @samp{e} format.\n\nIf @code{format} is invoked without any options, the default format\nstate is restored.\n@end deffn") 
   XDEFVAR_INTERNAL("fixed_point_format", SBV_fixed_point_format, 0.0, false, fixed_point_format, "-*- texinfo -*-\n@defvr {Built-in Variable} fixed_point_format\nIf the value of this variable is nonzero, Octave will scale all values\nin a matrix so that the largest may be written with one leading digit.\nThe scaling factor is printed on the first line of output.  For example,\n\n@example\n@group\noctave:1> logspace (1, 7, 5)'\nans =\n\n  1.0e+07  *\n\n  0.00000\n  0.00003\n  0.00100\n  0.03162\n  1.00000\n@end group\n@end example\n\n@noindent\nNotice that first value appears to be zero when it is actually 1.  For\nthis reason, you should be careful when setting\n@code{fixed_point_format} to a nonzero value.\n\nThe default value of @code{fixed_point_format} is 0.\n@end defvr") ;
   XDEFVAR_INTERNAL("output_max_field_width", SBV_output_max_field_width, 10.0, false, output_max_field_width, "-*- texinfo -*-\n@defvr {Built-in Variable} output_max_field_width\nThis variable specifies the maximum width of a numeric output field.\nThe default value is 10.\n@end defvr") ;
   XDEFVAR_INTERNAL("output_precision", SBV_output_precision, 5.0, false, output_precision, "-*- texinfo -*-\n@defvr {Built-in Variable} output_precision\nThis variable specifies the minimum number of significant figures to\ndisplay for numeric output.  The default value is 5.\n@end defvr") ;
   XDEFVAR_INTERNAL("print_empty_dimensions", SBV_print_empty_dimensions, 1.0, false, print_empty_dimensions, "-*- texinfo -*-\n@defvr {Built-in Variable} print_empty_dimensions\nIf the value of @code{print_empty_dimensions} is nonzero, the\ndimensions of empty matrices are printed along with the empty matrix\nsymbol, @samp{[]}.  For example, the expression\n\n@example\nzeros (3, 0)\n@end example\n\n@noindent\nwill print\n\n@example\nans = [](3x0)\n@end example\n@end defvr") ;
   XDEFVAR_INTERNAL("split_long_rows", SBV_split_long_rows, 1.0, false, split_long_rows, "-*- texinfo -*-\n@defvr {Built-in Variable} split_long_rows\nFor large matrices, Octave may not be able to display all the columns of\na given row on one line of your screen.  This can result in missing\ninformation or output that is nearly impossible to decipher, depending\non whether your terminal truncates or wraps long lines.\n\nIf the value of @code{split_long_rows} is nonzero, Octave will display\nthe matrix in a series of smaller pieces, each of which can fit within\nthe limits of your terminal width.  Each set of rows is labeled so that\nyou can easily see which columns are currently being displayed.\nFor example:\n\n@smallexample\n@group\noctave:13> rand (2,10)\nans =\n\n Columns 1 through 6:\n\n  0.75883  0.93290  0.40064  0.43818  0.94958  0.16467\n  0.75697  0.51942  0.40031  0.61784  0.92309  0.40201\n\n Columns 7 through 10:\n\n  0.90174  0.11854  0.72313  0.73326\n  0.44672  0.94303  0.56564  0.82150\n@end group\n@end smallexample\n\n@noindent\nThe default value of @code{split_long_rows} is nonzero.\n@end defvr") ;
