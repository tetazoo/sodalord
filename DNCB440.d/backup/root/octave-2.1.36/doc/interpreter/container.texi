@c DO NOT EDIT!  Generated automatically by munge-texi.

@c Copyright (C) 1996, 1997 John W. Eaton
@c This is part of the Octave manual.
@c For copying conditions, see the file gpl.texi.

@node Containers, I/O Streams, Data Structures, Top
@chapter Containers
@cindex containers

@menu
* Lists::                       
* Cell Arrays::                 
@end menu

@node Lists, Cell Arrays, Containers, Containers
@section Lists
@cindex lists

@anchor{doc-list}
@deftypefn {Built-in Function} {} list (@var{a1}, @var{a2}, @dots{})
Create a new list with elements given by the arguments @var{a1},
@var{a2}, @dots{}.
@end deftypefn


@anchor{doc-nth}
@deftypefn {Built-in Function} {} nth (@var{list}, @var{n})
Return the @var{n}-th element of @var{list}.
@end deftypefn


@anchor{doc-append}
@deftypefn {Built-in Function} {} append (@var{list}, @var{a1}, @var{a2}, @dots{})
Return a new list created by appending @var{a1}, @var{a1}, @dots{}, to
@var{list}.  If any of the arguments to be appended is a list, its
elements are appended individually.  For example,

@example
x = list (1, 2);
y = list (3, 4);
append (x, y);
@end example

@noindent
results in the list containing the four elements @samp{(1 2 3 4)}, not
a list containing the three elements @samp{(1 2 (3 4))}.
@end deftypefn


@anchor{doc-reverse}
@deftypefn {Built-in Function} {} reverse (@var{list})
Return a new list created by reversing the elements of @var{list}.
@end deftypefn


@anchor{doc-splice}
@deftypefn {Built-in Function} {} splice (@var{list_1}, @var{offset}, @var{length}, @var{list_2})
Replace @var{length} elements of @var{list_1} beginning at
@var{offset} with the contents of @var{list_2} (if any).  If
@var{length} is omitted, all elements from @var{offset} to the end of
@var{list_1} are replaced.  As a special case, if @var{offset} is one
greater than the length of @var{list_1} and @var{length} is 0, splice
is equivalent to @code{append (@var{list_1}, @var{list_2})}.
@end deftypefn


@anchor{doc-is_list}
@deftypefn {Built-in Function} {} is_list (@var{x})
Return nonzero if @var{x} is a list.
@end deftypefn


@node Cell Arrays,  , Lists, Containers
@section Cell Arrays
@cindex cell arrays

@anchor{doc-cell}
@deftypefn {Built-in Function} {} cell (@var{x})
@deftypefnx {Built-in Function} {} cell (@var{n}, @var{m})
Create a new cell array object.  If invoked with a single scalar
argument, @code{cell} returns a square cell array with the dimension
specified.  If you supply two scalar arguments, @code{cell} takes
them to be the number of rows and columns.  If given a vector with two
elements, @code{cell} uses the values of the elements as the number of
rows and columns, respectively.
@end deftypefn


@anchor{doc-iscell}
@deftypefn {Built-in Function} {} iscell (@var{x})
Return true if @var{x} is a cell array object.  Otherwise, return
false.
@end deftypefn

